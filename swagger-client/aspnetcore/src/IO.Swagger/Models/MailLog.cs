/*
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Mail log records
    /// </summary>
    [DataContract]
    public partial class MailLog : IEquatable<MailLog>
    { 
        /// <summary>
        /// total number of mail log entries
        /// </summary>
        /// <value>total number of mail log entries</value>
        [Required]

        [DataMember(Name="total")]
        public int? Total { get; set; }

        /// <summary>
        /// number of emails skipped in listing
        /// </summary>
        /// <value>number of emails skipped in listing</value>
        [Required]

        [DataMember(Name="skip")]
        public int? Skip { get; set; }

        /// <summary>
        /// number of emails to return
        /// </summary>
        /// <value>number of emails to return</value>
        [Required]

        [DataMember(Name="limit")]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or Sets Emails
        /// </summary>
        [Required]

        [DataMember(Name="emails")]
        public List<MailLogEntry> Emails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailLog {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MailLog)obj);
        }

        /// <summary>
        /// Returns true if MailLog instances are equal
        /// </summary>
        /// <param name="other">Instance of MailLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailLog other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    Skip == other.Skip ||
                    Skip != null &&
                    Skip.Equals(other.Skip)
                ) && 
                (
                    Limit == other.Limit ||
                    Limit != null &&
                    Limit.Equals(other.Limit)
                ) && 
                (
                    Emails == other.Emails ||
                    Emails != null &&
                    Emails.SequenceEqual(other.Emails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Skip != null)
                    hashCode = hashCode * 59 + Skip.GetHashCode();
                    if (Limit != null)
                    hashCode = hashCode * 59 + Limit.GetHashCode();
                    if (Emails != null)
                    hashCode = hashCode * 59 + Emails.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MailLog left, MailLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MailLog left, MailLog right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

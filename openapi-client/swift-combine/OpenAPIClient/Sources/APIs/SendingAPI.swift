//
// SendingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class SendingAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.mailbaby.net")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum SendAdvMailError: Error, CustomStringConvertible {
        // Error message when there was a problem with the input parameters.
        case code400Error(ErrorMessage)
        // Unauthorized
        case code401Error(ErrorMessage)
        // The specified resource was not found
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "SendAdvMailError: Error message when there was a problem with the input parameters.: \(object)"
            case .code401Error(let object):
                return "SendAdvMailError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "SendAdvMailError: The specified resource was not found: \(object)"
            }
        }
    }

    /// Sends an Email with Advanced Options
    /// - POST /mail/advsend
    /// - Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  Here are 9 examples showing the various ways to call the advsend operation showing the different ways you can pass the to, cc, bcc, and replyto information. The first several examples are all for the application/x-www-form-urlencoded content-type while the later ones are for application/json content-types.  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data 'subject=Welcome' \\ --data 'body=Hello' \\ --data from=user@domain.com \\ --data to=support@interserver.net ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data 'subject=Welcome' \\ --data 'body=Hello' \\ --data from=user@domain.com \\ --data \"to[0][name]=Joe\" \\ --data \"to[0][email]=support@interserver.net\" ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data 'subject=Welcome' \\ --data 'body=Hello' \\ --data from=\"Joe <user@domain.com>\" \\ --data to=\"Joe <support@interserver.net>\" ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data 'subject=Welcome' \\ --data 'body=Hello' \\ --data from=user@domain.com \\ --data \"to=support@interserver.net, support@interserver.net\" ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data 'subject=Welcome' \\ --data 'body=Hello' \\ --data from=user@domain.com \\ --data \"to=Joe <support@interserver.net>, Joe <support@interserver.net>\" ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data 'subject=Welcome' \\ --data 'body=Hello' \\ --data from=user@domain.com \\ --data \"to[0][name]=Joe\" \\ --data \"to[0][email]=support@interserver.net\" \\ --data \"to[1][name]=Joe\" \\ --data \"to[1][email]=support@interserver.net\" ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data '{ \"subject\": \"Welcome\", \"body\": \"Hello\", \"from\": \"user@domain.com\", \"to\": \"support@interserver.net\" }' ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data '{ \"subject\": \"Welcome\", \"body\": \"Hello\", \"from\": {\"name\": \"Joe\", \"email\": \"user@domain.com\"}, \"to\": [{\"name\": \"Joe\", \"email\": \"support@interserver.net\"}] }' ```  ``` curl -i --request POST --url https://api.mailbaby.net/mail/advsend \\ --header 'Accept: application/json' \\ --header 'Content-Type: application/json' \\ --header 'X-API-KEY: YOUR_API_KEY' \\ --data '{ \"subject\": \"Welcome\", \"body\": \"Hello\", \"from\": \"Joe <user@domain.com>\", \"to\": \"Joe <support@interserver.net>\" }' ``` 
    /// - API Key:
    /// - type: apiKey X-API-KEY (HEADER)
    /// - name: apiKeyAuth
    /// - parameter subject: (form) The subject or title of the email 
    /// - parameter body: (form) The main email contents. 
    /// - parameter from: (form)  
    /// - parameter to: (form)  
    /// - parameter replyto: (form)  (optional)
    /// - parameter cc: (form)  (optional)
    /// - parameter bcc: (form)  (optional)
    /// - parameter attachments: (form) (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
    /// - parameter id: (form) (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
    /// - returns: AnyPublisher<GenericResponse, Error> 
    open func sendAdvMail(subject: String, body: String, from: EmailAddressTypes, to: EmailAddressesTypes, replyto: EmailAddressesTypes? = nil, cc: EmailAddressesTypes? = nil, bcc: EmailAddressesTypes? = nil, attachments: [MailAttachment]? = nil, id: Int64? = nil) -> AnyPublisher<GenericResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/advsend"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var formEncodedItems: [String] = []
                formEncodedItems.append("subject=\(subject)")
                formEncodedItems.append("body=\(body)")
                formEncodedItems.append("from=\(String(data: try self.encoder.encode(from), encoding: .utf8) ?? "")")
                formEncodedItems.append("to=\(String(data: try self.encoder.encode(to), encoding: .utf8) ?? "")")
                if let replyto = replyto { formEncodedItems.append("replyto=\(String(data: try self.encoder.encode(replyto), encoding: .utf8) ?? "")") } 
                if let cc = cc { formEncodedItems.append("cc=\(String(data: try self.encoder.encode(cc), encoding: .utf8) ?? "")") } 
                if let bcc = bcc { formEncodedItems.append("bcc=\(String(data: try self.encoder.encode(bcc), encoding: .utf8) ?? "")") } 
                if let attachments = attachments { formEncodedItems.append("attachments=\(String(data: try self.encoder.encode(attachments), encoding: .utf8) ?? "")") } 
                if let id = id { formEncodedItems.append("id=\("\(id)")") } 
                request.httpBody = formEncodedItems.joined(separator: "&").data(using: .utf8)
                request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GenericResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return SendAdvMailError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return SendAdvMailError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return SendAdvMailError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(GenericResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum SendMailError: Error, CustomStringConvertible {
        // Error message when there was a problem with the input parameters.
        case code400Error(ErrorMessage)
        // Unauthorized
        case code401Error(ErrorMessage)
        // The specified resource was not found
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "SendMailError: Error message when there was a problem with the input parameters.: \(object)"
            case .code401Error(let object):
                return "SendMailError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "SendMailError: The specified resource was not found: \(object)"
            }
        }
    }

    /// Sends an Email
    /// - POST /mail/send
    /// - Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
    /// - API Key:
    /// - type: apiKey X-API-KEY (HEADER)
    /// - name: apiKeyAuth
    /// - parameter to: (form) The Contact whom is the primary recipient of this email. 
    /// - parameter from: (form) The contact whom is the this email is from. 
    /// - parameter subject: (form) The subject or title of the email 
    /// - parameter body: (form) The main email contents. 
    /// - returns: AnyPublisher<GenericResponse, Error> 
    open func sendMail(to: String, from: String, subject: String, body: String) -> AnyPublisher<GenericResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/send"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var formEncodedItems: [String] = []
                formEncodedItems.append("to=\(to)")
                formEncodedItems.append("from=\(from)")
                formEncodedItems.append("subject=\(subject)")
                formEncodedItems.append("body=\(body)")
                request.httpBody = formEncodedItems.joined(separator: "&").data(using: .utf8)
                request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GenericResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return SendMailError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return SendMailError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return SendMailError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(GenericResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

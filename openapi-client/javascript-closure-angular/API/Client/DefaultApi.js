/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.DefaultApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.DefaultApi');

goog.require('API.Client.GenericResponse');
goog.require('API.Client.MailLog');
goog.require('API.Client.SendMailAdv');
goog.require('API.Client.getMailOrders_200_response_inner');
goog.require('API.Client.getMailOrders_401_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.DefaultApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DefaultApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DefaultApiBasePath')) :
                   'https://api.mailbaby.net';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DefaultApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DefaultApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.DefaultApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * displays a list of mail service orders
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.getMailOrders_200_response_inner>>}
 */
API.Client.DefaultApi.prototype.getMailOrders = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Checks if the server is running
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DefaultApi.prototype.pingServer = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/ping';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Sends an Email with Advanced Options
 * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
 * @param {!SendMailAdv} sendMailAdv 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GenericResponse>}
 */
API.Client.DefaultApi.prototype.sendAdvMail = function(sendMailAdv, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/advsend';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sendMailAdv' is set
  if (!sendMailAdv) {
    throw new Error('Missing required parameter sendMailAdv when calling sendAdvMail');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: sendMailAdv,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Sends an Email
 * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
 * @param {!string} to The Contact whom is the primary recipient of this email.
 * @param {!string} from The contact whom is the this email is from.
 * @param {!string} subject The subject or title of the email
 * @param {!string} body The main email contents.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GenericResponse>}
 */
API.Client.DefaultApi.prototype.sendMail = function(to, from, subject, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/send';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling sendMail');
  }
  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling sendMail');
  }
  // verify required parameter 'subject' is set
  if (!subject) {
    throw new Error('Missing required parameter subject when calling sendMail');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling sendMail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['to'] = to;

  formParams['from'] = from;

  formParams['subject'] = subject;

  formParams['body'] = body;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * displays the mail log
 * By passing in the appropriate options, you can search for available inventory in the system 
 * @param {!number=} opt_id The ID of your mail order this will be sent through.
 * @param {!string=} opt_search pass an optional search string for looking up inventory
 * @param {!number=} opt_skip number of records to skip for pagination
 * @param {!number=} opt_limit maximum number of records to return
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MailLog>}
 */
API.Client.DefaultApi.prototype.viewMailLog = function(opt_id, opt_search, opt_skip, opt_limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/log';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_id !== undefined) {
    queryParameters['id'] = opt_id;
  }

  if (opt_search !== undefined) {
    queryParameters['search'] = opt_search;
  }

  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

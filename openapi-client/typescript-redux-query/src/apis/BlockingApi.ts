// tslint:disable
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DenyRuleRecord,
    DenyRuleRecordFromJSON,
    DenyRuleRecordToJSON,
    ErrorMessage,
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    GenericResponse,
    GenericResponseFromJSON,
    GenericResponseToJSON,
    MailBlocks,
    MailBlocksFromJSON,
    MailBlocksToJSON,
} from '../models';

export interface AddRuleRequest {
    type: AddRuleTypeEnum;
    data: string;
    user?: string;
}

export interface DeleteRuleRequest {
    ruleId: number;
}

export interface DelistBlockRequest {
    body: string;
}


/**
 * Adds a new email deny rule into the system to block new emails that match the given criteria
 * Creates a new email deny rule.
 */
function addRuleRaw<T>(requestParameters: AddRuleRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.type === null || requestParameters.type === undefined) {
        throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling addRule.');
    }

    if (requestParameters.data === null || requestParameters.data === undefined) {
        throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling addRule.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const formData = new FormData();
    if (requestParameters.user !== undefined) {
        formData.append('user', requestParameters.user as any);
    }

    if (requestParameters.type !== undefined) {
        formData.append('type', requestParameters.type as any);
    }

    if (requestParameters.data !== undefined) {
        formData.append('data', requestParameters.data as any);
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/rules`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Adds a new email deny rule into the system to block new emails that match the given criteria
* Creates a new email deny rule.
*/
export function addRule<T>(requestParameters: AddRuleRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return addRuleRaw(requestParameters, requestConfig);
}

/**
 * Removes one of the configured deny mail rules from the system.
 * Removes an deny mail rule.
 */
function deleteRuleRaw<T>(requestParameters: DeleteRuleRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
        throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling deleteRule.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Removes one of the configured deny mail rules from the system.
* Removes an deny mail rule.
*/
export function deleteRule<T>(requestParameters: DeleteRuleRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return deleteRuleRaw(requestParameters, requestConfig);
}

/**
 * Removes an email address from the various block lists. 
 * Removes an email address from the blocked list
 */
function delistBlockRaw<T>(requestParameters: DelistBlockRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling delistBlock.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/blocks/delete`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || requestParameters.body as any,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Removes an email address from the various block lists. 
* Removes an email address from the blocked list
*/
export function delistBlock<T>(requestParameters: DelistBlockRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return delistBlockRaw(requestParameters, requestConfig);
}

/**
 * displays a list of blocked email addresses
 */
function getMailBlocksRaw<T>( requestConfig: runtime.TypedQueryConfig<T, MailBlocks> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/blocks`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MailBlocksFromJSON(body), text);
    }

    return config;
}

/**
* displays a list of blocked email addresses
*/
export function getMailBlocks<T>( requestConfig?: runtime.TypedQueryConfig<T, MailBlocks>): QueryConfig<T> {
    return getMailBlocksRaw( requestConfig);
}

/**
 * Returns a listing of all the deny block rules you have configured.
 * Displays a listing of deny email rules.
 */
function getRulesRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<DenyRuleRecord>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/rules`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(DenyRuleRecordFromJSON), text);
    }

    return config;
}

/**
* Returns a listing of all the deny block rules you have configured.
* Displays a listing of deny email rules.
*/
export function getRules<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<DenyRuleRecord>>): QueryConfig<T> {
    return getRulesRaw( requestConfig);
}


/**
    * @export
    * @enum {string}
    */
export enum AddRuleTypeEnum {
    Domain = 'domain',
    Email = 'email',
    Startswith = 'startswith',
    Destination = 'destination'
}

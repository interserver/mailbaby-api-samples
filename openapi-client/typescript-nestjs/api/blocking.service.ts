/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Injectable, Optional } from '@nestjs/common';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { DenyRuleRecord } from '../model/denyRuleRecord';
import { ErrorMessage } from '../model/errorMessage';
import { GenericResponse } from '../model/genericResponse';
import { MailBlocks } from '../model/mailBlocks';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class BlockingService {

    protected basePath = 'https://api.mailbaby.net';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Creates a new email deny rule.
     * Adds a new email deny rule into the system to block new emails that match the given criteria
     * @param type The type of deny rule.
     * @param data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
     * @param user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [addRuleOpts.config] Override http request option.
     */
    public addRule(type: string, data: string, user?: string, addRuleOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<GenericResponse>>;
    public addRule(type: string, data: string, user?: string, addRuleOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling addRule.');
        }

        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling addRule.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            // formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (user !== undefined) {
            formParams!.append('user', <any>user);
        }

        if (type !== undefined) {
            formParams!.append('type', <any>type);
        }

        if (data !== undefined) {
            formParams!.append('data', <any>data);
        }

        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<GenericResponse>(`${this.basePath}/mail/rules`,
                    convertFormParamsToString ? formParams!.toString() : formParams!,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...addRuleOpts?.config,
                        headers: {...headers, ...addRuleOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Removes an deny mail rule.
     * Removes one of the configured deny mail rules from the system.
     * @param ruleId The ID of the Rules entry.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [deleteRuleOpts.config] Override http request option.
     */
    public deleteRule(ruleId: number, deleteRuleOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<GenericResponse>>;
    public deleteRule(ruleId: number, deleteRuleOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (ruleId === null || ruleId === undefined) {
            throw new Error('Required parameter ruleId was null or undefined when calling deleteRule.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<GenericResponse>(`${this.basePath}/mail/rules/${encodeURIComponent(String(ruleId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...deleteRuleOpts?.config,
                        headers: {...headers, ...deleteRuleOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Removes an email address from the blocked list
     * Removes an email address from the various block lists. 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [delistBlockOpts.config] Override http request option.
     */
    public delistBlock(body: string, delistBlockOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<GenericResponse>>;
    public delistBlock(body: string, delistBlockOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling delistBlock.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<GenericResponse>(`${this.basePath}/mail/blocks/delete`,
                    body,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...delistBlockOpts?.config,
                        headers: {...headers, ...delistBlockOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * displays a list of blocked email addresses
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getMailBlocksOpts.config] Override http request option.
     */
    public getMailBlocks(getMailBlocksOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MailBlocks>>;
    public getMailBlocks(getMailBlocksOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MailBlocks>(`${this.basePath}/mail/blocks`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getMailBlocksOpts?.config,
                        headers: {...headers, ...getMailBlocksOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Displays a listing of deny email rules.
     * Returns a listing of all the deny block rules you have configured.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getRulesOpts.config] Override http request option.
     */
    public getRules(getRulesOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<Array<DenyRuleRecord>>>;
    public getRules(getRulesOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys?.["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<DenyRuleRecord>>(`${this.basePath}/mail/rules`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...getRulesOpts?.config,
                        headers: {...headers, ...getRulesOpts?.config?.headers},
                    }
                );
            })
        );
    }
}

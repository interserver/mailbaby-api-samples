/*
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.MailStatsTypeVolume;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost.
 */
@JsonPropertyOrder({
  MailStatsType.JSON_PROPERTY_TIME,
  MailStatsType.JSON_PROPERTY_USAGE,
  MailStatsType.JSON_PROPERTY_CURRENCY,
  MailStatsType.JSON_PROPERTY_CURRENCY_SYMBOL,
  MailStatsType.JSON_PROPERTY_COST,
  MailStatsType.JSON_PROPERTY_RECEIVED,
  MailStatsType.JSON_PROPERTY_SENT,
  MailStatsType.JSON_PROPERTY_VOLUME
})
@JsonTypeName("MailStatsType")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2025-06-11T03:19:54.195791465-04:00[America/New_York]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Introspected
public class MailStatsType {
    /**
     * Gets or Sets time
     */
    public enum TimeEnum {
        ALL("all"),
        BILLING("billing"),
        MONTH("month"),
        _7D("7d"),
        _24H("24h"),
        TODAY("today"),
        _1H("1h");

        private String value;

        TimeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TimeEnum fromValue(String value) {
            for (TimeEnum b : TimeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_TIME = "time";
    private TimeEnum time = TimeEnum._1H;

    public static final String JSON_PROPERTY_USAGE = "usage";
    private Integer usage;

    public static final String JSON_PROPERTY_CURRENCY = "currency";
    private String currency;

    public static final String JSON_PROPERTY_CURRENCY_SYMBOL = "currencySymbol";
    private String currencySymbol;

    public static final String JSON_PROPERTY_COST = "cost";
    private Double cost;

    public static final String JSON_PROPERTY_RECEIVED = "received";
    private Integer received;

    public static final String JSON_PROPERTY_SENT = "sent";
    private Integer sent;

    public static final String JSON_PROPERTY_VOLUME = "volume";
    private MailStatsTypeVolume volume;

    public MailStatsType() {
    }

    public MailStatsType time(TimeEnum time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     * @return time
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public TimeEnum getTime() {
        return time;
    }

    @JsonProperty(JSON_PROPERTY_TIME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTime(TimeEnum time) {
        this.time = time;
    }

    public MailStatsType usage(Integer usage) {
        this.usage = usage;
        return this;
    }

    /**
     * Get usage
     * @return usage
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_USAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getUsage() {
        return usage;
    }

    @JsonProperty(JSON_PROPERTY_USAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUsage(Integer usage) {
        this.usage = usage;
    }

    public MailStatsType currency(String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get currency
     * @return currency
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCurrency() {
        return currency;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public MailStatsType currencySymbol(String currencySymbol) {
        this.currencySymbol = currencySymbol;
        return this;
    }

    /**
     * Get currencySymbol
     * @return currencySymbol
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CURRENCY_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getCurrencySymbol() {
        return currencySymbol;
    }

    @JsonProperty(JSON_PROPERTY_CURRENCY_SYMBOL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = currencySymbol;
    }

    public MailStatsType cost(Double cost) {
        this.cost = cost;
        return this;
    }

    /**
     * Get cost
     * @return cost
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_COST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Double getCost() {
        return cost;
    }

    @JsonProperty(JSON_PROPERTY_COST)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCost(Double cost) {
        this.cost = cost;
    }

    public MailStatsType received(Integer received) {
        this.received = received;
        return this;
    }

    /**
     * Get received
     * @return received
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_RECEIVED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getReceived() {
        return received;
    }

    @JsonProperty(JSON_PROPERTY_RECEIVED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReceived(Integer received) {
        this.received = received;
    }

    public MailStatsType sent(Integer sent) {
        this.sent = sent;
        return this;
    }

    /**
     * Get sent
     * @return sent
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSent() {
        return sent;
    }

    @JsonProperty(JSON_PROPERTY_SENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSent(Integer sent) {
        this.sent = sent;
    }

    public MailStatsType volume(MailStatsTypeVolume volume) {
        this.volume = volume;
        return this;
    }

    /**
     * Get volume
     * @return volume
     */
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public MailStatsTypeVolume getVolume() {
        return volume;
    }

    @JsonProperty(JSON_PROPERTY_VOLUME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setVolume(MailStatsTypeVolume volume) {
        this.volume = volume;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MailStatsType mailStatsType = (MailStatsType) o;
        return Objects.equals(this.time, mailStatsType.time) &&
            Objects.equals(this.usage, mailStatsType.usage) &&
            Objects.equals(this.currency, mailStatsType.currency) &&
            Objects.equals(this.currencySymbol, mailStatsType.currencySymbol) &&
            Objects.equals(this.cost, mailStatsType.cost) &&
            Objects.equals(this.received, mailStatsType.received) &&
            Objects.equals(this.sent, mailStatsType.sent) &&
            Objects.equals(this.volume, mailStatsType.volume);
    }

    @Override
    public int hashCode() {
        return Objects.hash(time, usage, currency, currencySymbol, cost, received, sent, volume);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MailStatsType {\n");
        sb.append("    time: ").append(toIndentedString(time)).append("\n");
        sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
        sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
        sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
        sb.append("    received: ").append(toIndentedString(received)).append("\n");
        sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
        sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}


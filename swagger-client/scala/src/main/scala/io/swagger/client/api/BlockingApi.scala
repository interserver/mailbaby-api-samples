/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.DenyRuleNew
import io.swagger.client.model.DenyRuleRecord
import io.swagger.client.model.EmailAddress
import io.swagger.client.model.GenericResponse
import io.swagger.client.model.MailBlocks
import io.swagger.client.model.inline_response_401
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class BlockingApi(
  val defBasePath: String = "https://api.mailbaby.net",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new BlockingApiAsyncHelper(client, config)

  /**
   * Creates a new email deny rule.
   * Adds a new email deny rule into the system to block new emails that match the given criteria
   *
   * @param user  
   * @param &#x60;type&#x60;  
   * @param data  
   * @param body These are the fields needed to create a new email deny rule. 
   * @return GenericResponse
   */
  def addRule(user: String, &#x60;type&#x60;: String, data: String, body: DenyRuleNew): Option[GenericResponse] = {
    val await = Try(Await.result(addRuleAsync(user, &#x60;type&#x60;, data, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Creates a new email deny rule. asynchronously
   * Adds a new email deny rule into the system to block new emails that match the given criteria
   *
   * @param user  
   * @param &#x60;type&#x60;  
   * @param data  
   * @param body These are the fields needed to create a new email deny rule. 
   * @return Future(GenericResponse)
   */
  def addRuleAsync(user: String, &#x60;type&#x60;: String, data: String, body: DenyRuleNew): Future[GenericResponse] = {
      helper.addRule(user, &#x60;type&#x60;, data, body)
  }

  /**
   * Removes an deny mail rule.
   * Removes one of the configured deny mail rules from the system.
   *
   * @param ruleId The ID of the Rules entry. 
   * @return GenericResponse
   */
  def deleteRule(ruleId: Integer): Option[GenericResponse] = {
    val await = Try(Await.result(deleteRuleAsync(ruleId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Removes an deny mail rule. asynchronously
   * Removes one of the configured deny mail rules from the system.
   *
   * @param ruleId The ID of the Rules entry. 
   * @return Future(GenericResponse)
   */
  def deleteRuleAsync(ruleId: Integer): Future[GenericResponse] = {
      helper.deleteRule(ruleId)
  }

  /**
   * Removes an email address from the blocked list
   * Removes an email address from the various block lists. 
   *
   * @param body  
   * @param email  
   * @return GenericResponse
   */
  def delistBlock(body: EmailAddress, email: String): Option[GenericResponse] = {
    val await = Try(Await.result(delistBlockAsync(body, email), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Removes an email address from the blocked list asynchronously
   * Removes an email address from the various block lists. 
   *
   * @param body  
   * @param email  
   * @return Future(GenericResponse)
   */
  def delistBlockAsync(body: EmailAddress, email: String): Future[GenericResponse] = {
      helper.delistBlock(body, email)
  }

  /**
   * displays a list of blocked email addresses
   * 
   *
   * @return MailBlocks
   */
  def getMailBlocks(): Option[MailBlocks] = {
    val await = Try(Await.result(getMailBlocksAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * displays a list of blocked email addresses asynchronously
   * 
   *
   * @return Future(MailBlocks)
   */
  def getMailBlocksAsync(): Future[MailBlocks] = {
      helper.getMailBlocks()
  }

  /**
   * Displays a listing of deny email rules.
   * Returns a listing of all the deny block rules you have configured.
   *
   * @return List[DenyRuleRecord]
   */
  def getRules(): Option[List[DenyRuleRecord]] = {
    val await = Try(Await.result(getRulesAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Displays a listing of deny email rules. asynchronously
   * Returns a listing of all the deny block rules you have configured.
   *
   * @return Future(List[DenyRuleRecord])
   */
  def getRulesAsync(): Future[List[DenyRuleRecord]] = {
      helper.getRules()
  }

}

class BlockingApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addRule(user: String,
    &#x60;type&#x60;: String,
    data: String,
    body: DenyRuleNew)(implicit reader: ClientResponseReader[GenericResponse], writer: RequestWriter[DenyRuleNew]): Future[GenericResponse] = {
    // create path and map variables
    val path = (addFmt("/mail/rules"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (user == null) throw new Exception("Missing required parameter 'user' when calling BlockingApi->addRule")

    if (&#x60;type&#x60; == null) throw new Exception("Missing required parameter '&#x60;type&#x60;' when calling BlockingApi->addRule")

    if (data == null) throw new Exception("Missing required parameter 'data' when calling BlockingApi->addRule")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling BlockingApi->addRule")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteRule(ruleId: Integer)(implicit reader: ClientResponseReader[GenericResponse]): Future[GenericResponse] = {
    // create path and map variables
    val path = (addFmt("/mail/rules/{ruleId}")
      replaceAll("\\{" + "ruleId" + "\\}", ruleId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def delistBlock(body: EmailAddress,
    email: String)(implicit reader: ClientResponseReader[GenericResponse], writer: RequestWriter[EmailAddress]): Future[GenericResponse] = {
    // create path and map variables
    val path = (addFmt("/mail/blocks/delete"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling BlockingApi->delistBlock")
    if (email == null) throw new Exception("Missing required parameter 'email' when calling BlockingApi->delistBlock")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getMailBlocks()(implicit reader: ClientResponseReader[MailBlocks]): Future[MailBlocks] = {
    // create path and map variables
    val path = (addFmt("/mail/blocks"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRules()(implicit reader: ClientResponseReader[List[DenyRuleRecord]]): Future[List[DenyRuleRecord]] = {
    // create path and map variables
    val path = (addFmt("/mail/rules"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}

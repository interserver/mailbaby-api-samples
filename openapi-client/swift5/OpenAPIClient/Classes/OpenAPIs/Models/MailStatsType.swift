//
// MailStatsType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost. */
public struct MailStatsType: Codable, JSONEncodable, Hashable {

    public enum Time: String, Codable, CaseIterable {
        case all = "all"
        case billing = "billing"
        case month = "month"
        case _7d = "7d"
        case _24h = "24h"
        case today = "today"
        case _1h = "1h"
    }
    public var time: Time? = ._1h
    public var usage: Int?
    public var currency: String?
    public var currencySymbol: String?
    public var cost: Double?
    public var received: Int?
    public var sent: Int?
    public var volume: MailStatsTypeVolume?

    public init(time: Time? = ._1h, usage: Int? = nil, currency: String? = nil, currencySymbol: String? = nil, cost: Double? = nil, received: Int? = nil, sent: Int? = nil, volume: MailStatsTypeVolume? = nil) {
        self.time = time
        self.usage = usage
        self.currency = currency
        self.currencySymbol = currencySymbol
        self.cost = cost
        self.received = received
        self.sent = sent
        self.volume = volume
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case time
        case usage
        case currency
        case currencySymbol
        case cost
        case received
        case sent
        case volume
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(usage, forKey: .usage)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(currencySymbol, forKey: .currencySymbol)
        try container.encodeIfPresent(cost, forKey: .cost)
        try container.encodeIfPresent(received, forKey: .received)
        try container.encodeIfPresent(sent, forKey: .sent)
        try container.encodeIfPresent(volume, forKey: .volume)
    }
}


<?php
/**
 * MailLogEntry
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * MailLogEntry Class Doc Comment
 *
 * @description An email record
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MailLogEntry implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MailLogEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        '_id' => 'int',
        'id' => 'string',
        'from' => 'string',
        'to' => 'string',
        'subject' => 'string',
        'created' => 'string',
        'time' => 'int',
        'user' => 'string',
        'transtype' => 'string',
        'origin' => 'string',
        'interface' => 'string',
        'sending_zone' => 'string',
        'body_size' => 'int',
        'seq' => 'int',
        'recipient' => 'string',
        'domain' => 'string',
        'locked' => 'int',
        'lock_time' => 'string',
        'assigned' => 'string',
        'queued' => 'string',
        'mx_hostname' => 'string',
        'response' => 'string',
        'message_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        '_id' => null,
        'id' => null,
        'from' => null,
        'to' => null,
        'subject' => null,
        'created' => null,
        'time' => null,
        'user' => null,
        'transtype' => null,
        'origin' => null,
        'interface' => null,
        'sending_zone' => null,
        'body_size' => null,
        'seq' => null,
        'recipient' => null,
        'domain' => null,
        'locked' => null,
        'lock_time' => null,
        'assigned' => null,
        'queued' => null,
        'mx_hostname' => null,
        'response' => null,
        'message_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'id' => false,
        'from' => false,
        'to' => false,
        'subject' => false,
        'created' => false,
        'time' => false,
        'user' => false,
        'transtype' => false,
        'origin' => false,
        'interface' => false,
        'sending_zone' => false,
        'body_size' => false,
        'seq' => false,
        'recipient' => false,
        'domain' => false,
        'locked' => false,
        'lock_time' => false,
        'assigned' => false,
        'queued' => false,
        'mx_hostname' => false,
        'response' => false,
        'message_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        '_id' => '_id',
        'id' => 'id',
        'from' => 'from',
        'to' => 'to',
        'subject' => 'subject',
        'created' => 'created',
        'time' => 'time',
        'user' => 'user',
        'transtype' => 'transtype',
        'origin' => 'origin',
        'interface' => 'interface',
        'sending_zone' => 'sendingZone',
        'body_size' => 'bodySize',
        'seq' => 'seq',
        'recipient' => 'recipient',
        'domain' => 'domain',
        'locked' => 'locked',
        'lock_time' => 'lockTime',
        'assigned' => 'assigned',
        'queued' => 'queued',
        'mx_hostname' => 'mxHostname',
        'response' => 'response',
        'message_id' => 'messageId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        '_id' => 'setId',
        'id' => 'setId',
        'from' => 'setFrom',
        'to' => 'setTo',
        'subject' => 'setSubject',
        'created' => 'setCreated',
        'time' => 'setTime',
        'user' => 'setUser',
        'transtype' => 'setTranstype',
        'origin' => 'setOrigin',
        'interface' => 'setInterface',
        'sending_zone' => 'setSendingZone',
        'body_size' => 'setBodySize',
        'seq' => 'setSeq',
        'recipient' => 'setRecipient',
        'domain' => 'setDomain',
        'locked' => 'setLocked',
        'lock_time' => 'setLockTime',
        'assigned' => 'setAssigned',
        'queued' => 'setQueued',
        'mx_hostname' => 'setMxHostname',
        'response' => 'setResponse',
        'message_id' => 'setMessageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        '_id' => 'getId',
        'id' => 'getId',
        'from' => 'getFrom',
        'to' => 'getTo',
        'subject' => 'getSubject',
        'created' => 'getCreated',
        'time' => 'getTime',
        'user' => 'getUser',
        'transtype' => 'getTranstype',
        'origin' => 'getOrigin',
        'interface' => 'getInterface',
        'sending_zone' => 'getSendingZone',
        'body_size' => 'getBodySize',
        'seq' => 'getSeq',
        'recipient' => 'getRecipient',
        'domain' => 'getDomain',
        'locked' => 'getLocked',
        'lock_time' => 'getLockTime',
        'assigned' => 'getAssigned',
        'queued' => 'getQueued',
        'mx_hostname' => 'getMxHostname',
        'response' => 'getResponse',
        'message_id' => 'getMessageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('transtype', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('interface', $data ?? [], null);
        $this->setIfExists('sending_zone', $data ?? [], null);
        $this->setIfExists('body_size', $data ?? [], null);
        $this->setIfExists('seq', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('lock_time', $data ?? [], null);
        $this->setIfExists('assigned', $data ?? [], null);
        $this->setIfExists('queued', $data ?? [], null);
        $this->setIfExists('mx_hostname', $data ?? [], null);
        $this->setIfExists('response', $data ?? [], null);
        $this->setIfExists('message_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['_id'] === null) {
            $invalidProperties[] = "'_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['transtype'] === null) {
            $invalidProperties[] = "'transtype' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['interface'] === null) {
            $invalidProperties[] = "'interface' can't be null";
        }
        if ($this->container['sending_zone'] === null) {
            $invalidProperties[] = "'sending_zone' can't be null";
        }
        if ($this->container['body_size'] === null) {
            $invalidProperties[] = "'body_size' can't be null";
        }
        if ($this->container['seq'] === null) {
            $invalidProperties[] = "'seq' can't be null";
        }
        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['lock_time'] === null) {
            $invalidProperties[] = "'lock_time' can't be null";
        }
        if ($this->container['assigned'] === null) {
            $invalidProperties[] = "'assigned' can't be null";
        }
        if ($this->container['queued'] === null) {
            $invalidProperties[] = "'queued' can't be null";
        }
        if ($this->container['mx_hostname'] === null) {
            $invalidProperties[] = "'mx_hostname' can't be null";
        }
        if ($this->container['response'] === null) {
            $invalidProperties[] = "'response' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param int $_id internal db id
     *
     * @return $this
     */
    public function setId(int $_id): static
    {
        if (is_null($_id)) {
            throw new InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId(): string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id mail id
     *
     * @return $this
     */
    public function setId(string $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom(): string
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from address
     *
     * @return $this
     */
    public function setFrom(string $from): static
    {
        if (is_null($from)) {
            throw new InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo(): string
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to address
     *
     * @return $this
     */
    public function setTo(string $to): static
    {
        if (is_null($to)) {
            throw new InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject(): string
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject email subject
     *
     * @return $this
     */
    public function setSubject(string $subject): static
    {
        if (is_null($subject)) {
            throw new InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated(): string
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created creation date
     *
     * @return $this
     */
    public function setCreated(string $created): static
    {
        if (is_null($created)) {
            throw new InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int
     */
    public function getTime(): int
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time creation timestamp
     *
     * @return $this
     */
    public function setTime(int $time): static
    {
        if (is_null($time)) {
            throw new InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser(): string
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user account
     *
     * @return $this
     */
    public function setUser(string $user): static
    {
        if (is_null($user)) {
            throw new InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets transtype
     *
     * @return string
     */
    public function getTranstype(): string
    {
        return $this->container['transtype'];
    }

    /**
     * Sets transtype
     *
     * @param string $transtype transaction type
     *
     * @return $this
     */
    public function setTranstype(string $transtype): static
    {
        if (is_null($transtype)) {
            throw new InvalidArgumentException('non-nullable transtype cannot be null');
        }
        $this->container['transtype'] = $transtype;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin(): string
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin ip
     *
     * @return $this
     */
    public function setOrigin(string $origin): static
    {
        if (is_null($origin)) {
            throw new InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface(): string
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface name
     *
     * @return $this
     */
    public function setInterface(string $interface): static
    {
        if (is_null($interface)) {
            throw new InvalidArgumentException('non-nullable interface cannot be null');
        }
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets sending_zone
     *
     * @return string
     */
    public function getSendingZone(): string
    {
        return $this->container['sending_zone'];
    }

    /**
     * Sets sending_zone
     *
     * @param string $sending_zone sending zone
     *
     * @return $this
     */
    public function setSendingZone(string $sending_zone): static
    {
        if (is_null($sending_zone)) {
            throw new InvalidArgumentException('non-nullable sending_zone cannot be null');
        }
        $this->container['sending_zone'] = $sending_zone;

        return $this;
    }

    /**
     * Gets body_size
     *
     * @return int
     */
    public function getBodySize(): int
    {
        return $this->container['body_size'];
    }

    /**
     * Sets body_size
     *
     * @param int $body_size email body size in bytes
     *
     * @return $this
     */
    public function setBodySize(int $body_size): static
    {
        if (is_null($body_size)) {
            throw new InvalidArgumentException('non-nullable body_size cannot be null');
        }
        $this->container['body_size'] = $body_size;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return int
     */
    public function getSeq(): int
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param int $seq index of email in the to adderess list
     *
     * @return $this
     */
    public function setSeq(int $seq): static
    {
        if (is_null($seq)) {
            throw new InvalidArgumentException('non-nullable seq cannot be null');
        }
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient(): string
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient to address this email is being sent to
     *
     * @return $this
     */
    public function setRecipient(string $recipient): static
    {
        if (is_null($recipient)) {
            throw new InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain(): string
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain to address domain
     *
     * @return $this
     */
    public function setDomain(string $domain): static
    {
        if (is_null($domain)) {
            throw new InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return int
     */
    public function getLocked(): int
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param int $locked locked status
     *
     * @return $this
     */
    public function setLocked(int $locked): static
    {
        if (is_null($locked)) {
            throw new InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets lock_time
     *
     * @return string
     */
    public function getLockTime(): string
    {
        return $this->container['lock_time'];
    }

    /**
     * Sets lock_time
     *
     * @param string $lock_time lock timestamp
     *
     * @return $this
     */
    public function setLockTime(string $lock_time): static
    {
        if (is_null($lock_time)) {
            throw new InvalidArgumentException('non-nullable lock_time cannot be null');
        }
        $this->container['lock_time'] = $lock_time;

        return $this;
    }

    /**
     * Gets assigned
     *
     * @return string
     */
    public function getAssigned(): string
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     *
     * @param string $assigned assigned server
     *
     * @return $this
     */
    public function setAssigned(string $assigned): static
    {
        if (is_null($assigned)) {
            throw new InvalidArgumentException('non-nullable assigned cannot be null');
        }
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets queued
     *
     * @return string
     */
    public function getQueued(): string
    {
        return $this->container['queued'];
    }

    /**
     * Sets queued
     *
     * @param string $queued queued timestamp
     *
     * @return $this
     */
    public function setQueued(string $queued): static
    {
        if (is_null($queued)) {
            throw new InvalidArgumentException('non-nullable queued cannot be null');
        }
        $this->container['queued'] = $queued;

        return $this;
    }

    /**
     * Gets mx_hostname
     *
     * @return string
     */
    public function getMxHostname(): string
    {
        return $this->container['mx_hostname'];
    }

    /**
     * Sets mx_hostname
     *
     * @param string $mx_hostname mx hostname
     *
     * @return $this
     */
    public function setMxHostname(string $mx_hostname): static
    {
        if (is_null($mx_hostname)) {
            throw new InvalidArgumentException('non-nullable mx_hostname cannot be null');
        }
        $this->container['mx_hostname'] = $mx_hostname;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string
     */
    public function getResponse(): string
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string $response mail delivery response
     *
     * @return $this
     */
    public function setResponse(string $response): static
    {
        if (is_null($response)) {
            throw new InvalidArgumentException('non-nullable response cannot be null');
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets message_id
     *
     * @return string|null
     */
    public function getMessageId(): ?string
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param string|null $message_id message id
     *
     * @return $this
     */
    public function setMessageId(?string $message_id): static
    {
        if (is_null($message_id)) {
            throw new InvalidArgumentException('non-nullable message_id cannot be null');
        }
        $this->container['message_id'] = $message_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



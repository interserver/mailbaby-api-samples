# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

    The version of the OpenAPI document: 1.1.0
    Contact: support@interserver.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.email_address_types import EmailAddressTypes
from openapi_client.models.email_addresses_types import EmailAddressesTypes
from openapi_client.models.mail_attachment import MailAttachment
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SendMailAdv(BaseModel):
    """
    Details for an Email  # noqa: E501
    """
    subject: StrictStr = Field(description="The subject or title of the email")
    body: StrictStr = Field(description="The main email contents.")
    var_from: EmailAddressTypes = Field(alias="from")
    to: EmailAddressesTypes
    replyto: Optional[EmailAddressesTypes] = None
    cc: Optional[EmailAddressesTypes] = None
    bcc: Optional[EmailAddressesTypes] = None
    attachments: Optional[List[MailAttachment]] = Field(default=None, description="(optional) File attachments to include in the email.  The file contents must be base64 encoded!")
    id: Optional[StrictInt] = Field(default=None, description="(optional)  ID of the Mail order within our system to use as the Mail Account.")
    __properties: ClassVar[List[str]] = ["subject", "body", "from", "to", "replyto", "cc", "bcc", "attachments", "id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SendMailAdv from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to
        if self.to:
            _dict['to'] = self.to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replyto
        if self.replyto:
            _dict['replyto'] = self.replyto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc
        if self.cc:
            _dict['cc'] = self.cc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bcc
        if self.bcc:
            _dict['bcc'] = self.bcc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of SendMailAdv from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subject": obj.get("subject"),
            "body": obj.get("body"),
            "from": EmailAddressTypes.from_dict(obj.get("from")) if obj.get("from") is not None else None,
            "to": EmailAddressesTypes.from_dict(obj.get("to")) if obj.get("to") is not None else None,
            "replyto": EmailAddressesTypes.from_dict(obj.get("replyto")) if obj.get("replyto") is not None else None,
            "cc": EmailAddressesTypes.from_dict(obj.get("cc")) if obj.get("cc") is not None else None,
            "bcc": EmailAddressesTypes.from_dict(obj.get("bcc")) if obj.get("bcc") is not None else None,
            "attachments": [MailAttachment.from_dict(_item) for _item in obj.get("attachments")] if obj.get("attachments") is not None else None,
            "id": obj.get("id")
        })
        return _obj



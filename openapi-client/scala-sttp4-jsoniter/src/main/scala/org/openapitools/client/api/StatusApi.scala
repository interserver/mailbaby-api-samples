/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.core.JsonSupport.{*, given}
import org.openapitools.client.core.FormSerializable
import org.openapitools.client.core.FormStyleFormat
import org.openapitools.client.core.HeaderSerializable
import org.openapitools.client.core.ApiKeyLocation
import org.openapitools.client.core.PathStyleFormat
import org.openapitools.client.core.PathSerializable
import org.openapitools.client.core.CookieSerializable
import org.openapitools.client.core.Helpers.*
import sttp.client4.jsoniter.*
import sttp.client4.*
import sttp.model.Method

object StatusApi:
  def apply(baseUrl: String = "https://api.mailbaby.net"): StatusApi[org.openapitools.client.core.Authorization.NoAuthorization.type] = StatusApi(baseUrl, org.openapitools.client.core.Authorization.NoAuthorization)
  def withBasicAuth(baseUrl: String, username: String, password: String): StatusApi[org.openapitools.client.core.Authorization.BasicAuth] =
    StatusApi(baseUrl, org.openapitools.client.core.Authorization.BasicAuth(username, password))

  def withApiKeyAuth(baseUrl: String, apiKey: String): StatusApi[org.openapitools.client.core.Authorization.ApiKey] =
    StatusApi(baseUrl, org.openapitools.client.core.Authorization.ApiKey(apiKey))

  def withBearerTokenAuth(baseUrl: String, token: String): StatusApi[org.openapitools.client.core.Authorization.BearerToken] =
    StatusApi(baseUrl, org.openapitools.client.core.Authorization.BearerToken(token))

case class StatusApi[Auth <: org.openapitools.client.core.Authorization] private (baseUrl: String, authConfig: org.openapitools.client.core.Authorization):
  def withBasicAuth(username: String, password: String): StatusApi[org.openapitools.client.core.Authorization.BasicAuth] =
    copy(authConfig = org.openapitools.client.core.Authorization.BasicAuth(username, password))

  def withApiKeyAuth(apiKey: String): StatusApi[org.openapitools.client.core.Authorization.ApiKey] =
    copy(authConfig = org.openapitools.client.core.Authorization.ApiKey(apiKey))

  def withNoAuth: StatusApi[org.openapitools.client.core.Authorization.NoAuthorization.type] =
    copy(authConfig = org.openapitools.client.core.Authorization.NoAuthorization)

  def withBearerTokenAuth(token: String): StatusApi[org.openapitools.client.core.Authorization.BearerToken] =
    copy(authConfig = org.openapitools.client.core.Authorization.BearerToken(token))

  /**
   * Expected answers:
   *   code 200 :  (Server is up and running)
   *   code 0 :  (Something is wrong)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def pingServer(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], Unit]] =
    val requestURL =
      uri"$baseUrl/ping"

    basicRequest
      .method(Method.GET, requestURL)
      .contentType("application/json")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .response(asString.mapWithMetadata(ResponseAs.deserializeRightWithError(_ => Right(()))))

end StatusApi
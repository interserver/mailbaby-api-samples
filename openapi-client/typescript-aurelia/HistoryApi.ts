/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GetStats200ResponseInner,
  MailLog,
} from './models';

/**
 * getStats - parameters interface
 */
export interface IGetStatsParams {
}

/**
 * viewMailLog - parameters interface
 */
export interface IViewMailLogParams {
  id?: number;
  origin?: string;
  mx?: string;
  from?: string;
  to?: string;
  subject?: string;
  mailid?: string;
  skip?: number;
  limit?: number;
  startDate?: number;
  endDate?: number;
}

/**
 * HistoryApi - API class
 */
@autoinject()
export class HistoryApi extends Api {

  /**
   * Creates a new HistoryApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Account usage statistics.
   * Returns information about the usage on your mail accounts.
   */
  async getStats(): Promise<Array<GetStats200ResponseInner>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/stats`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * displays the mail log
   * Get a listing of the emails sent through this system 
   * @param params.id The ID of your mail order this will be sent through.
   * @param params.origin originating ip address sending mail
   * @param params.mx mx record mail was sent to
   * @param params.from from email address
   * @param params.to to/destination email address
   * @param params.subject subject containing this string
   * @param params.mailid mail id
   * @param params.skip number of records to skip for pagination
   * @param params.limit maximum number of records to return
   * @param params.startDate earliest date to get emails in unix timestamp format
   * @param params.endDate earliest date to get emails in unix timestamp format
   */
  async viewMailLog(params: IViewMailLogParams): Promise<MailLog> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/log`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'id': params['id'],
        'origin': params['origin'],
        'mx': params['mx'],
        'from': params['from'],
        'to': params['to'],
        'subject': params['subject'],
        'mailid': params['mailid'],
        'skip': params['skip'],
        'limit': params['limit'],
        'startDate': params['startDate'],
        'endDate': params['endDate'],
      })

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


=begin comment

Mail Baby API

This is an API defintion for accesssing the Mail.Baby mail service.

The version of the OpenAPI document: 1.0.0
Contact: detain@interserver.net
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package OpenAPIClient::DefaultApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_mail_by_id
#
# Gets mail order information by id
# 
# @param int $id User ID (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'User ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_mail_by_id' } = { 
        summary => 'Gets mail order information by id',
        params => $params,
        returns => 'MailOrder',
        };
}
# @return MailOrder
#
sub get_mail_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_mail_by_id");
    }

    # parse inputs
    my $_resource_path = '/mail/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth apiLoginAuth apiPasswordAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MailOrder', $response);
    return $_response_object;
}

#
# get_mail_orders
#
# displays a list of mail service orders
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_mail_orders' } = { 
        summary => 'displays a list of mail service orders',
        params => $params,
        returns => 'ARRAY[MailOrder]',
        };
}
# @return ARRAY[MailOrder]
#
sub get_mail_orders {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mail';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth apiLoginAuth apiPasswordAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[MailOrder]', $response);
    return $_response_object;
}

#
# ping_server
#
# Checks if the server is running
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'ping_server' } = { 
        summary => 'Checks if the server is running',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub ping_server {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/ping';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# place_mail_order
#
# places a mail order
# 
# @param MailOrder $mail_order Inventory item to add (optional)
{
    my $params = {
    'mail_order' => {
        data_type => 'MailOrder',
        description => 'Inventory item to add',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'place_mail_order' } = { 
        summary => 'places a mail order',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub place_mail_order {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mail/order';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'mail_order'}) {
        $_body_data = $args{'mail_order'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth apiLoginAuth apiPasswordAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# send_adv_mail_by_id
#
# Sends an Email with Advanced Options
# 
# @param int $id User ID (required)
# @param SendMail $send_mail  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'User ID',
        required => '1',
    },
    'send_mail' => {
        data_type => 'SendMail',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_adv_mail_by_id' } = { 
        summary => 'Sends an Email with Advanced Options',
        params => $params,
        returns => 'GenericResponse',
        };
}
# @return GenericResponse
#
sub send_adv_mail_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling send_adv_mail_by_id");
    }

    # verify the required parameter 'send_mail' is set
    unless (exists $args{'send_mail'}) {
      croak("Missing the required parameter 'send_mail' when calling send_adv_mail_by_id");
    }

    # parse inputs
    my $_resource_path = '/mail/{id}/advsend';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'application/xml', 'application/x-www-form-urlencoded', 'text/plain');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_mail'}) {
        $_body_data = $args{'send_mail'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth apiLoginAuth apiPasswordAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenericResponse', $response);
    return $_response_object;
}

#
# send_mail_by_id
#
# Sends an Email
# 
# @param int $id User ID (required)
# @param string $subject  (optional)
# @param string $body  (optional)
# @param string $to  (optional)
# @param string $to_name  (optional)
# @param string $from  (optional)
# @param string $from_name  (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'User ID',
        required => '1',
    },
    'subject' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'body' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'to' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'to_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'from' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'from_name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_mail_by_id' } = { 
        summary => 'Sends an Email',
        params => $params,
        returns => 'GenericResponse',
        };
}
# @return GenericResponse
#
sub send_mail_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling send_mail_by_id");
    }

    # parse inputs
    my $_resource_path = '/mail/{id}/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subject'}) {
        $query_params->{'subject'} = $self->{api_client}->to_query_value($args{'subject'});
    }

    # query params
    if ( exists $args{'body'}) {
        $query_params->{'body'} = $self->{api_client}->to_query_value($args{'body'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'to_name'}) {
        $query_params->{'toName'} = $self->{api_client}->to_query_value($args{'to_name'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'from_name'}) {
        $query_params->{'fromName'} = $self->{api_client}->to_query_value($args{'from_name'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth apiLoginAuth apiPasswordAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenericResponse', $response);
    return $_response_object;
}

#
# validate_mail_order
#
# validatess order details before placing an order
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'validate_mail_order' } = { 
        summary => 'validatess order details before placing an order',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub validate_mail_order {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mail/order';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth apiLoginAuth apiPasswordAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# view_mail_log_by_id
#
# displays the mail log
# 
# @param int $id User ID (required)
# @param string $search_string pass an optional search string for looking up inventory (optional)
# @param int $skip number of records to skip for pagination (optional)
# @param int $limit maximum number of records to return (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'User ID',
        required => '1',
    },
    'search_string' => {
        data_type => 'string',
        description => 'pass an optional search string for looking up inventory',
        required => '0',
    },
    'skip' => {
        data_type => 'int',
        description => 'number of records to skip for pagination',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'maximum number of records to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'view_mail_log_by_id' } = { 
        summary => 'displays the mail log',
        params => $params,
        returns => 'ARRAY[MailLog]',
        };
}
# @return ARRAY[MailLog]
#
sub view_mail_log_by_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling view_mail_log_by_id");
    }

    # parse inputs
    my $_resource_path = '/mail/{id}/log';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'search_string'}) {
        $query_params->{'searchString'} = $self->{api_client}->to_query_value($args{'search_string'});
    }

    # query params
    if ( exists $args{'skip'}) {
        $query_params->{'skip'} = $self->{api_client}->to_query_value($args{'skip'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth apiLoginAuth apiPasswordAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[MailLog]', $response);
    return $_response_object;
}

1;

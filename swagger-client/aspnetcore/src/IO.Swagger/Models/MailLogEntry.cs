/*
 * MailBaby Email Delivery API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.0.1
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An email record
    /// </summary>
    [DataContract]
    public partial class MailLogEntry : IEquatable<MailLogEntry>
    { 
        /// <summary>
        /// internal db id
        /// </summary>
        /// <value>internal db id</value>
        [Required]

        [DataMember(Name="_id")]
        public int? Id { get; set; }

        /// <summary>
        /// mail id
        /// </summary>
        /// <value>mail id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// from address
        /// </summary>
        /// <value>from address</value>
        [Required]

        [DataMember(Name="from")]
        public string From { get; set; }

        /// <summary>
        /// to address
        /// </summary>
        /// <value>to address</value>
        [Required]

        [DataMember(Name="to")]
        public string To { get; set; }

        /// <summary>
        /// email subject
        /// </summary>
        /// <value>email subject</value>
        [Required]

        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// message id
        /// </summary>
        /// <value>message id</value>
        [Required]

        [DataMember(Name="messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// creation date
        /// </summary>
        /// <value>creation date</value>
        [Required]

        [DataMember(Name="created")]
        public string Created { get; set; }

        /// <summary>
        /// creation timestamp
        /// </summary>
        /// <value>creation timestamp</value>
        [Required]

        [DataMember(Name="time")]
        public int? Time { get; set; }

        /// <summary>
        /// user account
        /// </summary>
        /// <value>user account</value>
        [Required]

        [DataMember(Name="user")]
        public string User { get; set; }

        /// <summary>
        /// transaction type
        /// </summary>
        /// <value>transaction type</value>
        [Required]

        [DataMember(Name="transtype")]
        public string Transtype { get; set; }

        /// <summary>
        /// transaction host
        /// </summary>
        /// <value>transaction host</value>
        [Required]

        [DataMember(Name="transhost")]
        public string Transhost { get; set; }

        /// <summary>
        /// origin host
        /// </summary>
        /// <value>origin host</value>
        [Required]

        [DataMember(Name="originhost")]
        public string Originhost { get; set; }

        /// <summary>
        /// origin ip
        /// </summary>
        /// <value>origin ip</value>
        [Required]

        [DataMember(Name="origin")]
        public string Origin { get; set; }

        /// <summary>
        /// interface name
        /// </summary>
        /// <value>interface name</value>
        [Required]

        [DataMember(Name="interface")]
        public string _Interface { get; set; }

        /// <summary>
        /// date processed
        /// </summary>
        /// <value>date processed</value>
        [Required]

        [DataMember(Name="date")]
        public string Date { get; set; }

        /// <summary>
        /// sending zone
        /// </summary>
        /// <value>sending zone</value>
        [Required]

        [DataMember(Name="sendingZone")]
        public string SendingZone { get; set; }

        /// <summary>
        /// email body size in bytes
        /// </summary>
        /// <value>email body size in bytes</value>
        [Required]

        [DataMember(Name="bodySize")]
        public int? BodySize { get; set; }

        /// <summary>
        /// md5 sum of the email
        /// </summary>
        /// <value>md5 sum of the email</value>
        [Required]

        [DataMember(Name="sourceMd5")]
        public string SourceMd5 { get; set; }

        /// <summary>
        /// delivery sequency
        /// </summary>
        /// <value>delivery sequency</value>
        [Required]

        [DataMember(Name="seq")]
        public int? Seq { get; set; }

        /// <summary>
        /// to address domain
        /// </summary>
        /// <value>to address domain</value>
        [Required]

        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// email receiver address
        /// </summary>
        /// <value>email receiver address</value>
        [Required]

        [DataMember(Name="recipient")]
        public string Recipient { get; set; }

        /// <summary>
        /// locked status
        /// </summary>
        /// <value>locked status</value>
        [Required]

        [DataMember(Name="locked")]
        public int? Locked { get; set; }

        /// <summary>
        /// lock timestamp
        /// </summary>
        /// <value>lock timestamp</value>
        [Required]

        [DataMember(Name="lockTime")]
        public int? LockTime { get; set; }

        /// <summary>
        /// assigned server
        /// </summary>
        /// <value>assigned server</value>
        [Required]

        [DataMember(Name="assigned")]
        public string Assigned { get; set; }

        /// <summary>
        /// queued timestamp
        /// </summary>
        /// <value>queued timestamp</value>
        [Required]

        [DataMember(Name="queued")]
        public string Queued { get; set; }

        /// <summary>
        /// lock id
        /// </summary>
        /// <value>lock id</value>
        [Required]

        [DataMember(Name="_lock")]
        public string _Lock { get; set; }

        /// <summary>
        /// logger
        /// </summary>
        /// <value>logger</value>
        [Required]

        [DataMember(Name="logger")]
        public string Logger { get; set; }

        /// <summary>
        /// mx port number
        /// </summary>
        /// <value>mx port number</value>
        [Required]

        [DataMember(Name="mxPort")]
        public int? MxPort { get; set; }

        /// <summary>
        /// connection key
        /// </summary>
        /// <value>connection key</value>
        [Required]

        [DataMember(Name="connectionKey")]
        public string ConnectionKey { get; set; }

        /// <summary>
        /// mx hostname
        /// </summary>
        /// <value>mx hostname</value>
        [Required]

        [DataMember(Name="mxHostname")]
        public string MxHostname { get; set; }

        /// <summary>
        /// body hash
        /// </summary>
        /// <value>body hash</value>
        [Required]

        [DataMember(Name="sentBodyHash")]
        public string SentBodyHash { get; set; }

        /// <summary>
        /// sent body size in bytes
        /// </summary>
        /// <value>sent body size in bytes</value>
        [Required]

        [DataMember(Name="sentBodySize")]
        public int? SentBodySize { get; set; }

        /// <summary>
        /// md5 checksum matching result
        /// </summary>
        /// <value>md5 checksum matching result</value>
        [Required]

        [DataMember(Name="md5Match")]
        public int? Md5Match { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailLogEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Transtype: ").Append(Transtype).Append("\n");
            sb.Append("  Transhost: ").Append(Transhost).Append("\n");
            sb.Append("  Originhost: ").Append(Originhost).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  _Interface: ").Append(_Interface).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SendingZone: ").Append(SendingZone).Append("\n");
            sb.Append("  BodySize: ").Append(BodySize).Append("\n");
            sb.Append("  SourceMd5: ").Append(SourceMd5).Append("\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  LockTime: ").Append(LockTime).Append("\n");
            sb.Append("  Assigned: ").Append(Assigned).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  _Lock: ").Append(_Lock).Append("\n");
            sb.Append("  Logger: ").Append(Logger).Append("\n");
            sb.Append("  MxPort: ").Append(MxPort).Append("\n");
            sb.Append("  ConnectionKey: ").Append(ConnectionKey).Append("\n");
            sb.Append("  MxHostname: ").Append(MxHostname).Append("\n");
            sb.Append("  SentBodyHash: ").Append(SentBodyHash).Append("\n");
            sb.Append("  SentBodySize: ").Append(SentBodySize).Append("\n");
            sb.Append("  Md5Match: ").Append(Md5Match).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MailLogEntry)obj);
        }

        /// <summary>
        /// Returns true if MailLogEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of MailLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailLogEntry other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    From.Equals(other.From)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    MessageId == other.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(other.MessageId)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Transtype == other.Transtype ||
                    Transtype != null &&
                    Transtype.Equals(other.Transtype)
                ) && 
                (
                    Transhost == other.Transhost ||
                    Transhost != null &&
                    Transhost.Equals(other.Transhost)
                ) && 
                (
                    Originhost == other.Originhost ||
                    Originhost != null &&
                    Originhost.Equals(other.Originhost)
                ) && 
                (
                    Origin == other.Origin ||
                    Origin != null &&
                    Origin.Equals(other.Origin)
                ) && 
                (
                    _Interface == other._Interface ||
                    _Interface != null &&
                    _Interface.Equals(other._Interface)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    SendingZone == other.SendingZone ||
                    SendingZone != null &&
                    SendingZone.Equals(other.SendingZone)
                ) && 
                (
                    BodySize == other.BodySize ||
                    BodySize != null &&
                    BodySize.Equals(other.BodySize)
                ) && 
                (
                    SourceMd5 == other.SourceMd5 ||
                    SourceMd5 != null &&
                    SourceMd5.Equals(other.SourceMd5)
                ) && 
                (
                    Seq == other.Seq ||
                    Seq != null &&
                    Seq.Equals(other.Seq)
                ) && 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.Equals(other.Recipient)
                ) && 
                (
                    Locked == other.Locked ||
                    Locked != null &&
                    Locked.Equals(other.Locked)
                ) && 
                (
                    LockTime == other.LockTime ||
                    LockTime != null &&
                    LockTime.Equals(other.LockTime)
                ) && 
                (
                    Assigned == other.Assigned ||
                    Assigned != null &&
                    Assigned.Equals(other.Assigned)
                ) && 
                (
                    Queued == other.Queued ||
                    Queued != null &&
                    Queued.Equals(other.Queued)
                ) && 
                (
                    _Lock == other._Lock ||
                    _Lock != null &&
                    _Lock.Equals(other._Lock)
                ) && 
                (
                    Logger == other.Logger ||
                    Logger != null &&
                    Logger.Equals(other.Logger)
                ) && 
                (
                    MxPort == other.MxPort ||
                    MxPort != null &&
                    MxPort.Equals(other.MxPort)
                ) && 
                (
                    ConnectionKey == other.ConnectionKey ||
                    ConnectionKey != null &&
                    ConnectionKey.Equals(other.ConnectionKey)
                ) && 
                (
                    MxHostname == other.MxHostname ||
                    MxHostname != null &&
                    MxHostname.Equals(other.MxHostname)
                ) && 
                (
                    SentBodyHash == other.SentBodyHash ||
                    SentBodyHash != null &&
                    SentBodyHash.Equals(other.SentBodyHash)
                ) && 
                (
                    SentBodySize == other.SentBodySize ||
                    SentBodySize != null &&
                    SentBodySize.Equals(other.SentBodySize)
                ) && 
                (
                    Md5Match == other.Md5Match ||
                    Md5Match != null &&
                    Md5Match.Equals(other.Md5Match)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Transtype != null)
                    hashCode = hashCode * 59 + Transtype.GetHashCode();
                    if (Transhost != null)
                    hashCode = hashCode * 59 + Transhost.GetHashCode();
                    if (Originhost != null)
                    hashCode = hashCode * 59 + Originhost.GetHashCode();
                    if (Origin != null)
                    hashCode = hashCode * 59 + Origin.GetHashCode();
                    if (_Interface != null)
                    hashCode = hashCode * 59 + _Interface.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (SendingZone != null)
                    hashCode = hashCode * 59 + SendingZone.GetHashCode();
                    if (BodySize != null)
                    hashCode = hashCode * 59 + BodySize.GetHashCode();
                    if (SourceMd5 != null)
                    hashCode = hashCode * 59 + SourceMd5.GetHashCode();
                    if (Seq != null)
                    hashCode = hashCode * 59 + Seq.GetHashCode();
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (Locked != null)
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (LockTime != null)
                    hashCode = hashCode * 59 + LockTime.GetHashCode();
                    if (Assigned != null)
                    hashCode = hashCode * 59 + Assigned.GetHashCode();
                    if (Queued != null)
                    hashCode = hashCode * 59 + Queued.GetHashCode();
                    if (_Lock != null)
                    hashCode = hashCode * 59 + _Lock.GetHashCode();
                    if (Logger != null)
                    hashCode = hashCode * 59 + Logger.GetHashCode();
                    if (MxPort != null)
                    hashCode = hashCode * 59 + MxPort.GetHashCode();
                    if (ConnectionKey != null)
                    hashCode = hashCode * 59 + ConnectionKey.GetHashCode();
                    if (MxHostname != null)
                    hashCode = hashCode * 59 + MxHostname.GetHashCode();
                    if (SentBodyHash != null)
                    hashCode = hashCode * 59 + SentBodyHash.GetHashCode();
                    if (SentBodySize != null)
                    hashCode = hashCode * 59 + SentBodySize.GetHashCode();
                    if (Md5Match != null)
                    hashCode = hashCode * 59 + Md5Match.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MailLogEntry left, MailLogEntry right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MailLogEntry left, MailLogEntry right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

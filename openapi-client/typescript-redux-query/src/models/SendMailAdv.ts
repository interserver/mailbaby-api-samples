// tslint:disable
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EmailAddressName,
    EmailAddressNameFromJSON,
    EmailAddressNameToJSON,
    MailAttachment,
    MailAttachmentFromJSON,
    MailAttachmentToJSON,
} from './';

/**
 * Details for an Email
 * @export
 * @interface SendMailAdv
 */
export interface SendMailAdv  {
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMailAdv
     */
    subject: string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMailAdv
     */
    body: string;
    /**
     * 
     * @type {EmailAddressName}
     * @memberof SendMailAdv
     */
    from: EmailAddressName;
    /**
     * A list of destionation email addresses to send this to
     * @type {Array<EmailAddressName>}
     * @memberof SendMailAdv
     */
    to: Array<EmailAddressName>;
    /**
     * (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
     * @type {Array<EmailAddressName>}
     * @memberof SendMailAdv
     */
    replyto?: Array<EmailAddressName>;
    /**
     * (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
     * @type {Array<EmailAddressName>}
     * @memberof SendMailAdv
     */
    cc?: Array<EmailAddressName>;
    /**
     * (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
     * @type {Array<EmailAddressName>}
     * @memberof SendMailAdv
     */
    bcc?: Array<EmailAddressName>;
    /**
     * (optional) File attachments to include in the email.  The file contents must be base64 encoded!
     * @type {Array<MailAttachment>}
     * @memberof SendMailAdv
     */
    attachments?: Array<MailAttachment>;
    /**
     * (optional)  ID of the Mail order within our system to use as the Mail Account.
     * @type {number}
     * @memberof SendMailAdv
     */
    id?: number;
}

export function SendMailAdvFromJSON(json: any): SendMailAdv {
    return {
        'subject': json['subject'],
        'body': json['body'],
        'from': EmailAddressNameFromJSON(json['from']),
        'to': (json['to'] as Array<any>).map(EmailAddressNameFromJSON),
        'replyto': !exists(json, 'replyto') ? undefined : (json['replyto'] as Array<any>).map(EmailAddressNameFromJSON),
        'cc': !exists(json, 'cc') ? undefined : (json['cc'] as Array<any>).map(EmailAddressNameFromJSON),
        'bcc': !exists(json, 'bcc') ? undefined : (json['bcc'] as Array<any>).map(EmailAddressNameFromJSON),
        'attachments': !exists(json, 'attachments') ? undefined : (json['attachments'] as Array<any>).map(MailAttachmentFromJSON),
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function SendMailAdvToJSON(value?: SendMailAdv): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'subject': value.subject,
        'body': value.body,
        'from': EmailAddressNameToJSON(value.from),
        'to': (value.to as Array<any>).map(EmailAddressNameToJSON),
        'replyto': value.replyto === undefined ? undefined : (value.replyto as Array<any>).map(EmailAddressNameToJSON),
        'cc': value.cc === undefined ? undefined : (value.cc as Array<any>).map(EmailAddressNameToJSON),
        'bcc': value.bcc === undefined ? undefined : (value.bcc as Array<any>).map(EmailAddressNameToJSON),
        'attachments': value.attachments === undefined ? undefined : (value.attachments as Array<any>).map(MailAttachmentToJSON),
        'id': value.id,
    };
}



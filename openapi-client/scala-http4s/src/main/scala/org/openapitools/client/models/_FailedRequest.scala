/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

case class _FailedRequest(code: Int, message: String, body: Option[Json] = None)
  extends Exception(s"Server returned status $code; message: $message; body: ${body.map(_.noSpaces).getOrElse("")}")

object _FailedRequest {

  given encoderFailedRequest: Encoder[_FailedRequest] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("code" -> t.code.asJson),
        Some("message" -> t.message.asJson),
        t.body.map(x => "body" -> x)
      ).flatten
    }
  }

  given decodeFailedRequest: Decoder[_FailedRequest] = Decoder.instance { c =>
    for {
      code <- c.downField("code").as[Int]
      message <- c.downField("message").as[String]
      body <- c.downField("body").as[Option[Json]]
    } yield _FailedRequest(
      code = code,
      message = message,
      body = body
    )
  }

}


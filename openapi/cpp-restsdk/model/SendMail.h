/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SendMail.h
 *
 * Details for an Email
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SendMail_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SendMail_H_


#include "../ModelBase.h"

#include "MailAttachment.h"
#include <cpprest/details/basic_types.h>
#include "MailContact.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Details for an Email
/// </summary>
class  SendMail
    : public ModelBase
{
public:
    SendMail();
    virtual ~SendMail();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SendMail members

    /// <summary>
    /// The ID of the Mail order within our system to use as the Mail Account.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MailContact> getFrom() const;
    bool fromIsSet() const;
    void unsetFrom();

    void setFrom(const std::shared_ptr<MailContact>& value);

    /// <summary>
    /// The Contact whom is the primary recipient of this email.
    /// </summary>
    std::vector<std::shared_ptr<MailContact>>& getTo();
    bool toIsSet() const;
    void unsetTo();

    void setTo(const std::vector<std::shared_ptr<MailContact>>& value);

    /// <summary>
    /// The subject or title of the email
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const utility::string_t& value);

    /// <summary>
    /// The main email contents.
    /// </summary>
    utility::string_t getBody() const;
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const utility::string_t& value);

    /// <summary>
    /// Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
    /// </summary>
    std::vector<std::shared_ptr<MailContact>>& getReplyto();
    bool replytoIsSet() const;
    void unsetReplyto();

    void setReplyto(const std::vector<std::shared_ptr<MailContact>>& value);

    /// <summary>
    /// Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
    /// </summary>
    std::vector<std::shared_ptr<MailContact>>& getCc();
    bool ccIsSet() const;
    void unsetCc();

    void setCc(const std::vector<std::shared_ptr<MailContact>>& value);

    /// <summary>
    /// Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
    /// </summary>
    std::vector<std::shared_ptr<MailContact>>& getBcc();
    bool bccIsSet() const;
    void unsetBcc();

    void setBcc(const std::vector<std::shared_ptr<MailContact>>& value);

    /// <summary>
    /// Optional file attachments to include in the email
    /// </summary>
    std::vector<std::shared_ptr<MailAttachment>>& getAttachments();
    bool attachmentsIsSet() const;
    void unsetAttachments();

    void setAttachments(const std::vector<std::shared_ptr<MailAttachment>>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<MailContact> m_From;
    bool m_FromIsSet;
    std::vector<std::shared_ptr<MailContact>> m_To;
    bool m_ToIsSet;
    utility::string_t m_Subject;
    bool m_SubjectIsSet;
    utility::string_t m_Body;
    bool m_BodyIsSet;
    std::vector<std::shared_ptr<MailContact>> m_Replyto;
    bool m_ReplytoIsSet;
    std::vector<std::shared_ptr<MailContact>> m_Cc;
    bool m_CcIsSet;
    std::vector<std::shared_ptr<MailContact>> m_Bcc;
    bool m_BccIsSet;
    std::vector<std::shared_ptr<MailAttachment>> m_Attachments;
    bool m_AttachmentsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SendMail_H_ */

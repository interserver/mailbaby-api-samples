/*
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Details for an Email
    /// </summary>
    [DataContract]
    public partial class SendMailAdv : IEquatable<SendMailAdv>
    { 
        /// <summary>
        /// The subject or title of the email
        /// </summary>
        /// <value>The subject or title of the email</value>
        [Required]

        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// The main email contents.
        /// </summary>
        /// <value>The main email contents.</value>
        [Required]

        [DataMember(Name="body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [Required]

        [DataMember(Name="from")]
        public EmailAddressTypes From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [Required]

        [DataMember(Name="to")]
        public EmailAddressesTypes To { get; set; }

        /// <summary>
        /// Gets or Sets Replyto
        /// </summary>

        [DataMember(Name="replyto")]
        public EmailAddressesTypes Replyto { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>

        [DataMember(Name="cc")]
        public EmailAddressesTypes Cc { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>

        [DataMember(Name="bcc")]
        public EmailAddressesTypes Bcc { get; set; }

        /// <summary>
        /// (optional) File attachments to include in the email.  The file contents must be base64 encoded!
        /// </summary>
        /// <value>(optional) File attachments to include in the email.  The file contents must be base64 encoded!</value>

        [DataMember(Name="attachments")]
        public List<MailAttachment> Attachments { get; set; }

        /// <summary>
        /// (optional)  ID of the Mail order within our system to use as the Mail Account.
        /// </summary>
        /// <value>(optional)  ID of the Mail order within our system to use as the Mail Account.</value>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMailAdv {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Replyto: ").Append(Replyto).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SendMailAdv)obj);
        }

        /// <summary>
        /// Returns true if SendMailAdv instances are equal
        /// </summary>
        /// <param name="other">Instance of SendMailAdv to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMailAdv other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    Body == other.Body ||
                    Body != null &&
                    Body.Equals(other.Body)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    From.Equals(other.From)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                ) && 
                (
                    Replyto == other.Replyto ||
                    Replyto != null &&
                    Replyto.Equals(other.Replyto)
                ) && 
                (
                    Cc == other.Cc ||
                    Cc != null &&
                    Cc.Equals(other.Cc)
                ) && 
                (
                    Bcc == other.Bcc ||
                    Bcc != null &&
                    Bcc.Equals(other.Bcc)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Body != null)
                    hashCode = hashCode * 59 + Body.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    if (Replyto != null)
                    hashCode = hashCode * 59 + Replyto.GetHashCode();
                    if (Cc != null)
                    hashCode = hashCode * 59 + Cc.GetHashCode();
                    if (Bcc != null)
                    hashCode = hashCode * 59 + Bcc.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SendMailAdv left, SendMailAdv right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SendMailAdv left, SendMailAdv right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.MailAttachment;
import io.swagger.client.model.MailContact;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Details for an Email
 */
@Schema(description = "Details for an Email")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-04-27T13:29:48.449489-04:00[America/New_York]")
public class SendMail {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("from")
  private MailContact from = null;

  @SerializedName("to")
  private List<MailContact> to = new ArrayList<MailContact>();

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("replyto")
  private List<MailContact> replyto = null;

  @SerializedName("cc")
  private List<MailContact> cc = null;

  @SerializedName("bcc")
  private List<MailContact> bcc = null;

  @SerializedName("attachments")
  private List<MailAttachment> attachments = null;

  public SendMail id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the Mail order within our system to use as the Mail Account.
   * @return id
  **/
  @Schema(required = true, description = "The ID of the Mail order within our system to use as the Mail Account.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public SendMail from(MailContact from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @Schema(required = true, description = "")
  public MailContact getFrom() {
    return from;
  }

  public void setFrom(MailContact from) {
    this.from = from;
  }

  public SendMail to(List<MailContact> to) {
    this.to = to;
    return this;
  }

  public SendMail addToItem(MailContact toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * The Contact whom is the primary recipient of this email.
   * @return to
  **/
  @Schema(required = true, description = "The Contact whom is the primary recipient of this email.")
  public List<MailContact> getTo() {
    return to;
  }

  public void setTo(List<MailContact> to) {
    this.to = to;
  }

  public SendMail subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject or title of the email
   * @return subject
  **/
  @Schema(example = "Your Package has been Delivered!", required = true, description = "The subject or title of the email")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public SendMail body(String body) {
    this.body = body;
    return this;
  }

   /**
   * The main email contents.
   * @return body
  **/
  @Schema(example = "The package you ordered on 2021-01-23 has been delivered. If the package is broken into many pieces, please blaim someone else. ", required = true, description = "The main email contents.")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public SendMail replyto(List<MailContact> replyto) {
    this.replyto = replyto;
    return this;
  }

  public SendMail addReplytoItem(MailContact replytoItem) {
    if (this.replyto == null) {
      this.replyto = new ArrayList<MailContact>();
    }
    this.replyto.add(replytoItem);
    return this;
  }

   /**
   * Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
   * @return replyto
  **/
  @Schema(description = "Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.")
  public List<MailContact> getReplyto() {
    return replyto;
  }

  public void setReplyto(List<MailContact> replyto) {
    this.replyto = replyto;
  }

  public SendMail cc(List<MailContact> cc) {
    this.cc = cc;
    return this;
  }

  public SendMail addCcItem(MailContact ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<MailContact>();
    }
    this.cc.add(ccItem);
    return this;
  }

   /**
   * Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
   * @return cc
  **/
  @Schema(description = "Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.")
  public List<MailContact> getCc() {
    return cc;
  }

  public void setCc(List<MailContact> cc) {
    this.cc = cc;
  }

  public SendMail bcc(List<MailContact> bcc) {
    this.bcc = bcc;
    return this;
  }

  public SendMail addBccItem(MailContact bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<MailContact>();
    }
    this.bcc.add(bccItem);
    return this;
  }

   /**
   * Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
   * @return bcc
  **/
  @Schema(description = "Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.")
  public List<MailContact> getBcc() {
    return bcc;
  }

  public void setBcc(List<MailContact> bcc) {
    this.bcc = bcc;
  }

  public SendMail attachments(List<MailAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public SendMail addAttachmentsItem(MailAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<MailAttachment>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Optional file attachments to include in the email
   * @return attachments
  **/
  @Schema(description = "Optional file attachments to include in the email")
  public List<MailAttachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<MailAttachment> attachments) {
    this.attachments = attachments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMail sendMail = (SendMail) o;
    return Objects.equals(this.id, sendMail.id) &&
        Objects.equals(this.from, sendMail.from) &&
        Objects.equals(this.to, sendMail.to) &&
        Objects.equals(this.subject, sendMail.subject) &&
        Objects.equals(this.body, sendMail.body) &&
        Objects.equals(this.replyto, sendMail.replyto) &&
        Objects.equals(this.cc, sendMail.cc) &&
        Objects.equals(this.bcc, sendMail.bcc) &&
        Objects.equals(this.attachments, sendMail.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, from, to, subject, body, replyto, cc, bcc, attachments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMail {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    replyto: ").append(toIndentedString(replyto)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

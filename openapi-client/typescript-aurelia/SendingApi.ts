/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GenericResponse,
  EmailAddressName,
} from './models';

/**
 * sendAdvMail - parameters interface
 */
export interface ISendAdvMailParams {
  subject: string;
  body: string;
  from: EmailAddressName;
  to: Array<EmailAddressName>;
  replyto?: Array<EmailAddressName>;
  cc?: Array<EmailAddressName>;
  bcc?: Array<EmailAddressName>;
  attachments?: Array<MailAttachment>;
  id?: number;
}

/**
 * sendMail - parameters interface
 */
export interface ISendMailParams {
  to: string;
  from: string;
  subject: string;
  body: string;
}

/**
 * SendingApi - API class
 */
@autoinject()
export class SendingApi extends Api {

  /**
   * Creates a new SendingApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Sends an Email with Advanced Options
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   * @param params.subject The subject or title of the email
   * @param params.body The main email contents.
   * @param params.from 
   * @param params.to A list of destionation email addresses to send this to
   * @param params.replyto (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
   * @param params.cc (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
   * @param params.bcc (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
   * @param params.attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded!
   * @param params.id (optional)  ID of the Mail order within our system to use as the Mail Account.
   */
  async sendAdvMail(params: ISendAdvMailParams): Promise<GenericResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('sendAdvMail', params, 'subject');
    this.ensureParamIsSet('sendAdvMail', params, 'body');
    this.ensureParamIsSet('sendAdvMail', params, 'from');
    this.ensureParamIsSet('sendAdvMail', params, 'to');

    // Create URL to call
    const url = `${this.basePath}/mail/advsend`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'subject': params['subject'],
        'body': params['body'],
        'from': params['from'],
        'to': params['to'],
        'replyto': params['replyto'],
        'cc': params['cc'],
        'bcc': params['bcc'],
        'attachments': params['attachments'],
        'id': params['id'],
      }))

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Sends an Email
   * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
   * @param params.to The Contact whom is the primary recipient of this email.
   * @param params.from The contact whom is the this email is from.
   * @param params.subject The subject or title of the email
   * @param params.body The main email contents.
   */
  async sendMail(params: ISendMailParams): Promise<GenericResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('sendMail', params, 'to');
    this.ensureParamIsSet('sendMail', params, 'from');
    this.ensureParamIsSet('sendMail', params, 'subject');
    this.ensureParamIsSet('sendMail', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/mail/send`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'to': params['to'],
        'from': params['from'],
        'subject': params['subject'],
        'body': params['body'],
      }))

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


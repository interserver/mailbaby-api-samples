/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Inject, Injectable, Optional } from '@nestjs/common';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { GenericResponse } from '../model/genericResponse';
import { GetMailOrders200ResponseInner } from '../model/getMailOrders200ResponseInner';
import { GetMailOrders401Response } from '../model/getMailOrders401Response';
import { MailLog } from '../model/mailLog';
import { SendMailAdv } from '../model/sendMailAdv';
import { Configuration } from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://api.mailbaby.net';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * displays a list of mail service orders
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMailOrders(): Observable<AxiosResponse<Array<GetMailOrders200ResponseInner>>>;
    public getMailOrders(): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<GetMailOrders200ResponseInner>>(`${this.basePath}/mail`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Checks if the server is running
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingServer(): Observable<AxiosResponse<any>>;
    public pingServer(): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param sendMailAdv 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendAdvMail(sendMailAdv: SendMailAdv, ): Observable<AxiosResponse<GenericResponse>>;
    public sendAdvMail(sendMailAdv: SendMailAdv, ): Observable<any> {

        if (sendMailAdv === null || sendMailAdv === undefined) {
            throw new Error('Required parameter sendMailAdv was null or undefined when calling sendAdvMail.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<GenericResponse>(`${this.basePath}/mail/advsend`,
            sendMailAdv,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Sends an Email
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * @param to The Contact whom is the primary recipient of this email.
     * @param from The contact whom is the this email is from.
     * @param subject The subject or title of the email
     * @param body The main email contents.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendMail(to: string, from: string, subject: string, body: string, ): Observable<AxiosResponse<GenericResponse>>;
    public sendMail(to: string, from: string, subject: string, body: string, ): Observable<any> {

        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling sendMail.');
        }

        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling sendMail.');
        }

        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sendMail.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sendMail.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            // formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (to !== undefined) {
            formParams.append('to', <any>to);
        }

        if (from !== undefined) {
            formParams.append('from', <any>from);
        }

        if (subject !== undefined) {
            formParams.append('subject', <any>subject);
        }

        if (body !== undefined) {
            formParams.append('body', <any>body);
        }

        return this.httpClient.post<GenericResponse>(`${this.basePath}/mail/send`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through.
     * @param search pass an optional search string for looking up inventory
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     * @param startDate earliest date to get emails in unix timestamp format
     * @param endDate earliest date to get emails in unix timestamp format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, ): Observable<AxiosResponse<MailLog>>;
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, ): Observable<any> {







        let queryParameters = {};
        if (id !== undefined && id !== null) {
            queryParameters['id'] = <any>id;
        }
        if (search !== undefined && search !== null) {
            queryParameters['search'] = <any>search;
        }
        if (skip !== undefined && skip !== null) {
            queryParameters['skip'] = <any>skip;
        }
        if (limit !== undefined && limit !== null) {
            queryParameters['limit'] = <any>limit;
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters['startDate'] = <any>startDate;
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters['endDate'] = <any>endDate;
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<MailLog>(`${this.basePath}/mail/log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}

#
# MailBaby Email Delivery and Management Service API
# **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
# Version: 1.1.0
# Contact: support@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details for an Email

.PARAMETER Subject
The subject or title of the email
.PARAMETER Body
The main email contents.
.PARAMETER VarFrom
No description available.
.PARAMETER To
A list of destionation email addresses to send this to
.PARAMETER Replyto
(optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
.PARAMETER Cc
(optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
.PARAMETER Bcc
(optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
.PARAMETER Attachments
(optional) File attachments to include in the email.  The file contents must be base64 encoded!
.PARAMETER Id
(optional)  ID of the Mail order within our system to use as the Mail Account.
.OUTPUTS

SendMailAdv<PSCustomObject>
#>

function Initialize-SendMailAdv {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarFrom},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${To},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Replyto},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Cc},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Bcc},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Attachments},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Id}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SendMailAdv' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Subject) {
            throw "invalid value for 'Subject', 'Subject' cannot be null."
        }

        if ($null -eq $Body) {
            throw "invalid value for 'Body', 'Body' cannot be null."
        }

        if ($null -eq $VarFrom) {
            throw "invalid value for 'VarFrom', 'VarFrom' cannot be null."
        }

        if ($null -eq $To) {
            throw "invalid value for 'To', 'To' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "subject" = ${Subject}
            "body" = ${Body}
            "from" = ${VarFrom}
            "to" = ${To}
            "replyto" = ${Replyto}
            "cc" = ${Cc}
            "bcc" = ${Bcc}
            "attachments" = ${Attachments}
            "id" = ${Id}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SendMailAdv<PSCustomObject>

.DESCRIPTION

Convert from JSON to SendMailAdv<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SendMailAdv<PSCustomObject>
#>
function ConvertFrom-JsonToSendMailAdv {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SendMailAdv' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SendMailAdv
        $AllProperties = ("subject", "body", "from", "to", "replyto", "cc", "bcc", "attachments", "id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'subject' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subject' missing."
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) {
            throw "Error! JSON cannot be serialized due to the required property 'body' missing."
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) {
            throw "Error! JSON cannot be serialized due to the required property 'from' missing."
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) {
            throw "Error! JSON cannot be serialized due to the required property 'to' missing."
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replyto"))) { #optional property not found
            $Replyto = $null
        } else {
            $Replyto = $JsonParameters.PSobject.Properties["replyto"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cc"))) { #optional property not found
            $Cc = $null
        } else {
            $Cc = $JsonParameters.PSobject.Properties["cc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bcc"))) { #optional property not found
            $Bcc = $null
        } else {
            $Bcc = $JsonParameters.PSobject.Properties["bcc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attachments"))) { #optional property not found
            $Attachments = $null
        } else {
            $Attachments = $JsonParameters.PSobject.Properties["attachments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        $PSO = [PSCustomObject]@{
            "subject" = ${Subject}
            "body" = ${Body}
            "from" = ${VarFrom}
            "to" = ${To}
            "replyto" = ${Replyto}
            "cc" = ${Cc}
            "bcc" = ${Bcc}
            "attachments" = ${Attachments}
            "id" = ${Id}
        }

        return $PSO
    }

}


/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIBlockingApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIBlockingApi::AddRuleRequest::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Domain:
		return TEXT("domain");
	case OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Email:
		return TEXT("email");
	case OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Startswith:
		return TEXT("startswith");
	case OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Destination:
		return TEXT("destination");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIBlockingApi::AddRuleRequest::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIBlockingApi::AddRuleRequest::EnumToString(const OpenAPIBlockingApi::AddRuleRequest::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIBlockingApi::AddRuleRequest::TypeEnum& Value)
{
	static TMap<FString, OpenAPIBlockingApi::AddRuleRequest::TypeEnum> StringToEnum = { 
		{ TEXT("domain"), OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Domain },
		{ TEXT("email"), OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Email },
		{ TEXT("startswith"), OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Startswith },
		{ TEXT("destination"), OpenAPIBlockingApi::AddRuleRequest::TypeEnum::Destination }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIBlockingApi::AddRuleRequest::EnumFromString(const FString& EnumAsString, OpenAPIBlockingApi::AddRuleRequest::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIBlockingApi::AddRuleRequest::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIBlockingApi::AddRuleRequest::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIBlockingApi::AddRuleRequest::ComputePath() const
{
	FString Path(TEXT("/mail/rules"));
	return Path;
}

void OpenAPIBlockingApi::AddRuleRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/x-www-form-urlencoded"), TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		if (User.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("user"));
			WriteJsonValue(Writer, User.GetValue());
		}
		Writer->WriteIdentifierPrefix(TEXT("type"));
		WriteJsonValue(Writer, Type);
		Writer->WriteIdentifierPrefix(TEXT("data"));
		WriteJsonValue(Writer, Data);
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		if(User.IsSet())
		{
			FormData.AddStringPart(TEXT("user"), *ToUrlString(User.GetValue()));
		}
		FormData.AddStringPart(TEXT("type"), *ToUrlString(Type));
		FormData.AddStringPart(TEXT("data"), *ToUrlString(Data));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		if(User.IsSet())
		{
			FormParams.Add(FString(TEXT("user=")) + ToUrlString(User.GetValue()));
		}
		FormParams.Add(FString(TEXT("type=")) + ToUrlString(Type));
		FormParams.Add(FString(TEXT("data=")) + ToUrlString(Data));

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIBlockingApi::AddRuleResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("search results matching criteria"));
		break;
	case 400:
		SetResponseString(TEXT("Error message when there was a problem with the input parameters."));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	}
}

bool OpenAPIBlockingApi::AddRuleResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBlockingApi::DeleteRuleRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("ruleId"), FStringFormatArg(ToUrlString(RuleId)) } };

	FString Path = FString::Format(TEXT("/mail/rules/{ruleId}"), PathParams);

	return Path;
}

void OpenAPIBlockingApi::DeleteRuleRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

}

void OpenAPIBlockingApi::DeleteRuleResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("search results matching criteria"));
		break;
	case 400:
		SetResponseString(TEXT("Error message when there was a problem with the input parameters."));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	}
}

bool OpenAPIBlockingApi::DeleteRuleResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBlockingApi::DelistBlockRequest::ComputePath() const
{
	FString Path(TEXT("/mail/blocks/delete"));
	return Path;
}

void OpenAPIBlockingApi::DelistBlockRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json"), TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, Body);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIBlockingApi::DelistBlockResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("search results matching criteria"));
		break;
	case 400:
		SetResponseString(TEXT("Error message when there was a problem with the input parameters."));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	}
}

bool OpenAPIBlockingApi::DelistBlockResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBlockingApi::GetMailBlocksRequest::ComputePath() const
{
	FString Path(TEXT("/mail/blocks"));
	return Path;
}

void OpenAPIBlockingApi::GetMailBlocksRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBlockingApi::GetMailBlocksResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("Unauthorized"));
		break;
	}
}

bool OpenAPIBlockingApi::GetMailBlocksResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIBlockingApi::GetRulesRequest::ComputePath() const
{
	FString Path(TEXT("/mail/rules"));
	return Path;
}

void OpenAPIBlockingApi::GetRulesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIBlockingApi::GetRulesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("Unauthorized"));
		break;
	}
}

bool OpenAPIBlockingApi::GetRulesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}

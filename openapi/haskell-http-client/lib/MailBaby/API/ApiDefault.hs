{-
   Mail Baby API

   This is an API for accesssing the mail services.

   OpenAPI Version: 3.0.0
   Mail Baby API API version: 1.0.0
   Contact: detain@interserver.net
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : MailBaby.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module MailBaby.API.ApiDefault where

import MailBaby.Core
import MailBaby.MimeTypes
import MailBaby.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Default

-- *** getMailById

-- | @GET \/mail\/{id}@
-- 
-- Gets mail order information by id
-- 
-- returns information about a mail order in the system with the given id.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeyApiLoginAuth', 'AuthApiKeyApiPasswordAuth'
-- 
getMailById 
  :: Id -- ^ "id" -  User ID
  -> MailBabyRequest GetMailById MimeNoContent MailOrder MimeJSON
getMailById (Id id) =
  _mkRequest "GET" ["/mail/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiLoginAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiPasswordAuth)

data GetMailById  
-- | @application/json@
instance Produces GetMailById MimeJSON


-- *** getMailOrders

-- | @GET \/mail@
-- 
-- displays a list of mail service orders
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeyApiLoginAuth', 'AuthApiKeyApiPasswordAuth'
-- 
getMailOrders 
  :: Accept accept -- ^ request accept ('MimeType')
  -> MailBabyRequest GetMailOrders MimeNoContent [MailOrder] accept
getMailOrders  _ =
  _mkRequest "GET" ["/mail"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiLoginAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiPasswordAuth)

data GetMailOrders  
-- | @application/xml@
instance Produces GetMailOrders MimeXML
-- | @application/json@
instance Produces GetMailOrders MimeJSON
-- | @text/plain@
instance Produces GetMailOrders MimePlainText


-- *** pingServer

-- | @GET \/ping@
-- 
-- Checks if the server is running
-- 
pingServer 
  :: MailBabyRequest PingServer MimeNoContent NoContent MimeNoContent
pingServer =
  _mkRequest "GET" ["/ping"]

data PingServer  
instance Produces PingServer MimeNoContent


-- *** placeMailOrder

-- | @POST \/mail\/order@
-- 
-- places a mail order
-- 
-- Adds an item to the system
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeyApiLoginAuth', 'AuthApiKeyApiPasswordAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
placeMailOrder 
  :: (Consumes PlaceMailOrder MimeJSON)
  => MailBabyRequest PlaceMailOrder MimeJSON res MimeJSON
placeMailOrder =
  _mkRequest "POST" ["/mail/order"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiLoginAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiPasswordAuth)

{-# DEPRECATED placeMailOrder "" #-}

data PlaceMailOrder 

-- | /Body Param/ "MailOrder" - Inventory item to add
instance HasBodyParam PlaceMailOrder MailOrder 

-- | @application/json@
instance Consumes PlaceMailOrder MimeJSON

-- | @application/json@
instance Produces PlaceMailOrder MimeJSON


-- *** sendAdvMailById

-- | @POST \/mail\/{id}\/advsend@
-- 
-- Sends an Email with Advanced Options
-- 
-- Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeyApiLoginAuth', 'AuthApiKeyApiPasswordAuth'
-- 
sendAdvMailById 
  :: (Consumes SendAdvMailById contentType, MimeRender contentType SendMail)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> SendMail -- ^ "sendMail"
  -> Id -- ^ "id" -  User ID
  -> MailBabyRequest SendAdvMailById contentType GenericResponse MimeJSON
sendAdvMailById _ sendMail (Id id) =
  _mkRequest "POST" ["/mail/",toPath id,"/advsend"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiLoginAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiPasswordAuth)
    `setBodyParam` sendMail

data SendAdvMailById 
instance HasBodyParam SendAdvMailById SendMail 

-- | @application/xml@
instance Consumes SendAdvMailById MimeXML
-- | @application/json@
instance Consumes SendAdvMailById MimeJSON
-- | @application/x-www-form-urlencoded@
instance Consumes SendAdvMailById MimeFormUrlEncoded
-- | @text/plain@
instance Consumes SendAdvMailById MimePlainText

-- | @application/json@
instance Produces SendAdvMailById MimeJSON


-- *** sendMailById

-- | @POST \/mail\/{id}\/send@
-- 
-- Sends an Email
-- 
-- Sends An email through one of your mail orders.
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeyApiLoginAuth', 'AuthApiKeyApiPasswordAuth'
-- 
sendMailById 
  :: Id -- ^ "id" -  User ID
  -> MailBabyRequest SendMailById MimeNoContent GenericResponse MimeJSON
sendMailById (Id id) =
  _mkRequest "POST" ["/mail/",toPath id,"/send"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiLoginAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiPasswordAuth)

data SendMailById  
instance HasOptionalParam SendMailById Subject where
  applyOptionalParam req (Subject xs) =
    req `addQuery` toQuery ("subject", Just xs)
instance HasOptionalParam SendMailById Body where
  applyOptionalParam req (Body xs) =
    req `addQuery` toQuery ("body", Just xs)
instance HasOptionalParam SendMailById To where
  applyOptionalParam req (To xs) =
    req `addQuery` toQuery ("to", Just xs)
instance HasOptionalParam SendMailById ToName where
  applyOptionalParam req (ToName xs) =
    req `addQuery` toQuery ("toName", Just xs)
instance HasOptionalParam SendMailById From where
  applyOptionalParam req (From xs) =
    req `addQuery` toQuery ("from", Just xs)
instance HasOptionalParam SendMailById FromName where
  applyOptionalParam req (FromName xs) =
    req `addQuery` toQuery ("fromName", Just xs)
-- | @application/json@
instance Produces SendMailById MimeJSON


-- *** validateMailOrder

-- | @GET \/mail\/order@
-- 
-- validatess order details before placing an order
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeyApiLoginAuth', 'AuthApiKeyApiPasswordAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
validateMailOrder 
  :: MailBabyRequest ValidateMailOrder MimeNoContent res MimeJSON
validateMailOrder =
  _mkRequest "GET" ["/mail/order"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiLoginAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiPasswordAuth)

{-# DEPRECATED validateMailOrder "" #-}

data ValidateMailOrder  
-- | @application/json@
instance Produces ValidateMailOrder MimeJSON


-- *** viewMailLogById

-- | @GET \/mail\/{id}\/log@
-- 
-- displays the mail log
-- 
-- By passing in the appropriate options, you can search for available inventory in the system 
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeyApiLoginAuth', 'AuthApiKeyApiPasswordAuth'
-- 
viewMailLogById 
  :: Id -- ^ "id" -  User ID
  -> MailBabyRequest ViewMailLogById MimeNoContent [MailLog] MimeJSON
viewMailLogById (Id id) =
  _mkRequest "GET" ["/mail/",toPath id,"/log"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiLoginAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiPasswordAuth)

data ViewMailLogById  

-- | /Optional Param/ "searchString" - pass an optional search string for looking up inventory
instance HasOptionalParam ViewMailLogById SearchString where
  applyOptionalParam req (SearchString xs) =
    req `addQuery` toQuery ("searchString", Just xs)

-- | /Optional Param/ "skip" - number of records to skip for pagination
instance HasOptionalParam ViewMailLogById Skip where
  applyOptionalParam req (Skip xs) =
    req `addQuery` toQuery ("skip", Just xs)

-- | /Optional Param/ "limit" - maximum number of records to return
instance HasOptionalParam ViewMailLogById Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @application/json@
instance Produces ViewMailLogById MimeJSON


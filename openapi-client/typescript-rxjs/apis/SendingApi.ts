// tslint:disable
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, COLLECTION_FORMATS } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    EmailAddressName,
    GenericResponse,
    GetMailOrders401Response,
    MailAttachment,
} from '../models';

export interface SendAdvMailRequest {
    subject: string;
    body: string;
    from: EmailAddressName;
    to: Array<EmailAddressName>;
    replyto?: Array<EmailAddressName>;
    cc?: Array<EmailAddressName>;
    bcc?: Array<EmailAddressName>;
    attachments?: Array<MailAttachment>;
    id?: number;
}

export interface SendMailRequest {
    to: string;
    from: string;
    subject: string;
    body: string;
}

/**
 * no description
 */
export class SendingApi extends BaseAPI {

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    sendAdvMail({ subject, body, from, to, replyto, cc, bcc, attachments, id }: SendAdvMailRequest): Observable<GenericResponse>
    sendAdvMail({ subject, body, from, to, replyto, cc, bcc, attachments, id }: SendAdvMailRequest, opts?: OperationOpts): Observable<AjaxResponse<GenericResponse>>
    sendAdvMail({ subject, body, from, to, replyto, cc, bcc, attachments, id }: SendAdvMailRequest, opts?: OperationOpts): Observable<GenericResponse | AjaxResponse<GenericResponse>> {
        throwIfNullOrUndefined(subject, 'subject', 'sendAdvMail');
        throwIfNullOrUndefined(body, 'body', 'sendAdvMail');
        throwIfNullOrUndefined(from, 'from', 'sendAdvMail');
        throwIfNullOrUndefined(to, 'to', 'sendAdvMail');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const formData = new FormData();
        if (subject !== undefined) { formData.append('subject', subject as any); }
        if (body !== undefined) { formData.append('body', body as any); }
        if (from !== undefined) { formData.append('from', from as any); }
        if (to !== undefined) {
            formData.append('to', to.join(COLLECTION_FORMATS['csv']));
        }

        if (replyto !== undefined) {
            formData.append('replyto', replyto.join(COLLECTION_FORMATS['csv']));
        }

        if (cc !== undefined) {
            formData.append('cc', cc.join(COLLECTION_FORMATS['csv']));
        }

        if (bcc !== undefined) {
            formData.append('bcc', bcc.join(COLLECTION_FORMATS['csv']));
        }

        if (attachments !== undefined) {
            formData.append('attachments', attachments.join(COLLECTION_FORMATS['csv']));
        }

        if (id !== undefined) { formData.append('id', id as any); }

        return this.request<GenericResponse>({
            url: '/mail/advsend',
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * Sends an Email
     */
    sendMail({ to, from, subject, body }: SendMailRequest): Observable<GenericResponse>
    sendMail({ to, from, subject, body }: SendMailRequest, opts?: OperationOpts): Observable<AjaxResponse<GenericResponse>>
    sendMail({ to, from, subject, body }: SendMailRequest, opts?: OperationOpts): Observable<GenericResponse | AjaxResponse<GenericResponse>> {
        throwIfNullOrUndefined(to, 'to', 'sendMail');
        throwIfNullOrUndefined(from, 'from', 'sendMail');
        throwIfNullOrUndefined(subject, 'subject', 'sendMail');
        throwIfNullOrUndefined(body, 'body', 'sendMail');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const formData = new FormData();
        if (to !== undefined) { formData.append('to', to as any); }
        if (from !== undefined) { formData.append('from', from as any); }
        if (subject !== undefined) { formData.append('subject', subject as any); }
        if (body !== undefined) { formData.append('body', body as any); }

        return this.request<GenericResponse>({
            url: '/mail/send',
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

}

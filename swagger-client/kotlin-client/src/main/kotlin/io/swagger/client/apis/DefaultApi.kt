/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorResponse
import io.swagger.client.models.GenericResponse
import io.swagger.client.models.MailAttachment
import io.swagger.client.models.MailContact
import io.swagger.client.models.MailLog
import io.swagger.client.models.MailOrder
import io.swagger.client.models.MailOrders
import io.swagger.client.models.SendMail
import io.swagger.client.models.SendMailAdv
import io.swagger.client.models.SendMailAdvFrom

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "http://mystage.interserver.net:8787") : ApiClient(basePath) {

    /**
     * displays a list of mail service orders
     * 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @return MailOrders
     */
    @Suppress("UNCHECKED_CAST")
    fun getMailOrders(id: kotlin.Long? = null): MailOrders {
        val localVariableQuery: MultiValueMap = mapOf("id" to listOf("$id"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/mail", query = localVariableQuery
        )
        val response = request<MailOrders>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MailOrders
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Checks if the server is running
     * 
     * @return void
     */
    fun pingServer(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/ping"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * places a mail order
     * Adds an item to the system
     * @param body Inventory item to add (optional)
     * @return void
     */
    fun placeMailOrder(body: MailOrder? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/mail/order"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param body  
     * @return GenericResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun sendAdvMail(body: SendMailAdv): GenericResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/mail/advsend", headers = localVariableHeaders
        )
        val response = request<GenericResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GenericResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param subject  
     * @param body  
     * @param from  
     * @param to  
     * @param id  
     * @param replyto  
     * @param cc  
     * @param bcc  
     * @param attachments  
     * @return GenericResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun sendAdvMail(subject: kotlin.String, body: kotlin.String, from: kotlin.Array<SendMailAdvFrom>, to: kotlin.Array<MailContact>, id: kotlin.Long, replyto: kotlin.Array<MailContact>, cc: kotlin.Array<MailContact>, bcc: kotlin.Array<MailContact>, attachments: kotlin.Array<MailAttachment>): GenericResponse {
        val localVariableBody: kotlin.Any? = mapOf("subject" to "$subject", "body" to "$body", "from" to "$from", "to" to "$to", "id" to "$id", "replyto" to "$replyto", "cc" to "$cc", "bcc" to "$bcc", "attachments" to "$attachments")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/mail/advsend", headers = localVariableHeaders
        )
        val response = request<GenericResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GenericResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param to  
     * @param from  
     * @param subject  
     * @param body  
     * @return GenericResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun sendMail(to: kotlin.String, from: kotlin.String, subject: kotlin.String, body: kotlin.String): GenericResponse {
        val localVariableBody: kotlin.Any? = mapOf("to" to "$to", "from" to "$from", "subject" to "$subject", "body" to "$body")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/mail/send", headers = localVariableHeaders
        )
        val response = request<GenericResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GenericResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param body  
     * @return GenericResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun sendMail(body: SendMail): GenericResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/mail/send", headers = localVariableHeaders
        )
        val response = request<GenericResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GenericResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * validatess order details before placing an order
     * 
     * @return void
     */
    fun validateMailOrder(): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/mail/order"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param searchString pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional)
     * @param limit maximum number of records to return (optional)
     * @return kotlin.Array<MailLog>
     */
    @Suppress("UNCHECKED_CAST")
    fun viewMailLog(id: kotlin.Long? = null, searchString: kotlin.String? = null, skip: kotlin.Int? = null, limit: kotlin.Int? = null): kotlin.Array<MailLog> {
        val localVariableQuery: MultiValueMap = mapOf("id" to listOf("$id"), "searchString" to listOf("$searchString"), "skip" to listOf("$skip"), "limit" to listOf("$limit"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/mail/log", query = localVariableQuery
        )
        val response = request<kotlin.Array<MailLog>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<MailLog>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}

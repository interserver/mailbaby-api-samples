extends Resource
class_name DenyRuleRecord

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# DenyRuleRecord Model
# The data for a email deny rule record.


# The type of deny rule.
# Required: True
# Example: email
# isArray: false
# Allowed values: "domain", "email", "startswith", "destination"
@export var type: String = "":
	set(value):
		if str(value) != "" and not (str(value) in __type__allowable__values):
			push_error("DenyRuleRecord: tried to set property `type` to a value that is not allowed." +
				"  Allowed values: `domain`, `email`, `startswith`, `destination`")
			return
		__type__was__set = true
		type = value
var __type__was__set := false
var __type__allowable__values := ["domain", "email", "startswith", "destination"]

# The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
# Required: True
# Example: domeinwo@server.guesshost.net
# isArray: false
@export var data: String = "":
	set(value):
		__data__was__set = true
		data = value
var __data__was__set := false

# The deny rule Id number.
# Required: True
# Example: 41124
# isArray: false
@export var id: String = "":
	set(value):
		__id__was__set = true
		id = value
var __id__was__set := false

# the date the rule was created.
#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var created: String:
	set(value):
		__created__was__set = true
		created = value
var __created__was__set := false

# Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
# Required: False
# Example: mb20682
# isArray: false
@export var user: String = "":
	set(value):
		__user__was__set = true
		user = value
var __user__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__type__was__set:
		bzz_missing_properties.append("type")
	if not self.__data__was__set:
		bzz_missing_properties.append("data")
	if not self.__id__was__set:
		bzz_missing_properties.append("id")
	if not self.__created__was__set:
		bzz_missing_properties.append("created")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__type__was__set:
		bzz_dictionary["type"] = self.type
	if self.__data__was__set:
		bzz_dictionary["data"] = self.data
	if self.__id__was__set:
		bzz_dictionary["id"] = self.id
	if self.__created__was__set:
		bzz_dictionary["created"] = self.created
	if self.__user__was__set:
		bzz_dictionary["user"] = self.user
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("type"):
		me.type = from_dict["type"]
	if from_dict.has("data"):
		me.data = from_dict["data"]
	if from_dict.has("id"):
		me.id = from_dict["id"]
	if from_dict.has("created"):
		me.created = from_dict["created"]
	if from_dict.has("user"):
		me.user = from_dict["user"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@interserver.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MailBlocks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local': 'list[MailBlockClickHouse]',
        'mbtrap': 'list[MailBlockClickHouse]',
        'subject': 'list[MailBlockRspamd]'
    }

    attribute_map = {
        'local': 'local',
        'mbtrap': 'mbtrap',
        'subject': 'subject'
    }

    def __init__(self, local=None, mbtrap=None, subject=None):  # noqa: E501
        """MailBlocks - a model defined in Swagger"""  # noqa: E501
        self._local = None
        self._mbtrap = None
        self._subject = None
        self.discriminator = None
        self.local = local
        self.mbtrap = mbtrap
        self.subject = subject

    @property
    def local(self):
        """Gets the local of this MailBlocks.  # noqa: E501


        :return: The local of this MailBlocks.  # noqa: E501
        :rtype: list[MailBlockClickHouse]
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this MailBlocks.


        :param local: The local of this MailBlocks.  # noqa: E501
        :type: list[MailBlockClickHouse]
        """
        if local is None:
            raise ValueError("Invalid value for `local`, must not be `None`")  # noqa: E501

        self._local = local

    @property
    def mbtrap(self):
        """Gets the mbtrap of this MailBlocks.  # noqa: E501


        :return: The mbtrap of this MailBlocks.  # noqa: E501
        :rtype: list[MailBlockClickHouse]
        """
        return self._mbtrap

    @mbtrap.setter
    def mbtrap(self, mbtrap):
        """Sets the mbtrap of this MailBlocks.


        :param mbtrap: The mbtrap of this MailBlocks.  # noqa: E501
        :type: list[MailBlockClickHouse]
        """
        if mbtrap is None:
            raise ValueError("Invalid value for `mbtrap`, must not be `None`")  # noqa: E501

        self._mbtrap = mbtrap

    @property
    def subject(self):
        """Gets the subject of this MailBlocks.  # noqa: E501


        :return: The subject of this MailBlocks.  # noqa: E501
        :rtype: list[MailBlockRspamd]
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MailBlocks.


        :param subject: The subject of this MailBlocks.  # noqa: E501
        :type: list[MailBlockRspamd]
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailBlocks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailBlocks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

/*
 * MailBaby Email Delivery API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A File attachment for an email
    /// </summary>
    [DataContract]
    public partial class SendMailAdvAttachmentsInner :  IEquatable<SendMailAdvAttachmentsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMailAdvAttachmentsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendMailAdvAttachmentsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMailAdvAttachmentsInner" /> class.
        /// </summary>
        /// <param name="filename">(optional) Filename to specify for the attachment..</param>
        /// <param name="data">Contents of the attached file (must be base64 encoded) (required).</param>
        public SendMailAdvAttachmentsInner(string filename = default(string), System.IO.Stream data = default(System.IO.Stream))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for SendMailAdvAttachmentsInner and cannot be null");
            }
            else
            {
                this.Data = data;
            }

            this.Filename = filename;
        }

        /// <summary>
        /// (optional) Filename to specify for the attachment.
        /// </summary>
        /// <value>(optional) Filename to specify for the attachment.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Contents of the attached file (must be base64 encoded)
        /// </summary>
        /// <value>Contents of the attached file (must be base64 encoded)</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public System.IO.Stream Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMailAdvAttachmentsInner {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendMailAdvAttachmentsInner);
        }

        /// <summary>
        /// Returns true if SendMailAdvAttachmentsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of SendMailAdvAttachmentsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMailAdvAttachmentsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

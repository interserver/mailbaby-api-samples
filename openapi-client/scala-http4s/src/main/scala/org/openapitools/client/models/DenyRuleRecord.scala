/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** The data for a email deny rule record.
  * @param `type` 
  * @param data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
  * @param id The deny rule Id number.
  * @param created the date the rule was created.
  * @param user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
  */
case class DenyRuleRecord(
    `type`: DenyRuleNewType,
    data: String,
    id: String,
    created: Instant,
    user: Option[String] = None
)
  
object DenyRuleRecord {
  given encoderDenyRuleRecord: Encoder[DenyRuleRecord] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("type" -> t.`type`.asJson),
        Some("data" -> t.data.asJson),
        Some("id" -> t.id.asJson),
        Some("created" -> t.created.asJson),
        t.user.map(v => "user" -> v.asJson)
      ).flatten
    }
  }
  given decoderDenyRuleRecord: Decoder[DenyRuleRecord] = Decoder.instance { c =>
    for {
      `type` <- c.downField("type").as[DenyRuleNewType]
      data <- c.downField("data").as[String]
      id <- c.downField("id").as[String]
      created <- c.downField("created").as[Instant]
      user <- c.downField("user").as[Option[String]]
    } yield DenyRuleRecord(
      `type` = `type`,
      data = data,
      id = id,
      created = created,
      user = user
    )
  }
}


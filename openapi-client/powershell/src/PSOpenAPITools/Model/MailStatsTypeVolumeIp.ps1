#
# MailBaby Email Delivery and Management Service API
# **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
# Version: 1.1.0
# Contact: support@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Var1111
No description available.
.PARAMETER Var2222
No description available.
.PARAMETER Var3333
No description available.
.PARAMETER Var4444
No description available.
.OUTPUTS

MailStatsTypeVolumeIp<PSCustomObject>
#>

function Initialize-MailStatsTypeVolumeIp {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Var1111},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Var2222},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Var3333},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Var4444}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MailStatsTypeVolumeIp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "1.1.1.1" = ${Var1111}
            "2.2.2.2" = ${Var2222}
            "3.3.3.3" = ${Var3333}
            "4.4.4.4" = ${Var4444}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MailStatsTypeVolumeIp<PSCustomObject>

.DESCRIPTION

Convert from JSON to MailStatsTypeVolumeIp<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MailStatsTypeVolumeIp<PSCustomObject>
#>
function ConvertFrom-JsonToMailStatsTypeVolumeIp {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MailStatsTypeVolumeIp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MailStatsTypeVolumeIp
        $AllProperties = ("1.1.1.1", "2.2.2.2", "3.3.3.3", "4.4.4.4")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "1.1.1.1"))) { #optional property not found
            $Var1111 = $null
        } else {
            $Var1111 = $JsonParameters.PSobject.Properties["1.1.1.1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "2.2.2.2"))) { #optional property not found
            $Var2222 = $null
        } else {
            $Var2222 = $JsonParameters.PSobject.Properties["2.2.2.2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "3.3.3.3"))) { #optional property not found
            $Var3333 = $null
        } else {
            $Var3333 = $JsonParameters.PSobject.Properties["3.3.3.3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "4.4.4.4"))) { #optional property not found
            $Var4444 = $null
        } else {
            $Var4444 = $JsonParameters.PSobject.Properties["4.4.4.4"].value
        }

        $PSO = [PSCustomObject]@{
            "1.1.1.1" = ${Var1111}
            "2.2.2.2" = ${Var2222}
            "3.3.3.3" = ${Var3333}
            "4.4.4.4" = ${Var4444}
        }

        return $PSO
    }

}


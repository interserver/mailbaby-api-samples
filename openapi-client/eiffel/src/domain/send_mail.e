note
 description:"[
		Mail Baby API
 		This is an API defintion for accesssing the Mail.Baby mail service.
  		The version of the OpenAPI document: 1.0.0
 	    Contact: detain@interserver.net

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class SEND_MAIL 




feature --Access

    subject: detachable STRING_32 
      -- The subject or title of the email
    body: detachable STRING_32 
      -- The main email contents.
    var_from: detachable LIST [SEND_MAIL_FROM] 
      -- The contact whom is the this email is from.
    to: detachable LIST [MAIL_CONTACT] 
      -- The Contact whom is the primary recipient of this email.
 	id: INTEGER_64 
    	 -- The ID of the Mail order within our system to use as the Mail Account.
    replyto: detachable LIST [MAIL_CONTACT] 
      -- Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
    cc: detachable LIST [MAIL_CONTACT] 
      -- Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
    bcc: detachable LIST [MAIL_CONTACT] 
      -- Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
    attachments: detachable LIST [MAIL_ATTACHMENT] 
      -- Optional file attachments to include in the email

feature -- Change Element  
 
    set_subject (a_name: like subject)
        -- Set 'subject' with 'a_name'.
      do
        subject := a_name
      ensure
        subject_set: subject = a_name		
      end

    set_body (a_name: like body)
        -- Set 'body' with 'a_name'.
      do
        body := a_name
      ensure
        body_set: body = a_name		
      end

    set_var_from (a_name: like var_from)
        -- Set 'var_from' with 'a_name'.
      do
        var_from := a_name
      ensure
        var_from_set: var_from = a_name		
      end

    set_to (a_name: like to)
        -- Set 'to' with 'a_name'.
      do
        to := a_name
      ensure
        to_set: to = a_name		
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name		
      end

    set_replyto (a_name: like replyto)
        -- Set 'replyto' with 'a_name'.
      do
        replyto := a_name
      ensure
        replyto_set: replyto = a_name		
      end

    set_cc (a_name: like cc)
        -- Set 'cc' with 'a_name'.
      do
        cc := a_name
      ensure
        cc_set: cc = a_name		
      end

    set_bcc (a_name: like bcc)
        -- Set 'bcc' with 'a_name'.
      do
        bcc := a_name
      ensure
        bcc_set: bcc = a_name		
      end

    set_attachments (a_name: like attachments)
        -- Set 'attachments' with 'a_name'.
      do
        attachments := a_name
      ensure
        attachments_set: attachments = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass SEND_MAIL%N")
        if attached subject as l_subject then
          Result.append ("%Nsubject:")
          Result.append (l_subject.out)
          Result.append ("%N")    
        end  
        if attached body as l_body then
          Result.append ("%Nbody:")
          Result.append (l_body.out)
          Result.append ("%N")    
        end  
        if attached var_from as l_var_from then
          across l_var_from as ic loop
            Result.append ("%N var_from:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached to as l_to then
          across l_to as ic loop
            Result.append ("%N to:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")    
        end  
        if attached replyto as l_replyto then
          across l_replyto as ic loop
            Result.append ("%N replyto:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached cc as l_cc then
          across l_cc as ic loop
            Result.append ("%N cc:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached bcc as l_bcc then
          across l_bcc as ic loop
            Result.append ("%N bcc:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached attachments as l_attachments then
          across l_attachments as ic loop
            Result.append ("%N attachments:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end



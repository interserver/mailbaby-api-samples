/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** An email record
  * @param id internal db id
  * @param id mail id
  * @param from from address
  * @param to to address
  * @param subject email subject
  * @param created creation date
  * @param time creation timestamp
  * @param user user account
  * @param transtype transaction type
  * @param origin origin ip
  * @param `interface` interface name
  * @param sendingZone sending zone
  * @param bodySize email body size in bytes
  * @param seq index of email in the to adderess list
  * @param recipient to address this email is being sent to
  * @param domain to address domain
  * @param locked locked status
  * @param lockTime lock timestamp
  * @param assigned assigned server
  * @param queued queued timestamp
  * @param mxHostname mx hostname
  * @param response mail delivery response
  * @param messageId message id
  */
case class MailLogEntry(
    id: Int,
    id: String,
    from: String,
    to: String,
    subject: String,
    created: String,
    time: Int,
    user: String,
    transtype: String,
    origin: String,
    `interface`: String,
    sendingZone: String,
    bodySize: Int,
    seq: Int,
    recipient: String,
    domain: String,
    locked: Int,
    lockTime: String,
    assigned: String,
    queued: String,
    mxHostname: String,
    response: String,
    messageId: Option[String] = None
)
  
object MailLogEntry {
  given encoderMailLogEntry: Encoder[MailLogEntry] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("_id" -> t.id.asJson),
        Some("id" -> t.id.asJson),
        Some("from" -> t.from.asJson),
        Some("to" -> t.to.asJson),
        Some("subject" -> t.subject.asJson),
        Some("created" -> t.created.asJson),
        Some("time" -> t.time.asJson),
        Some("user" -> t.user.asJson),
        Some("transtype" -> t.transtype.asJson),
        Some("origin" -> t.origin.asJson),
        Some("interface" -> t.`interface`.asJson),
        Some("sendingZone" -> t.sendingZone.asJson),
        Some("bodySize" -> t.bodySize.asJson),
        Some("seq" -> t.seq.asJson),
        Some("recipient" -> t.recipient.asJson),
        Some("domain" -> t.domain.asJson),
        Some("locked" -> t.locked.asJson),
        Some("lockTime" -> t.lockTime.asJson),
        Some("assigned" -> t.assigned.asJson),
        Some("queued" -> t.queued.asJson),
        Some("mxHostname" -> t.mxHostname.asJson),
        Some("response" -> t.response.asJson),
        t.messageId.map(v => "messageId" -> v.asJson)
      ).flatten
    }
  }
  given decoderMailLogEntry: Decoder[MailLogEntry] = Decoder.instance { c =>
    for {
      id <- c.downField("_id").as[Int]
      id <- c.downField("id").as[String]
      from <- c.downField("from").as[String]
      to <- c.downField("to").as[String]
      subject <- c.downField("subject").as[String]
      created <- c.downField("created").as[String]
      time <- c.downField("time").as[Int]
      user <- c.downField("user").as[String]
      transtype <- c.downField("transtype").as[String]
      origin <- c.downField("origin").as[String]
      `interface` <- c.downField("interface").as[String]
      sendingZone <- c.downField("sendingZone").as[String]
      bodySize <- c.downField("bodySize").as[Int]
      seq <- c.downField("seq").as[Int]
      recipient <- c.downField("recipient").as[String]
      domain <- c.downField("domain").as[String]
      locked <- c.downField("locked").as[Int]
      lockTime <- c.downField("lockTime").as[String]
      assigned <- c.downField("assigned").as[String]
      queued <- c.downField("queued").as[String]
      mxHostname <- c.downField("mxHostname").as[String]
      response <- c.downField("response").as[String]
      messageId <- c.downField("messageId").as[Option[String]]
    } yield MailLogEntry(
      id = id,
      id = id,
      from = from,
      to = to,
      subject = subject,
      created = created,
      time = time,
      user = user,
      transtype = transtype,
      origin = origin,
      `interface` = `interface`,
      sendingZone = sendingZone,
      bodySize = bodySize,
      seq = seq,
      recipient = recipient,
      domain = domain,
      locked = locked,
      lockTime = lockTime,
      assigned = assigned,
      queued = queued,
      mxHostname = mxHostname,
      response = response,
      messageId = messageId
    )
  }
}


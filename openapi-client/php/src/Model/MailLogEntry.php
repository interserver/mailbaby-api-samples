<?php
/**
 * MailLogEntry
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Interserver\Mailbaby
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Interserver\Mailbaby\Model;

use \ArrayAccess;
use \Interserver\Mailbaby\ObjectSerializer;

/**
 * MailLogEntry Class Doc Comment
 *
 * @category Class
 * @description An email record
 * @package  Interserver\Mailbaby
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MailLogEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MailLogEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'id' => 'string',
        'from' => 'string',
        'to' => 'string',
        'subject' => 'string',
        'created' => 'string',
        'time' => 'int',
        'user' => 'string',
        'transtype' => 'string',
        'origin' => 'string',
        'interface' => 'string',
        'sendingZone' => 'string',
        'bodySize' => 'int',
        'seq' => 'int',
        'recipient' => 'string',
        'domain' => 'string',
        'locked' => 'int',
        'lockTime' => 'int',
        'assigned' => 'string',
        'queued' => 'string',
        'mxHostname' => 'string',
        'response' => 'string',
        'messageId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'id' => null,
        'from' => null,
        'to' => null,
        'subject' => null,
        'created' => null,
        'time' => null,
        'user' => null,
        'transtype' => null,
        'origin' => null,
        'interface' => null,
        'sendingZone' => null,
        'bodySize' => null,
        'seq' => null,
        'recipient' => null,
        'domain' => null,
        'locked' => null,
        'lockTime' => null,
        'assigned' => null,
        'queued' => null,
        'mxHostname' => null,
        'response' => null,
        'messageId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'id' => false,
		'from' => false,
		'to' => false,
		'subject' => false,
		'created' => false,
		'time' => false,
		'user' => false,
		'transtype' => false,
		'origin' => false,
		'interface' => false,
		'sendingZone' => false,
		'bodySize' => false,
		'seq' => false,
		'recipient' => false,
		'domain' => false,
		'locked' => false,
		'lockTime' => false,
		'assigned' => false,
		'queued' => false,
		'mxHostname' => false,
		'response' => false,
		'messageId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => '_id',
        'id' => 'id',
        'from' => 'from',
        'to' => 'to',
        'subject' => 'subject',
        'created' => 'created',
        'time' => 'time',
        'user' => 'user',
        'transtype' => 'transtype',
        'origin' => 'origin',
        'interface' => 'interface',
        'sendingZone' => 'sendingZone',
        'bodySize' => 'bodySize',
        'seq' => 'seq',
        'recipient' => 'recipient',
        'domain' => 'domain',
        'locked' => 'locked',
        'lockTime' => 'lockTime',
        'assigned' => 'assigned',
        'queued' => 'queued',
        'mxHostname' => 'mxHostname',
        'response' => 'response',
        'messageId' => 'messageId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'id' => 'setId',
        'from' => 'setFrom',
        'to' => 'setTo',
        'subject' => 'setSubject',
        'created' => 'setCreated',
        'time' => 'setTime',
        'user' => 'setUser',
        'transtype' => 'setTranstype',
        'origin' => 'setOrigin',
        'interface' => 'setInterface',
        'sendingZone' => 'setSendingZone',
        'bodySize' => 'setBodySize',
        'seq' => 'setSeq',
        'recipient' => 'setRecipient',
        'domain' => 'setDomain',
        'locked' => 'setLocked',
        'lockTime' => 'setLockTime',
        'assigned' => 'setAssigned',
        'queued' => 'setQueued',
        'mxHostname' => 'setMxHostname',
        'response' => 'setResponse',
        'messageId' => 'setMessageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'id' => 'getId',
        'from' => 'getFrom',
        'to' => 'getTo',
        'subject' => 'getSubject',
        'created' => 'getCreated',
        'time' => 'getTime',
        'user' => 'getUser',
        'transtype' => 'getTranstype',
        'origin' => 'getOrigin',
        'interface' => 'getInterface',
        'sendingZone' => 'getSendingZone',
        'bodySize' => 'getBodySize',
        'seq' => 'getSeq',
        'recipient' => 'getRecipient',
        'domain' => 'getDomain',
        'locked' => 'getLocked',
        'lockTime' => 'getLockTime',
        'assigned' => 'getAssigned',
        'queued' => 'getQueued',
        'mxHostname' => 'getMxHostname',
        'response' => 'getResponse',
        'messageId' => 'getMessageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('transtype', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('interface', $data ?? [], null);
        $this->setIfExists('sendingZone', $data ?? [], null);
        $this->setIfExists('bodySize', $data ?? [], null);
        $this->setIfExists('seq', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('lockTime', $data ?? [], null);
        $this->setIfExists('assigned', $data ?? [], null);
        $this->setIfExists('queued', $data ?? [], null);
        $this->setIfExists('mxHostname', $data ?? [], null);
        $this->setIfExists('response', $data ?? [], null);
        $this->setIfExists('messageId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['transtype'] === null) {
            $invalidProperties[] = "'transtype' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['interface'] === null) {
            $invalidProperties[] = "'interface' can't be null";
        }
        if ($this->container['sendingZone'] === null) {
            $invalidProperties[] = "'sendingZone' can't be null";
        }
        if ($this->container['bodySize'] === null) {
            $invalidProperties[] = "'bodySize' can't be null";
        }
        if ($this->container['seq'] === null) {
            $invalidProperties[] = "'seq' can't be null";
        }
        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalidProperties[] = "'locked' can't be null";
        }
        if ($this->container['lockTime'] === null) {
            $invalidProperties[] = "'lockTime' can't be null";
        }
        if ($this->container['assigned'] === null) {
            $invalidProperties[] = "'assigned' can't be null";
        }
        if ($this->container['queued'] === null) {
            $invalidProperties[] = "'queued' can't be null";
        }
        if ($this->container['mxHostname'] === null) {
            $invalidProperties[] = "'mxHostname' can't be null";
        }
        if ($this->container['response'] === null) {
            $invalidProperties[] = "'response' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id internal db id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id mail id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from from address
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to address
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject email subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created creation date
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time creation timestamp
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user account
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets transtype
     *
     * @return string
     */
    public function getTranstype()
    {
        return $this->container['transtype'];
    }

    /**
     * Sets transtype
     *
     * @param string $transtype transaction type
     *
     * @return self
     */
    public function setTranstype($transtype)
    {
        if (is_null($transtype)) {
            throw new \InvalidArgumentException('non-nullable transtype cannot be null');
        }
        $this->container['transtype'] = $transtype;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin ip
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets interface
     *
     * @return string
     */
    public function getInterface()
    {
        return $this->container['interface'];
    }

    /**
     * Sets interface
     *
     * @param string $interface interface name
     *
     * @return self
     */
    public function setInterface($interface)
    {
        if (is_null($interface)) {
            throw new \InvalidArgumentException('non-nullable interface cannot be null');
        }
        $this->container['interface'] = $interface;

        return $this;
    }

    /**
     * Gets sendingZone
     *
     * @return string
     */
    public function getSendingZone()
    {
        return $this->container['sendingZone'];
    }

    /**
     * Sets sendingZone
     *
     * @param string $sendingZone sending zone
     *
     * @return self
     */
    public function setSendingZone($sendingZone)
    {
        if (is_null($sendingZone)) {
            throw new \InvalidArgumentException('non-nullable sendingZone cannot be null');
        }
        $this->container['sendingZone'] = $sendingZone;

        return $this;
    }

    /**
     * Gets bodySize
     *
     * @return int
     */
    public function getBodySize()
    {
        return $this->container['bodySize'];
    }

    /**
     * Sets bodySize
     *
     * @param int $bodySize email body size in bytes
     *
     * @return self
     */
    public function setBodySize($bodySize)
    {
        if (is_null($bodySize)) {
            throw new \InvalidArgumentException('non-nullable bodySize cannot be null');
        }
        $this->container['bodySize'] = $bodySize;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return int
     */
    public function getSeq()
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param int $seq index of email in the to adderess list
     *
     * @return self
     */
    public function setSeq($seq)
    {
        if (is_null($seq)) {
            throw new \InvalidArgumentException('non-nullable seq cannot be null');
        }
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient to address this email is being sent to
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain to address domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return int
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param int $locked locked status
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets lockTime
     *
     * @return int
     */
    public function getLockTime()
    {
        return $this->container['lockTime'];
    }

    /**
     * Sets lockTime
     *
     * @param int $lockTime lock timestamp
     *
     * @return self
     */
    public function setLockTime($lockTime)
    {
        if (is_null($lockTime)) {
            throw new \InvalidArgumentException('non-nullable lockTime cannot be null');
        }
        $this->container['lockTime'] = $lockTime;

        return $this;
    }

    /**
     * Gets assigned
     *
     * @return string
     */
    public function getAssigned()
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     *
     * @param string $assigned assigned server
     *
     * @return self
     */
    public function setAssigned($assigned)
    {
        if (is_null($assigned)) {
            throw new \InvalidArgumentException('non-nullable assigned cannot be null');
        }
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets queued
     *
     * @return string
     */
    public function getQueued()
    {
        return $this->container['queued'];
    }

    /**
     * Sets queued
     *
     * @param string $queued queued timestamp
     *
     * @return self
     */
    public function setQueued($queued)
    {
        if (is_null($queued)) {
            throw new \InvalidArgumentException('non-nullable queued cannot be null');
        }
        $this->container['queued'] = $queued;

        return $this;
    }

    /**
     * Gets mxHostname
     *
     * @return string
     */
    public function getMxHostname()
    {
        return $this->container['mxHostname'];
    }

    /**
     * Sets mxHostname
     *
     * @param string $mxHostname mx hostname
     *
     * @return self
     */
    public function setMxHostname($mxHostname)
    {
        if (is_null($mxHostname)) {
            throw new \InvalidArgumentException('non-nullable mxHostname cannot be null');
        }
        $this->container['mxHostname'] = $mxHostname;

        return $this;
    }

    /**
     * Gets response
     *
     * @return string
     */
    public function getResponse()
    {
        return $this->container['response'];
    }

    /**
     * Sets response
     *
     * @param string $response mail delivery response
     *
     * @return self
     */
    public function setResponse($response)
    {
        if (is_null($response)) {
            throw new \InvalidArgumentException('non-nullable response cannot be null');
        }
        $this->container['response'] = $response;

        return $this;
    }

    /**
     * Gets messageId
     *
     * @return string|null
     */
    public function getMessageId()
    {
        return $this->container['messageId'];
    }

    /**
     * Sets messageId
     *
     * @param string|null $messageId message id
     *
     * @return self
     */
    public function setMessageId($messageId)
    {
        if (is_null($messageId)) {
            throw new \InvalidArgumentException('non-nullable messageId cannot be null');
        }
        $this->container['messageId'] = $messageId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



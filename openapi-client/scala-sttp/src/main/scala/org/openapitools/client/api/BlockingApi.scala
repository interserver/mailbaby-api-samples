/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DenyRuleRecord
import org.openapitools.client.model.ErrorMessage
import org.openapitools.client.model.GenericResponse
import org.openapitools.client.model.MailBlocks
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object BlockingApi {

def apply(baseUrl: String = "https://api.mailbaby.net") = new BlockingApi(baseUrl)
}

class BlockingApi(baseUrl: String) {

  /**
   * Adds a new email deny rule into the system to block new emails that match the given criteria
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param `type` The type of deny rule.
   * @param data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
   * @param user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
   */
  def addRule(apiKey: String)(`type`: String, data: String, user: Option[String] = None
): Request[Either[ResponseException[String, Exception], GenericResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mail/rules")
      .contentType("application/x-www-form-urlencoded")
      .header("X-API-KEY", apiKey)
      .body(Map(
        "user" -> user,
        "type" -> `type`,
        "data" -> data
      ))
      .response(asJson[GenericResponse])

  /**
   * Removes one of the configured deny mail rules from the system.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param ruleId The ID of the Rules entry.
   */
  def deleteRule(apiKey: String)(ruleId: Int
): Request[Either[ResponseException[String, Exception], GenericResponse], Any] =
    basicRequest
      .method(Method.DELETE, uri"$baseUrl/mail/rules/${ruleId}")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .response(asJson[GenericResponse])

  /**
   * Removes an email address from the various block lists. 
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param body 
   */
  def delistBlock(apiKey: String)(body: String
): Request[Either[ResponseException[String, Exception], GenericResponse], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mail/blocks/delete")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .body(body)
      .response(asJson[GenericResponse])

  /**
   * Expected answers:
   *   code 200 : MailBlocks (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getMailBlocks(apiKey: String)(
): Request[Either[ResponseException[String, Exception], MailBlocks], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mail/blocks")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .response(asJson[MailBlocks])

  /**
   * Returns a listing of all the deny block rules you have configured.
   * 
   * Expected answers:
   *   code 200 : Seq[DenyRuleRecord] (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getRules(apiKey: String)(
): Request[Either[ResponseException[String, Exception], Seq[DenyRuleRecord]], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mail/rules")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .response(asJson[Seq[DenyRuleRecord]])

}

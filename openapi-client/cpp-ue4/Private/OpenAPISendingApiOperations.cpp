/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISendingApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPISendingApi::SendAdvMailRequest::ComputePath() const
{
	FString Path(TEXT("/mail/advsend"));
	return Path;
}

void OpenAPISendingApi::SendAdvMailRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/x-www-form-urlencoded"), TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("subject"));
		WriteJsonValue(Writer, Subject);
		Writer->WriteIdentifierPrefix(TEXT("body"));
		WriteJsonValue(Writer, Body);
		Writer->WriteIdentifierPrefix(TEXT("from"));
		WriteJsonValue(Writer, From);
		Writer->WriteIdentifierPrefix(TEXT("to"));
		WriteJsonValue(Writer, To);
		if (Replyto.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("replyto"));
			WriteJsonValue(Writer, Replyto.GetValue());
		}
		if (Cc.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("cc"));
			WriteJsonValue(Writer, Cc.GetValue());
		}
		if (Bcc.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("bcc"));
			WriteJsonValue(Writer, Bcc.GetValue());
		}
		if (Attachments.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("attachments"));
			WriteJsonValue(Writer, Attachments.GetValue());
		}
		if (Id.IsSet()){
			Writer->WriteIdentifierPrefix(TEXT("id"));
			WriteJsonValue(Writer, Id.GetValue());
		}
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddStringPart(TEXT("subject"), *ToUrlString(Subject));
		FormData.AddStringPart(TEXT("body"), *ToUrlString(Body));
		FormData.AddStringPart(TEXT("from"), *ToUrlString(From));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (to) was ignored, Collections are not supported in multipart form"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (replyto) was ignored, Collections are not supported in multipart form"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (cc) was ignored, Collections are not supported in multipart form"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (bcc) was ignored, Collections are not supported in multipart form"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (attachments) was ignored, Collections are not supported in multipart form"));
		if(Id.IsSet())
		{
			FormData.AddStringPart(TEXT("id"), *ToUrlString(Id.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		FormParams.Add(FString(TEXT("subject=")) + ToUrlString(Subject));
		FormParams.Add(FString(TEXT("body=")) + ToUrlString(Body));
		FormParams.Add(FString(TEXT("from=")) + ToUrlString(From));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (to) was ignored, Collections are not supported in urlencoded requests"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (replyto) was ignored, Collections are not supported in urlencoded requests"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (cc) was ignored, Collections are not supported in urlencoded requests"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (bcc) was ignored, Collections are not supported in urlencoded requests"));
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (attachments) was ignored, Collections are not supported in urlencoded requests"));
		if(Id.IsSet())
		{
			FormParams.Add(FString(TEXT("id=")) + ToUrlString(Id.GetValue()));
		}

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPISendingApi::SendAdvMailResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("search results matching criteria"));
		break;
	case 400:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	}
}

bool OpenAPISendingApi::SendAdvMailResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPISendingApi::SendMailRequest::ComputePath() const
{
	FString Path(TEXT("/mail/send"));
	return Path;
}

void OpenAPISendingApi::SendMailRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/x-www-form-urlencoded"), TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Form parameters added to try to generate a json body when no body parameters are specified.
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);
		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("to"));
		WriteJsonValue(Writer, To);
		Writer->WriteIdentifierPrefix(TEXT("from"));
		WriteJsonValue(Writer, From);
		Writer->WriteIdentifierPrefix(TEXT("subject"));
		WriteJsonValue(Writer, Subject);
		Writer->WriteIdentifierPrefix(TEXT("body"));
		WriteJsonValue(Writer, Body);
		Writer->WriteObjectEnd();
		Writer->Close();
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		FormData.AddStringPart(TEXT("to"), *ToUrlString(To));
		FormData.AddStringPart(TEXT("from"), *ToUrlString(From));
		FormData.AddStringPart(TEXT("subject"), *ToUrlString(Subject));
		FormData.AddStringPart(TEXT("body"), *ToUrlString(Body));

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		FormParams.Add(FString(TEXT("to=")) + ToUrlString(To));
		FormParams.Add(FString(TEXT("from=")) + ToUrlString(From));
		FormParams.Add(FString(TEXT("subject=")) + ToUrlString(Subject));
		FormParams.Add(FString(TEXT("body=")) + ToUrlString(Body));

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPISendingApi::SendMailResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("search results matching criteria"));
		break;
	case 400:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found"));
		break;
	}
}

bool OpenAPISendingApi::SendMailResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mail_stats_type_volume_from import MailStatsTypeVolumeFrom  # noqa: F401,E501
from swagger_server.models.mail_stats_type_volume_ip import MailStatsTypeVolumeIp  # noqa: F401,E501
from swagger_server.models.mail_stats_type_volume_to import MailStatsTypeVolumeTo  # noqa: F401,E501
from swagger_server import util


class MailStatsTypeVolume(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, to: MailStatsTypeVolumeTo=None, _from: MailStatsTypeVolumeFrom=None, ip: MailStatsTypeVolumeIp=None):  # noqa: E501
        """MailStatsTypeVolume - a model defined in Swagger

        :param to: The to of this MailStatsTypeVolume.  # noqa: E501
        :type to: MailStatsTypeVolumeTo
        :param _from: The _from of this MailStatsTypeVolume.  # noqa: E501
        :type _from: MailStatsTypeVolumeFrom
        :param ip: The ip of this MailStatsTypeVolume.  # noqa: E501
        :type ip: MailStatsTypeVolumeIp
        """
        self.swagger_types = {
            'to': MailStatsTypeVolumeTo,
            '_from': MailStatsTypeVolumeFrom,
            'ip': MailStatsTypeVolumeIp
        }

        self.attribute_map = {
            'to': 'to',
            '_from': 'from',
            'ip': 'ip'
        }
        self._to = to
        self.__from = _from
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt) -> 'MailStatsTypeVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MailStatsType_volume of this MailStatsTypeVolume.  # noqa: E501
        :rtype: MailStatsTypeVolume
        """
        return util.deserialize_model(dikt, cls)

    @property
    def to(self) -> MailStatsTypeVolumeTo:
        """Gets the to of this MailStatsTypeVolume.


        :return: The to of this MailStatsTypeVolume.
        :rtype: MailStatsTypeVolumeTo
        """
        return self._to

    @to.setter
    def to(self, to: MailStatsTypeVolumeTo):
        """Sets the to of this MailStatsTypeVolume.


        :param to: The to of this MailStatsTypeVolume.
        :type to: MailStatsTypeVolumeTo
        """

        self._to = to

    @property
    def _from(self) -> MailStatsTypeVolumeFrom:
        """Gets the _from of this MailStatsTypeVolume.


        :return: The _from of this MailStatsTypeVolume.
        :rtype: MailStatsTypeVolumeFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from: MailStatsTypeVolumeFrom):
        """Sets the _from of this MailStatsTypeVolume.


        :param _from: The _from of this MailStatsTypeVolume.
        :type _from: MailStatsTypeVolumeFrom
        """

        self.__from = _from

    @property
    def ip(self) -> MailStatsTypeVolumeIp:
        """Gets the ip of this MailStatsTypeVolume.


        :return: The ip of this MailStatsTypeVolume.
        :rtype: MailStatsTypeVolumeIp
        """
        return self._ip

    @ip.setter
    def ip(self, ip: MailStatsTypeVolumeIp):
        """Sets the ip of this MailStatsTypeVolume.


        :param ip: The ip of this MailStatsTypeVolume.
        :type ip: MailStatsTypeVolumeIp
        """

        self._ip = ip

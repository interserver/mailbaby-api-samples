# coding: utf-8

"""
    Mail Baby API

    This is an API defintion for accesssing the Mail.Baby mail service.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: detain@interserver.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_mail_orders(self, **kwargs):  # noqa: E501
        """displays a list of mail service orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mail_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MailOrders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mail_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_mail_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_mail_orders_with_http_info(self, **kwargs):  # noqa: E501
        """displays a list of mail service orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mail_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MailOrders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mail_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MailOrders',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_server(self, **kwargs):  # noqa: E501
        """Checks if the server is running  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_server(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_server_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ping_server_with_http_info(**kwargs)  # noqa: E501
            return data

    def ping_server_with_http_info(self, **kwargs):  # noqa: E501
        """Checks if the server is running  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_server_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_server" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ping', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def place_mail_order(self, **kwargs):  # noqa: E501
        """places a mail order  # noqa: E501

        Adds an item to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_mail_order(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MailOrder body: Inventory item to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.place_mail_order_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.place_mail_order_with_http_info(**kwargs)  # noqa: E501
            return data

    def place_mail_order_with_http_info(self, **kwargs):  # noqa: E501
        """places a mail order  # noqa: E501

        Adds an item to the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.place_mail_order_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MailOrder body: Inventory item to add
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method place_mail_order" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/order', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_adv_mail(self, body, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMailAdv body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_adv_mail_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.send_adv_mail_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def send_adv_mail_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMailAdv body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_adv_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_adv_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
            collection_formats['from'] = 'multi'  # noqa: E501
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
            collection_formats['to'] = 'multi'  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'replyto' in params:
            form_params.append(('replyto', params['replyto']))  # noqa: E501
            collection_formats['replyto'] = 'multi'  # noqa: E501
        if 'cc' in params:
            form_params.append(('cc', params['cc']))  # noqa: E501
            collection_formats['cc'] = 'multi'  # noqa: E501
        if 'bcc' in params:
            form_params.append(('bcc', params['bcc']))  # noqa: E501
            collection_formats['bcc'] = 'multi'  # noqa: E501
        if 'attachments' in params:
            form_params.append(('attachments', params['attachments']))  # noqa: E501
            collection_formats['attachments'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/advsend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_adv_mail(self, subject, body, _from, to, id, replyto, cc, bcc, attachments, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail(subject, body, _from, to, id, replyto, cc, bcc, attachments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: (required)
        :param str body: (required)
        :param list[SendMailAdvFrom] _from: (required)
        :param list[MailContact] to: (required)
        :param int id: (required)
        :param list[MailContact] replyto: (required)
        :param list[MailContact] cc: (required)
        :param list[MailContact] bcc: (required)
        :param list[MailAttachment] attachments: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_adv_mail_with_http_info(subject, body, _from, to, id, replyto, cc, bcc, attachments, **kwargs)  # noqa: E501
        else:
            (data) = self.send_adv_mail_with_http_info(subject, body, _from, to, id, replyto, cc, bcc, attachments, **kwargs)  # noqa: E501
            return data

    def send_adv_mail_with_http_info(self, subject, body, _from, to, id, replyto, cc, bcc, attachments, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail_with_http_info(subject, body, _from, to, id, replyto, cc, bcc, attachments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: (required)
        :param str body: (required)
        :param list[SendMailAdvFrom] _from: (required)
        :param list[MailContact] to: (required)
        :param int id: (required)
        :param list[MailContact] replyto: (required)
        :param list[MailContact] cc: (required)
        :param list[MailContact] bcc: (required)
        :param list[MailAttachment] attachments: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject', 'body', '_from', 'to', 'id', 'replyto', 'cc', 'bcc', 'attachments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_adv_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'replyto' is set
        if ('replyto' not in params or
                params['replyto'] is None):
            raise ValueError("Missing the required parameter `replyto` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'cc' is set
        if ('cc' not in params or
                params['cc'] is None):
            raise ValueError("Missing the required parameter `cc` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'bcc' is set
        if ('bcc' not in params or
                params['bcc'] is None):
            raise ValueError("Missing the required parameter `bcc` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'attachments' is set
        if ('attachments' not in params or
                params['attachments'] is None):
            raise ValueError("Missing the required parameter `attachments` when calling `send_adv_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
            collection_formats['from'] = 'multi'  # noqa: E501
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
            collection_formats['to'] = 'multi'  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'replyto' in params:
            form_params.append(('replyto', params['replyto']))  # noqa: E501
            collection_formats['replyto'] = 'multi'  # noqa: E501
        if 'cc' in params:
            form_params.append(('cc', params['cc']))  # noqa: E501
            collection_formats['cc'] = 'multi'  # noqa: E501
        if 'bcc' in params:
            form_params.append(('bcc', params['bcc']))  # noqa: E501
            collection_formats['bcc'] = 'multi'  # noqa: E501
        if 'attachments' in params:
            form_params.append(('attachments', params['attachments']))  # noqa: E501
            collection_formats['attachments'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/advsend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_mail(self, to, _from, subject, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends An email through one of your mail orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail(to, _from, subject, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to: (required)
        :param str _from: (required)
        :param str subject: (required)
        :param str body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_mail_with_http_info(to, _from, subject, body, **kwargs)  # noqa: E501
        else:
            (data) = self.send_mail_with_http_info(to, _from, subject, body, **kwargs)  # noqa: E501
            return data

    def send_mail_with_http_info(self, to, _from, subject, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends An email through one of your mail orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail_with_http_info(to, _from, subject, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to: (required)
        :param str _from: (required)
        :param str subject: (required)
        :param str body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to', '_from', 'subject', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `send_mail`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `send_mail`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `send_mail`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_mail(self, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends An email through one of your mail orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMail body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_mail_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.send_mail_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def send_mail_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends An email through one of your mail orders.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMail body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_mail_order(self, **kwargs):  # noqa: E501
        """validatess order details before placing an order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_mail_order(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_mail_order_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.validate_mail_order_with_http_info(**kwargs)  # noqa: E501
            return data

    def validate_mail_order_with_http_info(self, **kwargs):  # noqa: E501
        """validatess order details before placing an order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_mail_order_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_mail_order" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/order', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def view_mail_log(self, **kwargs):  # noqa: E501
        """displays the mail log  # noqa: E501

        By passing in the appropriate options, you can search for available inventory in the system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_mail_log(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of your mail order this will be sent through.
        :param str search_string: pass an optional search string for looking up inventory
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :return: list[MailLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.view_mail_log_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.view_mail_log_with_http_info(**kwargs)  # noqa: E501
            return data

    def view_mail_log_with_http_info(self, **kwargs):  # noqa: E501
        """displays the mail log  # noqa: E501

        By passing in the appropriate options, you can search for available inventory in the system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.view_mail_log_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of your mail order this will be sent through.
        :param str search_string: pass an optional search string for looking up inventory
        :param int skip: number of records to skip for pagination
        :param int limit: maximum number of records to return
        :return: list[MailLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'search_string', 'skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_mail_log" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'search_string' in params:
            query_params.append(('searchString', params['search_string']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MailLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

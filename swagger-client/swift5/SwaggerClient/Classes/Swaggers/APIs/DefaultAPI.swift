//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     displays a list of mail service orders

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMailOrders(completion: @escaping ((_ data: [InlineResponse200]?,_ error: Error?) -> Void)) {
        getMailOrdersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     displays a list of mail service orders
     - GET /mail
     - 

     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - examples: [{contentType=application/json, example=[ {
  "password" : "guest123",
  "comment" : "main mail account",
  "id" : 1234,
  "status" : "active",
  "username" : "mb1234"
}, {
  "password" : "guest123",
  "comment" : "main mail account",
  "id" : 1234,
  "status" : "active",
  "username" : "mb1234"
} ]}]

     - returns: RequestBuilder<[InlineResponse200]> 
     */
    open class func getMailOrdersWithRequestBuilder() -> RequestBuilder<[InlineResponse200]> {
        let path = "/mail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[InlineResponse200]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Checks if the server is running

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pingServer(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pingServerWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Checks if the server is running
     - GET /ping
     - 


     - returns: RequestBuilder<Void> 
     */
    open class func pingServerWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/ping"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Sends an Email with Advanced Options

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendAdvMail(body: SendMailAdv, completion: @escaping ((_ data: GenericResponse?,_ error: Error?) -> Void)) {
        sendAdvMailWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sends an Email with Advanced Options
     - POST /mail/advsend

     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - examples: [{contentType=application/json, example={
  "text" : "The command completed successfully.",
  "status" : "ok"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendAdvMailWithRequestBuilder(body: SendMailAdv) -> RequestBuilder<GenericResponse> {
        let path = "/mail/advsend"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GenericResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Sends an Email with Advanced Options

     - parameter subject: (form)  
     - parameter body: (form)  
     - parameter from: (form)  
     - parameter to: (form)  
     - parameter replyto: (form)  
     - parameter cc: (form)  
     - parameter bcc: (form)  
     - parameter attachments: (form)  
     - parameter _id: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendAdvMail(subject: String, body: String, from: SendMailAdvFrom, to: [SendMailAdvTo], replyto: [SendMailAdvReplyto], cc: [SendMailAdvCc], bcc: [SendMailAdvBcc], attachments: [SendMailAdvAttachments], _id: Int64, completion: @escaping ((_ data: GenericResponse?,_ error: Error?) -> Void)) {
        sendAdvMailWithRequestBuilder(subject: subject, body: body, from: from, to: to, replyto: replyto, cc: cc, bcc: bcc, attachments: attachments, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sends an Email with Advanced Options
     - POST /mail/advsend

     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - examples: [{contentType=application/json, example={
  "text" : "The command completed successfully.",
  "status" : "ok"
}}]
     - parameter subject: (form)  
     - parameter body: (form)  
     - parameter from: (form)  
     - parameter to: (form)  
     - parameter replyto: (form)  
     - parameter cc: (form)  
     - parameter bcc: (form)  
     - parameter attachments: (form)  
     - parameter _id: (form)  

     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendAdvMailWithRequestBuilder(subject: String, body: String, from: SendMailAdvFrom, to: [SendMailAdvTo], replyto: [SendMailAdvReplyto], cc: [SendMailAdvCc], bcc: [SendMailAdvBcc], attachments: [SendMailAdvAttachments], _id: Int64) -> RequestBuilder<GenericResponse> {
        let path = "/mail/advsend"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GenericResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Sends an Email

     - parameter to: (form)  
     - parameter from: (form)  
     - parameter subject: (form)  
     - parameter body: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendMail(to: String, from: String, subject: String, body: String, completion: @escaping ((_ data: GenericResponse?,_ error: Error?) -> Void)) {
        sendMailWithRequestBuilder(to: to, from: from, subject: subject, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sends an Email
     - POST /mail/send

     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - examples: [{contentType=application/json, example={
  "text" : "The command completed successfully.",
  "status" : "ok"
}}]
     - parameter to: (form)  
     - parameter from: (form)  
     - parameter subject: (form)  
     - parameter body: (form)  

     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendMailWithRequestBuilder(to: String, from: String, subject: String, body: String) -> RequestBuilder<GenericResponse> {
        let path = "/mail/send"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GenericResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Sends an Email

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendMail(body: SendMail, completion: @escaping ((_ data: GenericResponse?,_ error: Error?) -> Void)) {
        sendMailWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Sends an Email
     - POST /mail/send

     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - examples: [{contentType=application/json, example={
  "text" : "The command completed successfully.",
  "status" : "ok"
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendMailWithRequestBuilder(body: SendMail) -> RequestBuilder<GenericResponse> {
        let path = "/mail/send"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GenericResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     displays the mail log

     - parameter _id: (query) The ID of your mail order this will be sent through. (optional)
     - parameter origin: (query) originating ip address sending mail (optional)
     - parameter mx: (query) mx record mail was sent to (optional)
     - parameter from: (query) from email address (optional)
     - parameter to: (query) to/destination email address (optional)
     - parameter subject: (query) subject containing this string (optional)
     - parameter mailid: (query) mail id (optional)
     - parameter skip: (query) number of records to skip for pagination (optional, default to 0)
     - parameter limit: (query) maximum number of records to return (optional, default to 100)
     - parameter startDate: (query) earliest date to get emails in unix timestamp format (optional)
     - parameter endDate: (query) earliest date to get emails in unix timestamp format (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func viewMailLog(_id: Int64? = nil, origin: String? = nil, mx: String? = nil, from: String? = nil, to: String? = nil, subject: String? = nil, mailid: String? = nil, skip: Int? = nil, limit: Int? = nil, startDate: Int64? = nil, endDate: Int64? = nil, completion: @escaping ((_ data: MailLog?,_ error: Error?) -> Void)) {
        viewMailLogWithRequestBuilder(_id: _id, origin: origin, mx: mx, from: from, to: to, subject: subject, mailid: mailid, skip: skip, limit: limit, startDate: startDate, endDate: endDate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     displays the mail log
     - GET /mail/log

     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - examples: [{contentType=application/json, example={
  "emails" : [ {
    "subject" : "sell 0.005 shares",
    "created" : "2021-10-14 08:50:10",
    "transtype" : "ESMTPSA",
    "origin" : "199.231.189.154",
    "queued" : "2021-10-14T12:50:15.487Z",
    "messageId" : "<vmiLEebsuCbSpUxD7oN3REpaN4VbN6BrdCAbNKIrdAo@relay0.mailbaby.net>",
    "sendingZone" : "interserver",
    "mxHostname" : "mx.j.is.cc",
    "interface" : "feeder",
    "lockTime" : 1634215818533,
    "response" : "250 2.0.0 Ok queued as C91D83E128C",
    "domain" : "interserver.net",
    "bodySize" : 63,
    "recipient" : "client@isp.com",
    "from" : "person@mysite.com",
    "assigned" : "relay1",
    "_id" : 103172,
    "id" : "17c7eda538e0005d03",
    "to" : "client@isp.com",
    "time" : 1634215809,
    "locked" : 1,
    "user" : "mb5658",
    "seq" : 1
  }, {
    "subject" : "sell 0.005 shares",
    "created" : "2021-10-14 08:50:10",
    "transtype" : "ESMTPSA",
    "origin" : "199.231.189.154",
    "queued" : "2021-10-14T12:50:15.487Z",
    "messageId" : "<vmiLEebsuCbSpUxD7oN3REpaN4VbN6BrdCAbNKIrdAo@relay0.mailbaby.net>",
    "sendingZone" : "interserver",
    "mxHostname" : "mx.j.is.cc",
    "interface" : "feeder",
    "lockTime" : 1634215818533,
    "response" : "250 2.0.0 Ok queued as C91D83E128C",
    "domain" : "interserver.net",
    "bodySize" : 63,
    "recipient" : "client@isp.com",
    "from" : "person@mysite.com",
    "assigned" : "relay1",
    "_id" : 103172,
    "id" : "17c7eda538e0005d03",
    "to" : "client@isp.com",
    "time" : 1634215809,
    "locked" : 1,
    "user" : "mb5658",
    "seq" : 1
  } ],
  "total" : 10234,
  "limit" : 100,
  "skip" : 0
}}]
     - parameter _id: (query) The ID of your mail order this will be sent through. (optional)
     - parameter origin: (query) originating ip address sending mail (optional)
     - parameter mx: (query) mx record mail was sent to (optional)
     - parameter from: (query) from email address (optional)
     - parameter to: (query) to/destination email address (optional)
     - parameter subject: (query) subject containing this string (optional)
     - parameter mailid: (query) mail id (optional)
     - parameter skip: (query) number of records to skip for pagination (optional, default to 0)
     - parameter limit: (query) maximum number of records to return (optional, default to 100)
     - parameter startDate: (query) earliest date to get emails in unix timestamp format (optional)
     - parameter endDate: (query) earliest date to get emails in unix timestamp format (optional)

     - returns: RequestBuilder<MailLog> 
     */
    open class func viewMailLogWithRequestBuilder(_id: Int64? = nil, origin: String? = nil, mx: String? = nil, from: String? = nil, to: String? = nil, subject: String? = nil, mailid: String? = nil, skip: Int? = nil, limit: Int? = nil, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<MailLog> {
        let path = "/mail/log"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "id": _id?.encodeToJSON(), 
                        "origin": origin, 
                        "mx": mx, 
                        "from": from, 
                        "to": to, 
                        "subject": subject, 
                        "mailid": mailid, 
                        "skip": skip?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "startDate": startDate?.encodeToJSON(), 
                        "endDate": endDate?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<MailLog>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}

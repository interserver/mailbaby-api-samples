/* tslint:disable */
/* eslint-disable */
/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GenericResponse,
    GenericResponseFromJSON,
    GenericResponseToJSON,
    MailLog,
    MailLogFromJSON,
    MailLogToJSON,
    MailOrder,
    MailOrderFromJSON,
    MailOrderToJSON,
    SendMail,
    SendMailFromJSON,
    SendMailToJSON,
} from '../models';

export interface GetMailOrdersRequest {
    id?: number;
}

export interface PlaceMailOrderRequest {
    mailOrder?: MailOrder;
}

export interface SendAdvMailByIdRequest {
    sendMail: SendMail;
}

export interface SendMailByIdRequest {
    subject: string;
    body: string;
    from: string;
    to: string;
    id?: number;
    toName?: string;
    fromName?: string;
}

export interface ViewMailLogByIdRequest {
    id?: number;
    searchString?: string;
    skip?: number;
    limit?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * displays a list of mail service orders
     */
    async getMailOrdersRaw(requestParameters: GetMailOrdersRequest): Promise<runtime.ApiResponse<Array<MailOrder>>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MailOrderFromJSON));
    }

    /**
     * displays a list of mail service orders
     */
    async getMailOrders(requestParameters: GetMailOrdersRequest): Promise<Array<MailOrder>> {
        const response = await this.getMailOrdersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Checks if the server is running
     */
    async pingServerRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Checks if the server is running
     */
    async pingServer(): Promise<void> {
        await this.pingServerRaw();
    }

    /**
     * Adds an item to the system
     * places a mail order
     */
    async placeMailOrderRaw(requestParameters: PlaceMailOrderRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MailOrderToJSON(requestParameters.mailOrder),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds an item to the system
     * places a mail order
     */
    async placeMailOrder(requestParameters: PlaceMailOrderRequest): Promise<void> {
        await this.placeMailOrderRaw(requestParameters);
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    async sendAdvMailByIdRaw(requestParameters: SendAdvMailByIdRequest): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.sendMail === null || requestParameters.sendMail === undefined) {
            throw new runtime.RequiredError('sendMail','Required parameter requestParameters.sendMail was null or undefined when calling sendAdvMailById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/advsend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMailToJSON(requestParameters.sendMail),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    async sendAdvMailById(requestParameters: SendAdvMailByIdRequest): Promise<GenericResponse> {
        const response = await this.sendAdvMailByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sends An email through one of your mail orders.
     * Sends an Email
     */
    async sendMailByIdRaw(requestParameters: SendMailByIdRequest): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling sendMailById.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendMailById.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling sendMailById.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendMailById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.subject !== undefined) {
            formParams.append('subject', requestParameters.subject as any);
        }

        if (requestParameters.body !== undefined) {
            formParams.append('body', requestParameters.body as any);
        }

        if (requestParameters.from !== undefined) {
            formParams.append('from', requestParameters.from as any);
        }

        if (requestParameters.to !== undefined) {
            formParams.append('to', requestParameters.to as any);
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        if (requestParameters.toName !== undefined) {
            formParams.append('toName', requestParameters.toName as any);
        }

        if (requestParameters.fromName !== undefined) {
            formParams.append('fromName', requestParameters.fromName as any);
        }

        const response = await this.request({
            path: `/mail/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Sends An email through one of your mail orders.
     * Sends an Email
     */
    async sendMailById(requestParameters: SendMailByIdRequest): Promise<GenericResponse> {
        const response = await this.sendMailByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * validatess order details before placing an order
     */
    async validateMailOrderRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * validatess order details before placing an order
     */
    async validateMailOrder(): Promise<void> {
        await this.validateMailOrderRaw();
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * displays the mail log
     */
    async viewMailLogByIdRaw(requestParameters: ViewMailLogByIdRequest): Promise<runtime.ApiResponse<Array<MailLog>>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.searchString !== undefined) {
            queryParameters['searchString'] = requestParameters.searchString;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MailLogFromJSON));
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * displays the mail log
     */
    async viewMailLogById(requestParameters: ViewMailLogByIdRequest): Promise<Array<MailLog>> {
        const response = await this.viewMailLogByIdRaw(requestParameters);
        return await response.value();
    }

}

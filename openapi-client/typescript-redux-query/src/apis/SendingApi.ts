// tslint:disable
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    EmailAddressName,
    EmailAddressNameFromJSON,
    EmailAddressNameToJSON,
    GenericResponse,
    GenericResponseFromJSON,
    GenericResponseToJSON,
    GetMailOrders401Response,
    GetMailOrders401ResponseFromJSON,
    GetMailOrders401ResponseToJSON,
    MailAttachment,
    MailAttachmentFromJSON,
    MailAttachmentToJSON,
} from '../models';

export interface SendAdvMailRequest {
    subject: string;
    body: string;
    from: EmailAddressName;
    to: Array<EmailAddressName>;
    replyto?: Array<EmailAddressName>;
    cc?: Array<EmailAddressName>;
    bcc?: Array<EmailAddressName>;
    attachments?: Array<MailAttachment>;
    id?: number;
}

export interface SendMailRequest {
    to: string;
    from: string;
    subject: string;
    body: string;
}


/**
 * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
 * Sends an Email with Advanced Options
 */
function sendAdvMailRaw<T>(requestParameters: SendAdvMailRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.subject === null || requestParameters.subject === undefined) {
        throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling sendAdvMail.');
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendAdvMail.');
    }

    if (requestParameters.from === null || requestParameters.from === undefined) {
        throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling sendAdvMail.');
    }

    if (requestParameters.to === null || requestParameters.to === undefined) {
        throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendAdvMail.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const formData = new FormData();
    if (requestParameters.subject !== undefined) {
        formData.append('subject', requestParameters.subject as any);
    }

    if (requestParameters.body !== undefined) {
        formData.append('body', requestParameters.body as any);
    }

    if (requestParameters.from !== undefined) {
        formData.append('from', requestParameters.from as any);
    }

    if (requestParameters.to) {
        formData.append('to', requestParameters.to?.join(runtime.COLLECTION_FORMATS["csv"]));
    }

    if (requestParameters.replyto) {
        formData.append('replyto', requestParameters.replyto?.join(runtime.COLLECTION_FORMATS["csv"]));
    }

    if (requestParameters.cc) {
        formData.append('cc', requestParameters.cc?.join(runtime.COLLECTION_FORMATS["csv"]));
    }

    if (requestParameters.bcc) {
        formData.append('bcc', requestParameters.bcc?.join(runtime.COLLECTION_FORMATS["csv"]));
    }

    if (requestParameters.attachments) {
        formData.append('attachments', requestParameters.attachments?.join(runtime.COLLECTION_FORMATS["csv"]));
    }

    if (requestParameters.id !== undefined) {
        formData.append('id', requestParameters.id as any);
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/advsend`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
* Sends an Email with Advanced Options
*/
export function sendAdvMail<T>(requestParameters: SendAdvMailRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return sendAdvMailRaw(requestParameters, requestConfig);
}

/**
 * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
 * Sends an Email
 */
function sendMailRaw<T>(requestParameters: SendMailRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.to === null || requestParameters.to === undefined) {
        throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendMail.');
    }

    if (requestParameters.from === null || requestParameters.from === undefined) {
        throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling sendMail.');
    }

    if (requestParameters.subject === null || requestParameters.subject === undefined) {
        throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling sendMail.');
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendMail.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const formData = new FormData();
    if (requestParameters.to !== undefined) {
        formData.append('to', requestParameters.to as any);
    }

    if (requestParameters.from !== undefined) {
        formData.append('from', requestParameters.from as any);
    }

    if (requestParameters.subject !== undefined) {
        formData.append('subject', requestParameters.subject as any);
    }

    if (requestParameters.body !== undefined) {
        formData.append('body', requestParameters.body as any);
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/send`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
* Sends an Email
*/
export function sendMail<T>(requestParameters: SendMailRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return sendMailRaw(requestParameters, requestConfig);
}


/* 
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The listing of blocked emails.
    /// </summary>
    [DataContract]
        public partial class MailBlocks :  IEquatable<MailBlocks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailBlocks" /> class.
        /// </summary>
        /// <param name="local">local (required).</param>
        /// <param name="mbtrap">mbtrap (required).</param>
        /// <param name="subject">subject (required).</param>
        public MailBlocks(List<MailBlockClickHouse> local = default(List<MailBlockClickHouse>), List<MailBlockClickHouse> mbtrap = default(List<MailBlockClickHouse>), List<MailBlockRspamd> subject = default(List<MailBlockRspamd>))
        {
            // to ensure "local" is required (not null)
            if (local == null)
            {
                throw new InvalidDataException("local is a required property for MailBlocks and cannot be null");
            }
            else
            {
                this.Local = local;
            }
            // to ensure "mbtrap" is required (not null)
            if (mbtrap == null)
            {
                throw new InvalidDataException("mbtrap is a required property for MailBlocks and cannot be null");
            }
            else
            {
                this.Mbtrap = mbtrap;
            }
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for MailBlocks and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
        }
        
        /// <summary>
        /// Gets or Sets Local
        /// </summary>
        [DataMember(Name="local", EmitDefaultValue=false)]
        public List<MailBlockClickHouse> Local { get; set; }

        /// <summary>
        /// Gets or Sets Mbtrap
        /// </summary>
        [DataMember(Name="mbtrap", EmitDefaultValue=false)]
        public List<MailBlockClickHouse> Mbtrap { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public List<MailBlockRspamd> Subject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailBlocks {\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Mbtrap: ").Append(Mbtrap).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailBlocks);
        }

        /// <summary>
        /// Returns true if MailBlocks instances are equal
        /// </summary>
        /// <param name="input">Instance of MailBlocks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailBlocks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Local == input.Local ||
                    this.Local != null &&
                    input.Local != null &&
                    this.Local.SequenceEqual(input.Local)
                ) && 
                (
                    this.Mbtrap == input.Mbtrap ||
                    this.Mbtrap != null &&
                    input.Mbtrap != null &&
                    this.Mbtrap.SequenceEqual(input.Mbtrap)
                ) && 
                (
                    this.Subject == input.Subject ||
                    this.Subject != null &&
                    input.Subject != null &&
                    this.Subject.SequenceEqual(input.Subject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Local != null)
                    hashCode = hashCode * 59 + this.Local.GetHashCode();
                if (this.Mbtrap != null)
                    hashCode = hashCode * 59 + this.Mbtrap.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

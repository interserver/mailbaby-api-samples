/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ErrorResponse
import org.openapitools.client.model.GenericResponse
import org.openapitools.client.model.MailLog
import org.openapitools.client.model.MailOrder
import org.openapitools.client.model.SendMailAdv
import org.openapitools.client.core.JsonSupport._
import sttp.client._
import sttp.model.Method

object DefaultApi {

def apply(baseUrl: String = "https://api.mailbaby.net") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Seq[MailOrder] (OK)
   *   code 401 : ErrorResponse (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param id The ID of your mail order this will be sent through.
   */
  def getMailOrders(apiKey: String)(id: Option[Long] = None
): Request[Either[ResponseError[Exception], Seq[MailOrder]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mail?id=${ id }")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .response(asJson[Seq[MailOrder]])

  /**
   * Expected answers:
   *   code 200 :  (Server is up and running)
   *   code 0 :  (Something is wrong)
   */
  def pingServer(
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/ping")
      .contentType("application/json")
      .response(asJson[Unit])

  /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 200 :  (list of mail orders)
   *   code 400 :  (invalid input, object invalid)
   *   code 409 :  (an existing item already exists)
   *   code 401 : ErrorResponse (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param mailOrder Inventory item to add
   */
  def placeMailOrder(apiKey: String)(mailOrder: Option[MailOrder] = None
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mail/order")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .body(mailOrder)
      .response(asJson[Unit])

  /**
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 :  (bad input parameter)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 404 : ErrorResponse (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param sendMailAdv 
   */
  def sendAdvMail(apiKey: String)(sendMailAdv: SendMailAdv
): Request[Either[ResponseError[Exception], GenericResponse], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mail/advsend")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .body(sendMailAdv)
      .response(asJson[GenericResponse])

  /**
   * Sends An email through one of your mail orders.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 :  (bad input parameter)
   *   code 401 : ErrorResponse (Unauthorized)
   *   code 404 : ErrorResponse (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param to The Contact whom is the primary recipient of this email.
   * @param from The contact whom is the this email is from.
   * @param subject The subject or title of the email
   * @param body The main email contents.
   */
  def sendMail(apiKey: String)(to: Option[String] = None, from: Option[String] = None, subject: Option[String] = None, body: Option[String] = None
): Request[Either[ResponseError[Exception], GenericResponse], Nothing] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/mail/send")
      .contentType("application/x-www-form-urlencoded")
      .header("X-API-KEY", apiKey)
      .body(Map(
        "to" -> to, 
        "from" -> from, 
        "subject" -> subject, 
        "body" -> body
      ))
      .response(asJson[GenericResponse])

  /**
   * Expected answers:
   *   code 200 :  (list of mail orders)
   *   code 401 : ErrorResponse (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def validateMailOrder(apiKey: String)(
): Request[Either[ResponseError[Exception], Unit], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mail/order")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .response(asJson[Unit])

  /**
   * By passing in the appropriate options, you can search for available inventory in the system 
   * 
   * Expected answers:
   *   code 200 : Seq[MailLog] (search results matching criteria)
   *   code 400 :  (bad input parameter)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param id The ID of your mail order this will be sent through.
   * @param searchString pass an optional search string for looking up inventory
   * @param skip number of records to skip for pagination
   * @param limit maximum number of records to return
   */
  def viewMailLogById(apiKey: String)(id: Option[Long] = None, searchString: Option[String] = None, skip: Option[Int] = None, limit: Option[Int] = None
): Request[Either[ResponseError[Exception], Seq[MailLog]], Nothing] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mail/log?id=${ id }&searchString=${ searchString }&skip=${ skip }&limit=${ limit }")
      .contentType("application/json")
      .header("X-API-KEY", apiKey)
      .response(asJson[Seq[MailLog]])

}

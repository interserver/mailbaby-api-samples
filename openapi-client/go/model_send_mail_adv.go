/*
MailBaby Email Delivery API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SendMailAdv Details for an Email
type SendMailAdv struct {
	// The subject or title of the email
	Subject string `json:"subject"`
	// The main email contents.
	Body string `json:"body"`
	From SendMailAdvFrom `json:"from"`
	// A list of destionation email addresses to send this to
	To []SendMailAdvToInner `json:"to"`
	// (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
	Replyto []SendMailAdvReplytoInner `json:"replyto,omitempty"`
	// (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
	Cc []SendMailAdvCcInner `json:"cc,omitempty"`
	// (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
	Bcc []SendMailAdvBccInner `json:"bcc,omitempty"`
	// (optional) File attachments to include in the email.  The file contents must be base64 encoded!
	Attachments []SendMailAdvAttachmentsInner `json:"attachments,omitempty"`
	// (optional)  ID of the Mail order within our system to use as the Mail Account.
	Id *int64 `json:"id,omitempty"`
}

// NewSendMailAdv instantiates a new SendMailAdv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendMailAdv(subject string, body string, from SendMailAdvFrom, to []SendMailAdvToInner) *SendMailAdv {
	this := SendMailAdv{}
	this.Subject = subject
	this.Body = body
	this.From = from
	this.To = to
	return &this
}

// NewSendMailAdvWithDefaults instantiates a new SendMailAdv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendMailAdvWithDefaults() *SendMailAdv {
	this := SendMailAdv{}
	return &this
}

// GetSubject returns the Subject field value
func (o *SendMailAdv) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *SendMailAdv) SetSubject(v string) {
	o.Subject = v
}

// GetBody returns the Body field value
func (o *SendMailAdv) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *SendMailAdv) SetBody(v string) {
	o.Body = v
}

// GetFrom returns the From field value
func (o *SendMailAdv) GetFrom() SendMailAdvFrom {
	if o == nil {
		var ret SendMailAdvFrom
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetFromOk() (*SendMailAdvFrom, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *SendMailAdv) SetFrom(v SendMailAdvFrom) {
	o.From = v
}

// GetTo returns the To field value
func (o *SendMailAdv) GetTo() []SendMailAdvToInner {
	if o == nil {
		var ret []SendMailAdvToInner
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetToOk() ([]SendMailAdvToInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *SendMailAdv) SetTo(v []SendMailAdvToInner) {
	o.To = v
}

// GetReplyto returns the Replyto field value if set, zero value otherwise.
func (o *SendMailAdv) GetReplyto() []SendMailAdvReplytoInner {
	if o == nil || o.Replyto == nil {
		var ret []SendMailAdvReplytoInner
		return ret
	}
	return o.Replyto
}

// GetReplytoOk returns a tuple with the Replyto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetReplytoOk() ([]SendMailAdvReplytoInner, bool) {
	if o == nil || o.Replyto == nil {
		return nil, false
	}
	return o.Replyto, true
}

// HasReplyto returns a boolean if a field has been set.
func (o *SendMailAdv) HasReplyto() bool {
	if o != nil && o.Replyto != nil {
		return true
	}

	return false
}

// SetReplyto gets a reference to the given []SendMailAdvReplytoInner and assigns it to the Replyto field.
func (o *SendMailAdv) SetReplyto(v []SendMailAdvReplytoInner) {
	o.Replyto = v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *SendMailAdv) GetCc() []SendMailAdvCcInner {
	if o == nil || o.Cc == nil {
		var ret []SendMailAdvCcInner
		return ret
	}
	return o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetCcOk() ([]SendMailAdvCcInner, bool) {
	if o == nil || o.Cc == nil {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *SendMailAdv) HasCc() bool {
	if o != nil && o.Cc != nil {
		return true
	}

	return false
}

// SetCc gets a reference to the given []SendMailAdvCcInner and assigns it to the Cc field.
func (o *SendMailAdv) SetCc(v []SendMailAdvCcInner) {
	o.Cc = v
}

// GetBcc returns the Bcc field value if set, zero value otherwise.
func (o *SendMailAdv) GetBcc() []SendMailAdvBccInner {
	if o == nil || o.Bcc == nil {
		var ret []SendMailAdvBccInner
		return ret
	}
	return o.Bcc
}

// GetBccOk returns a tuple with the Bcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetBccOk() ([]SendMailAdvBccInner, bool) {
	if o == nil || o.Bcc == nil {
		return nil, false
	}
	return o.Bcc, true
}

// HasBcc returns a boolean if a field has been set.
func (o *SendMailAdv) HasBcc() bool {
	if o != nil && o.Bcc != nil {
		return true
	}

	return false
}

// SetBcc gets a reference to the given []SendMailAdvBccInner and assigns it to the Bcc field.
func (o *SendMailAdv) SetBcc(v []SendMailAdvBccInner) {
	o.Bcc = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *SendMailAdv) GetAttachments() []SendMailAdvAttachmentsInner {
	if o == nil || o.Attachments == nil {
		var ret []SendMailAdvAttachmentsInner
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetAttachmentsOk() ([]SendMailAdvAttachmentsInner, bool) {
	if o == nil || o.Attachments == nil {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *SendMailAdv) HasAttachments() bool {
	if o != nil && o.Attachments != nil {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []SendMailAdvAttachmentsInner and assigns it to the Attachments field.
func (o *SendMailAdv) SetAttachments(v []SendMailAdvAttachmentsInner) {
	o.Attachments = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SendMailAdv) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SendMailAdv) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SendMailAdv) SetId(v int64) {
	o.Id = &v
}

func (o SendMailAdv) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if true {
		toSerialize["body"] = o.Body
	}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["to"] = o.To
	}
	if o.Replyto != nil {
		toSerialize["replyto"] = o.Replyto
	}
	if o.Cc != nil {
		toSerialize["cc"] = o.Cc
	}
	if o.Bcc != nil {
		toSerialize["bcc"] = o.Bcc
	}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableSendMailAdv struct {
	value *SendMailAdv
	isSet bool
}

func (v NullableSendMailAdv) Get() *SendMailAdv {
	return v.value
}

func (v *NullableSendMailAdv) Set(val *SendMailAdv) {
	v.value = val
	v.isSet = true
}

func (v NullableSendMailAdv) IsSet() bool {
	return v.isSet
}

func (v *NullableSendMailAdv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendMailAdv(val *SendMailAdv) *NullableSendMailAdv {
	return &NullableSendMailAdv{value: val, isSet: true}
}

func (v NullableSendMailAdv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendMailAdv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



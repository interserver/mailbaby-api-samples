/*
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASDefaultApi {
    OASClient client;

    public OASDefaultApi(OASClient client) {
        this.client = client;
    }

    public OASDefaultApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * displays a list of mail service orders
     * 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @return List<OASMailOrder>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASMailOrder> getMailOrders(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('id', (Long) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASMailOrder>) client.invoke(
            'GET', '/mail', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json', 'application/xml', 'text/plain' },
            new List<String>(),
            new List<String> { 'apiKeyAuth' },
            List<OASMailOrder>.class
        );
    }
    /**
     * Checks if the server is running
     * 
     * @throws OAS.ApiException if fails to make API call
     */
    public void pingServer() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/ping', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String>(),
            null
        );
    }
    /**
     * places a mail order
     * Adds an item to the system
     * @param oaSMailOrder Inventory item to add (optional)
     * @throws OAS.ApiException if fails to make API call
     */
    public void placeMailOrder(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'POST', '/mail/order',
            (OASMailOrder) params.get('oaSMailOrder'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKeyAuth' },
            null
        );
    }
    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param oaSSendMail  (required)
     * @return OASGenericResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGenericResponse sendAdvMailById(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSSendMail'), 'oaSSendMail');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGenericResponse) client.invoke(
            'POST', '/mail/advsend',
            (OASSendMail) params.get('oaSSendMail'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKeyAuth' },
            OASGenericResponse.class
        );
    }
    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param subject The Subject of the email (required)
     * @param body The contents of the email (required)
     * @param r_from The email address of who this email will be sent from. (required)
     * @param to The email address of who this email will be sent to. (required)
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param toName The name or title of who this email is being sent to. (optional)
     * @param fromName The name or title of who this email is being sent from. (optional)
     * @return OASGenericResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGenericResponse sendMailById(Map<String, Object> params) {
        client.assertNotNull(params.get('subject'), 'subject');
        client.assertNotNull(params.get('body'), 'body');
        client.assertNotNull(params.get('r_from'), 'r_from');
        client.assertNotNull(params.get('to'), 'to');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('subject', (String) params.get('subject')));
        form.addAll(client.makeParam('body', (String) params.get('body')));
        form.addAll(client.makeParam('from', (String) params.get('r_from')));
        form.addAll(client.makeParam('to', (String) params.get('to')));
        form.addAll(client.makeParam('id', (Integer) params.get('id')));
        form.addAll(client.makeParam('toName', (String) params.get('toName')));
        form.addAll(client.makeParam('fromName', (String) params.get('fromName')));

        return (OASGenericResponse) client.invoke(
            'POST', '/mail/send', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'apiKeyAuth' },
            OASGenericResponse.class
        );
    }
    /**
     * validatess order details before placing an order
     * 
     * @throws OAS.ApiException if fails to make API call
     */
    public void validateMailOrder() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/mail/order', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'apiKeyAuth' },
            null
        );
    }
    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for\navailable inventory in the system\n
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param searchString pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional)
     * @param r_limit maximum number of records to return (optional)
     * @return List<OASMailLog>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASMailLog> viewMailLogById(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('id', (Long) params.get('id')));
        query.addAll(client.makeParam('searchString', (String) params.get('searchString')));
        query.addAll(client.makeParam('skip', (Integer) params.get('skip')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASMailLog>) client.invoke(
            'GET', '/mail/log', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'apiKeyAuth' },
            List<OASMailLog>.class
        );
    }
}

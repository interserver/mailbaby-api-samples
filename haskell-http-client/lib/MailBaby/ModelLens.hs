{-
   Mail Baby API

   This is an API for accesssing the mail services.

   OpenAPI Version: 3.0.0
   Mail Baby API API version: 1.0.0
   Contact: detain@interserver.net
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : MailBaby.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module MailBaby.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import MailBaby.Model
import MailBaby.Core


-- * ErrorResponse

-- | 'errorResponseCode' Lens
errorResponseCodeL :: Lens_' ErrorResponse (Text)
errorResponseCodeL f ErrorResponse{..} = (\errorResponseCode -> ErrorResponse { errorResponseCode, ..} ) <$> f errorResponseCode
{-# INLINE errorResponseCodeL #-}

-- | 'errorResponseMessage' Lens
errorResponseMessageL :: Lens_' ErrorResponse (Text)
errorResponseMessageL f ErrorResponse{..} = (\errorResponseMessage -> ErrorResponse { errorResponseMessage, ..} ) <$> f errorResponseMessage
{-# INLINE errorResponseMessageL #-}



-- * GenericResponse

-- | 'genericResponseStatus' Lens
genericResponseStatusL :: Lens_' GenericResponse (Maybe Text)
genericResponseStatusL f GenericResponse{..} = (\genericResponseStatus -> GenericResponse { genericResponseStatus, ..} ) <$> f genericResponseStatus
{-# INLINE genericResponseStatusL #-}

-- | 'genericResponseStatusText' Lens
genericResponseStatusTextL :: Lens_' GenericResponse (Maybe Text)
genericResponseStatusTextL f GenericResponse{..} = (\genericResponseStatusText -> GenericResponse { genericResponseStatusText, ..} ) <$> f genericResponseStatusText
{-# INLINE genericResponseStatusTextL #-}



-- * MailAttachment

-- | 'mailAttachmentFilename' Lens
mailAttachmentFilenameL :: Lens_' MailAttachment (Maybe Text)
mailAttachmentFilenameL f MailAttachment{..} = (\mailAttachmentFilename -> MailAttachment { mailAttachmentFilename, ..} ) <$> f mailAttachmentFilename
{-# INLINE mailAttachmentFilenameL #-}

-- | 'mailAttachmentData' Lens
mailAttachmentDataL :: Lens_' MailAttachment (FilePath)
mailAttachmentDataL f MailAttachment{..} = (\mailAttachmentData -> MailAttachment { mailAttachmentData, ..} ) <$> f mailAttachmentData
{-# INLINE mailAttachmentDataL #-}



-- * MailContact

-- | 'mailContactEmail' Lens
mailContactEmailL :: Lens_' MailContact (Text)
mailContactEmailL f MailContact{..} = (\mailContactEmail -> MailContact { mailContactEmail, ..} ) <$> f mailContactEmail
{-# INLINE mailContactEmailL #-}

-- | 'mailContactName' Lens
mailContactNameL :: Lens_' MailContact (Maybe Text)
mailContactNameL f MailContact{..} = (\mailContactName -> MailContact { mailContactName, ..} ) <$> f mailContactName
{-# INLINE mailContactNameL #-}



-- * MailLog

-- | 'mailLogId' Lens
mailLogIdL :: Lens_' MailLog (Maybe Integer)
mailLogIdL f MailLog{..} = (\mailLogId -> MailLog { mailLogId, ..} ) <$> f mailLogId
{-# INLINE mailLogIdL #-}



-- * MailOrder

-- | 'mailOrderId' Lens
mailOrderIdL :: Lens_' MailOrder (Int)
mailOrderIdL f MailOrder{..} = (\mailOrderId -> MailOrder { mailOrderId, ..} ) <$> f mailOrderId
{-# INLINE mailOrderIdL #-}

-- | 'mailOrderStatus' Lens
mailOrderStatusL :: Lens_' MailOrder (Text)
mailOrderStatusL f MailOrder{..} = (\mailOrderStatus -> MailOrder { mailOrderStatus, ..} ) <$> f mailOrderStatus
{-# INLINE mailOrderStatusL #-}

-- | 'mailOrderUsername' Lens
mailOrderUsernameL :: Lens_' MailOrder (Text)
mailOrderUsernameL f MailOrder{..} = (\mailOrderUsername -> MailOrder { mailOrderUsername, ..} ) <$> f mailOrderUsername
{-# INLINE mailOrderUsernameL #-}

-- | 'mailOrderPassword' Lens
mailOrderPasswordL :: Lens_' MailOrder (Maybe Text)
mailOrderPasswordL f MailOrder{..} = (\mailOrderPassword -> MailOrder { mailOrderPassword, ..} ) <$> f mailOrderPassword
{-# INLINE mailOrderPasswordL #-}

-- | 'mailOrderComment' Lens
mailOrderCommentL :: Lens_' MailOrder (Maybe Text)
mailOrderCommentL f MailOrder{..} = (\mailOrderComment -> MailOrder { mailOrderComment, ..} ) <$> f mailOrderComment
{-# INLINE mailOrderCommentL #-}



-- * SendMail

-- | 'sendMailId' Lens
sendMailIdL :: Lens_' SendMail (Integer)
sendMailIdL f SendMail{..} = (\sendMailId -> SendMail { sendMailId, ..} ) <$> f sendMailId
{-# INLINE sendMailIdL #-}

-- | 'sendMailFrom' Lens
sendMailFromL :: Lens_' SendMail (MailContact)
sendMailFromL f SendMail{..} = (\sendMailFrom -> SendMail { sendMailFrom, ..} ) <$> f sendMailFrom
{-# INLINE sendMailFromL #-}

-- | 'sendMailTo' Lens
sendMailToL :: Lens_' SendMail ([MailContact])
sendMailToL f SendMail{..} = (\sendMailTo -> SendMail { sendMailTo, ..} ) <$> f sendMailTo
{-# INLINE sendMailToL #-}

-- | 'sendMailSubject' Lens
sendMailSubjectL :: Lens_' SendMail (Text)
sendMailSubjectL f SendMail{..} = (\sendMailSubject -> SendMail { sendMailSubject, ..} ) <$> f sendMailSubject
{-# INLINE sendMailSubjectL #-}

-- | 'sendMailBody' Lens
sendMailBodyL :: Lens_' SendMail (Text)
sendMailBodyL f SendMail{..} = (\sendMailBody -> SendMail { sendMailBody, ..} ) <$> f sendMailBody
{-# INLINE sendMailBodyL #-}

-- | 'sendMailReplyto' Lens
sendMailReplytoL :: Lens_' SendMail (Maybe [MailContact])
sendMailReplytoL f SendMail{..} = (\sendMailReplyto -> SendMail { sendMailReplyto, ..} ) <$> f sendMailReplyto
{-# INLINE sendMailReplytoL #-}

-- | 'sendMailCc' Lens
sendMailCcL :: Lens_' SendMail (Maybe [MailContact])
sendMailCcL f SendMail{..} = (\sendMailCc -> SendMail { sendMailCc, ..} ) <$> f sendMailCc
{-# INLINE sendMailCcL #-}

-- | 'sendMailBcc' Lens
sendMailBccL :: Lens_' SendMail (Maybe [MailContact])
sendMailBccL f SendMail{..} = (\sendMailBcc -> SendMail { sendMailBcc, ..} ) <$> f sendMailBcc
{-# INLINE sendMailBccL #-}

-- | 'sendMailAttachments' Lens
sendMailAttachmentsL :: Lens_' SendMail (Maybe [MailAttachment])
sendMailAttachmentsL f SendMail{..} = (\sendMailAttachments -> SendMail { sendMailAttachments, ..} ) <$> f sendMailAttachments
{-# INLINE sendMailAttachmentsL #-}



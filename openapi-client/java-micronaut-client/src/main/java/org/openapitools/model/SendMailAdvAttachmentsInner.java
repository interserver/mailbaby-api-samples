/*
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.File;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * A File attachment for an email
 */
@JsonPropertyOrder({
  SendMailAdvAttachmentsInner.JSON_PROPERTY_DATA,
  SendMailAdvAttachmentsInner.JSON_PROPERTY_FILENAME
})
@JsonTypeName("SendMailAdv_attachments_inner")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2023-01-03T15:05:55.262261-05:00[America/New_York]")
@Introspected
public class SendMailAdvAttachmentsInner {
    public static final String JSON_PROPERTY_DATA = "data";
    private File data;

    public static final String JSON_PROPERTY_FILENAME = "filename";
    private String filename;

    public SendMailAdvAttachmentsInner(File data) {
        this.data = data;
    }

    public SendMailAdvAttachmentsInner data(File data) {
        this.data = data;
        return this;
    }

    /**
     * Contents of the attached file (must be base64 encoded)
     * @return data
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public File getData() {
        return data;
    }

    @JsonProperty(JSON_PROPERTY_DATA)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setData(File data) {
        this.data = data;
    }

    public SendMailAdvAttachmentsInner filename(String filename) {
        this.filename = filename;
        return this;
    }

    /**
     * (optional) Filename to specify for the attachment.
     * @return filename
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_FILENAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getFilename() {
        return filename;
    }

    @JsonProperty(JSON_PROPERTY_FILENAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFilename(String filename) {
        this.filename = filename;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SendMailAdvAttachmentsInner sendMailAdvAttachmentsInner = (SendMailAdvAttachmentsInner) o;
        return Objects.equals(this.data, sendMailAdvAttachmentsInner.data) &&
            Objects.equals(this.filename, sendMailAdvAttachmentsInner.filename);
    }

    @Override
    public int hashCode() {
        return Objects.hash(data, filename);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SendMailAdvAttachmentsInner {\n");
        sb.append("    data: ").append(toIndentedString(data)).append("\n");
        sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EmailAddressesTypes - 
type EmailAddressesTypes struct {
	ArrayOfEmailAddressName *[]EmailAddressName
	String *string
}

// []EmailAddressNameAsEmailAddressesTypes is a convenience function that returns []EmailAddressName wrapped in EmailAddressesTypes
func ArrayOfEmailAddressNameAsEmailAddressesTypes(v *[]EmailAddressName) EmailAddressesTypes {
	return EmailAddressesTypes{
		ArrayOfEmailAddressName: v,
	}
}

// stringAsEmailAddressesTypes is a convenience function that returns string wrapped in EmailAddressesTypes
func StringAsEmailAddressesTypes(v *string) EmailAddressesTypes {
	return EmailAddressesTypes{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EmailAddressesTypes) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfEmailAddressName
	err = newStrictDecoder(data).Decode(&dst.ArrayOfEmailAddressName)
	if err == nil {
		jsonArrayOfEmailAddressName, _ := json.Marshal(dst.ArrayOfEmailAddressName)
		if string(jsonArrayOfEmailAddressName) == "{}" { // empty struct
			dst.ArrayOfEmailAddressName = nil
		} else {
			if err = validator.Validate(dst.ArrayOfEmailAddressName); err != nil {
				dst.ArrayOfEmailAddressName = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfEmailAddressName = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfEmailAddressName = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EmailAddressesTypes)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EmailAddressesTypes)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EmailAddressesTypes) MarshalJSON() ([]byte, error) {
	if src.ArrayOfEmailAddressName != nil {
		return json.Marshal(&src.ArrayOfEmailAddressName)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EmailAddressesTypes) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfEmailAddressName != nil {
		return obj.ArrayOfEmailAddressName
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EmailAddressesTypes) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfEmailAddressName != nil {
		return *obj.ArrayOfEmailAddressName
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableEmailAddressesTypes struct {
	value *EmailAddressesTypes
	isSet bool
}

func (v NullableEmailAddressesTypes) Get() *EmailAddressesTypes {
	return v.value
}

func (v *NullableEmailAddressesTypes) Set(val *EmailAddressesTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailAddressesTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailAddressesTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailAddressesTypes(val *EmailAddressesTypes) *NullableEmailAddressesTypes {
	return &NullableEmailAddressesTypes{value: val, isSet: true}
}

func (v NullableEmailAddressesTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailAddressesTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



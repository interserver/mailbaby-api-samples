# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MailBabyEmailDeliveryAPI.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias MailBabyEmailDeliveryAPI.Connection
  import MailBabyEmailDeliveryAPI.RequestBuilder


  @doc """
  displays a list of mail service orders

  ## Parameters

  - connection (MailBabyEmailDeliveryAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%GetMailOrders200ResponseInner{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_mail_orders(Tesla.Env.client, keyword()) :: {:ok, list(MailBabyEmailDeliveryAPI.Model.GetMailOrders200ResponseInner.t)} | {:ok, MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response.t} | {:error, Tesla.Env.t}
  def get_mail_orders(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mail")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%MailBabyEmailDeliveryAPI.Model.GetMailOrders200ResponseInner{}]},
      { 401, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}},
      { 404, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}}
    ])
  end

  @doc """
  Checks if the server is running

  ## Parameters

  - connection (MailBabyEmailDeliveryAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec ping_server(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def ping_server(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ping")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { :default, false}
    ])
  end

  @doc """
  Sends an Email with Advanced Options
  Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.

  ## Parameters

  - connection (MailBabyEmailDeliveryAPI.Connection): Connection to server
  - send_mail_adv (SendMailAdv): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, MailBabyEmailDeliveryAPI.Model.GenericResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec send_adv_mail(Tesla.Env.client, MailBabyEmailDeliveryAPI.Model.SendMailAdv.t, keyword()) :: {:ok, MailBabyEmailDeliveryAPI.Model.GenericResponse.t} | {:ok, MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response.t} | {:error, Tesla.Env.t}
  def send_adv_mail(connection, send_mail_adv, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/mail/advsend")
    |> add_param(:body, :body, send_mail_adv)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MailBabyEmailDeliveryAPI.Model.GenericResponse{}},
      { 400, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}},
      { 401, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}},
      { 404, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}}
    ])
  end

  @doc """
  Sends an Email
  Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 

  ## Parameters

  - connection (MailBabyEmailDeliveryAPI.Connection): Connection to server
  - to (String.t): The Contact whom is the primary recipient of this email.
  - from (String.t): The contact whom is the this email is from.
  - subject (String.t): The subject or title of the email
  - body (String.t): The main email contents.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, MailBabyEmailDeliveryAPI.Model.GenericResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec send_mail(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MailBabyEmailDeliveryAPI.Model.GenericResponse.t} | {:ok, MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response.t} | {:error, Tesla.Env.t}
  def send_mail(connection, to, from, subject, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/mail/send")
    |> add_param(:form, :to, to)
    |> add_param(:form, :from, from)
    |> add_param(:form, :subject, subject)
    |> add_param(:form, :body, body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MailBabyEmailDeliveryAPI.Model.GenericResponse{}},
      { 400, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}},
      { 401, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}},
      { 404, %MailBabyEmailDeliveryAPI.Model.GetMailOrders401Response{}}
    ])
  end

  @doc """
  displays the mail log
  By passing in the appropriate options, you can search for available inventory in the system 

  ## Parameters

  - connection (MailBabyEmailDeliveryAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :id (integer()): The ID of your mail order this will be sent through.
    - :search (String.t): pass an optional search string for looking up inventory
    - :skip (integer()): number of records to skip for pagination
    - :limit (integer()): maximum number of records to return
  ## Returns

  {:ok, MailBabyEmailDeliveryAPI.Model.MailLog.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec view_mail_log(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MailBabyEmailDeliveryAPI.Model.MailLog.t} | {:error, Tesla.Env.t}
  def view_mail_log(connection, opts \\ []) do
    optional_params = %{
      :id => :query,
      :search => :query,
      :skip => :query,
      :limit => :query
    }
    %{}
    |> method(:get)
    |> url("/mail/log")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MailBabyEmailDeliveryAPI.Model.MailLog{}},
      { 400, false}
    ])
  end
end

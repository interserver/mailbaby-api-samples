{-
   Mail Baby API
   This is an API for accesssing the mail services.

   The version of the OpenAPI document: 1.0.0
   Contact: detain@interserver.net

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( ErrorResponse
    , GenericResponse
    , MailAttachment
    , MailContact
    , MailLog
    , MailOrder
    , SendMail
    , encodeErrorResponse
    , encodeGenericResponse
    , encodeMailAttachment
    , encodeMailContact
    , encodeMailLog
    , encodeMailOrder
    , encodeSendMail
    , errorResponseDecoder
    , genericResponseDecoder
    , mailAttachmentDecoder
    , mailContactDecoder
    , mailLogDecoder
    , mailOrderDecoder
    , sendMailDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias ErrorResponse =
    { code : String
    , message : String
    }


type alias GenericResponse =
    { status : Maybe String
    , statusText : Maybe String
    }


{-| A File attachment for an email
-}
type alias MailAttachment =
    { filename : Maybe String
    , data : String
    }


{-| An Email Contact
-}
type alias MailContact =
    { email : String
    , name : Maybe String
    }


{-| Mail Order Details
-}
type alias MailLog =
    { id : Maybe Int
    }


type alias MailOrder =
    { id : Int
    , status : String
    , username : String
    , password : Maybe String
    , comment : Maybe String
    }


{-| Details for an Email
-}
type alias SendMail =
    { id : Int
    , from : MailContact
    , to : List (MailContact)
    , subject : String
    , body : String
    , replyto : Maybe (List (MailContact))
    , cc : Maybe (List (MailContact))
    , bcc : Maybe (List (MailContact))
    , attachments : Maybe (List (MailAttachment))
    }


-- ENCODER


encodeErrorResponse : ErrorResponse -> Json.Encode.Value
encodeErrorResponse =
    encodeObject << encodeErrorResponsePairs


encodeErrorResponseWithTag : ( String, String ) -> ErrorResponse -> Json.Encode.Value
encodeErrorResponseWithTag (tagField, tag) model =
    encodeObject (encodeErrorResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorResponsePairs : ErrorResponse -> List EncodedField
encodeErrorResponsePairs model =
    let
        pairs =
            [ encode "code" Json.Encode.string model.code
            , encode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeGenericResponse : GenericResponse -> Json.Encode.Value
encodeGenericResponse =
    encodeObject << encodeGenericResponsePairs


encodeGenericResponseWithTag : ( String, String ) -> GenericResponse -> Json.Encode.Value
encodeGenericResponseWithTag (tagField, tag) model =
    encodeObject (encodeGenericResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenericResponsePairs : GenericResponse -> List EncodedField
encodeGenericResponsePairs model =
    let
        pairs =
            [ maybeEncode "status" Json.Encode.string model.status
            , maybeEncode "status_text" Json.Encode.string model.statusText
            ]
    in
    pairs


encodeMailAttachment : MailAttachment -> Json.Encode.Value
encodeMailAttachment =
    encodeObject << encodeMailAttachmentPairs


encodeMailAttachmentWithTag : ( String, String ) -> MailAttachment -> Json.Encode.Value
encodeMailAttachmentWithTag (tagField, tag) model =
    encodeObject (encodeMailAttachmentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMailAttachmentPairs : MailAttachment -> List EncodedField
encodeMailAttachmentPairs model =
    let
        pairs =
            [ maybeEncode "filename" Json.Encode.string model.filename
            , encode "data" Json.Decode.string model.data
            ]
    in
    pairs


encodeMailContact : MailContact -> Json.Encode.Value
encodeMailContact =
    encodeObject << encodeMailContactPairs


encodeMailContactWithTag : ( String, String ) -> MailContact -> Json.Encode.Value
encodeMailContactWithTag (tagField, tag) model =
    encodeObject (encodeMailContactPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMailContactPairs : MailContact -> List EncodedField
encodeMailContactPairs model =
    let
        pairs =
            [ encode "email" Json.Encode.string model.email
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeMailLog : MailLog -> Json.Encode.Value
encodeMailLog =
    encodeObject << encodeMailLogPairs


encodeMailLogWithTag : ( String, String ) -> MailLog -> Json.Encode.Value
encodeMailLogWithTag (tagField, tag) model =
    encodeObject (encodeMailLogPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMailLogPairs : MailLog -> List EncodedField
encodeMailLogPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeMailOrder : MailOrder -> Json.Encode.Value
encodeMailOrder =
    encodeObject << encodeMailOrderPairs


encodeMailOrderWithTag : ( String, String ) -> MailOrder -> Json.Encode.Value
encodeMailOrderWithTag (tagField, tag) model =
    encodeObject (encodeMailOrderPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMailOrderPairs : MailOrder -> List EncodedField
encodeMailOrderPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "status" Json.Encode.string model.status
            , encode "username" Json.Encode.string model.username
            , maybeEncode "password" Json.Encode.string model.password
            , maybeEncode "comment" Json.Encode.string model.comment
            ]
    in
    pairs


encodeSendMail : SendMail -> Json.Encode.Value
encodeSendMail =
    encodeObject << encodeSendMailPairs


encodeSendMailWithTag : ( String, String ) -> SendMail -> Json.Encode.Value
encodeSendMailWithTag (tagField, tag) model =
    encodeObject (encodeSendMailPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSendMailPairs : SendMail -> List EncodedField
encodeSendMailPairs model =
    let
        pairs =
            [ encode "id" Json.Encode.int model.id
            , encode "from" encodeMailContact model.from
            , encode "to" (Json.Encode.list encodeMailContact) model.to
            , encode "subject" Json.Encode.string model.subject
            , encode "body" Json.Encode.string model.body
            , maybeEncode "replyto" (Json.Encode.list encodeMailContact) model.replyto
            , maybeEncode "cc" (Json.Encode.list encodeMailContact) model.cc
            , maybeEncode "bcc" (Json.Encode.list encodeMailContact) model.bcc
            , maybeEncode "attachments" (Json.Encode.list encodeMailAttachment) model.attachments
            ]
    in
    pairs


-- DECODER


errorResponseDecoder : Json.Decode.Decoder ErrorResponse
errorResponseDecoder =
    Json.Decode.succeed ErrorResponse
        |> decode "code" Json.Decode.string 
        |> decode "message" Json.Decode.string 


genericResponseDecoder : Json.Decode.Decoder GenericResponse
genericResponseDecoder =
    Json.Decode.succeed GenericResponse
        |> maybeDecode "status" Json.Decode.string Nothing
        |> maybeDecode "status_text" Json.Decode.string Nothing


mailAttachmentDecoder : Json.Decode.Decoder MailAttachment
mailAttachmentDecoder =
    Json.Decode.succeed MailAttachment
        |> maybeDecode "filename" Json.Decode.string Nothing
        |> decode "data" Json.Decode.string 


mailContactDecoder : Json.Decode.Decoder MailContact
mailContactDecoder =
    Json.Decode.succeed MailContact
        |> decode "email" Json.Decode.string 
        |> maybeDecode "name" Json.Decode.string Nothing


mailLogDecoder : Json.Decode.Decoder MailLog
mailLogDecoder =
    Json.Decode.succeed MailLog
        |> maybeDecode "id" Json.Decode.int Nothing


mailOrderDecoder : Json.Decode.Decoder MailOrder
mailOrderDecoder =
    Json.Decode.succeed MailOrder
        |> decode "id" Json.Decode.int 
        |> decode "status" Json.Decode.string 
        |> decode "username" Json.Decode.string 
        |> maybeDecode "password" Json.Decode.string Nothing
        |> maybeDecode "comment" Json.Decode.string Nothing


sendMailDecoder : Json.Decode.Decoder SendMail
sendMailDecoder =
    Json.Decode.succeed SendMail
        |> decode "id" Json.Decode.int 
        |> decode "from" mailContactDecoder 
        |> decode "to" (Json.Decode.list mailContactDecoder) 
        |> decode "subject" Json.Decode.string 
        |> decode "body" Json.Decode.string 
        |> maybeDecode "replyto" (Json.Decode.list mailContactDecoder) Nothing
        |> maybeDecode "cc" (Json.Decode.list mailContactDecoder) Nothing
        |> maybeDecode "bcc" (Json.Decode.list mailContactDecoder) Nothing
        |> maybeDecode "attachments" (Json.Decode.list mailAttachmentDecoder) Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f
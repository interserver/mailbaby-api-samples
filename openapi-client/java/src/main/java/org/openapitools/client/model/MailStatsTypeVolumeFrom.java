/*
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import org.openapitools.client.JSON;

/**
 * MailStatsTypeVolumeFrom
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T16:11:55.185987842-04:00[America/New_York]", comments = "Generator version: 7.17.0-SNAPSHOT")
public class MailStatsTypeVolumeFrom {
  public static final String SERIALIZED_NAME_BILLING_AT_SOMEDOMAIN_COM = "billing@somedomain.com";
  @SerializedName(SERIALIZED_NAME_BILLING_AT_SOMEDOMAIN_COM)
  @javax.annotation.Nullable
  private Integer billingAtSomedomainCom;

  public static final String SERIALIZED_NAME_SALES_AT_SOMEDOMAIN_COM = "sales@somedomain.com";
  @SerializedName(SERIALIZED_NAME_SALES_AT_SOMEDOMAIN_COM)
  @javax.annotation.Nullable
  private Integer salesAtSomedomainCom;

  public MailStatsTypeVolumeFrom() {
  }

  public MailStatsTypeVolumeFrom billingAtSomedomainCom(@javax.annotation.Nullable Integer billingAtSomedomainCom) {
    this.billingAtSomedomainCom = billingAtSomedomainCom;
    return this;
  }

  /**
   * Get billingAtSomedomainCom
   * @return billingAtSomedomainCom
   */
  @javax.annotation.Nullable
  public Integer getBillingAtSomedomainCom() {
    return billingAtSomedomainCom;
  }

  public void setBillingAtSomedomainCom(@javax.annotation.Nullable Integer billingAtSomedomainCom) {
    this.billingAtSomedomainCom = billingAtSomedomainCom;
  }


  public MailStatsTypeVolumeFrom salesAtSomedomainCom(@javax.annotation.Nullable Integer salesAtSomedomainCom) {
    this.salesAtSomedomainCom = salesAtSomedomainCom;
    return this;
  }

  /**
   * Get salesAtSomedomainCom
   * @return salesAtSomedomainCom
   */
  @javax.annotation.Nullable
  public Integer getSalesAtSomedomainCom() {
    return salesAtSomedomainCom;
  }

  public void setSalesAtSomedomainCom(@javax.annotation.Nullable Integer salesAtSomedomainCom) {
    this.salesAtSomedomainCom = salesAtSomedomainCom;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailStatsTypeVolumeFrom mailStatsTypeVolumeFrom = (MailStatsTypeVolumeFrom) o;
    return Objects.equals(this.billingAtSomedomainCom, mailStatsTypeVolumeFrom.billingAtSomedomainCom) &&
        Objects.equals(this.salesAtSomedomainCom, mailStatsTypeVolumeFrom.salesAtSomedomainCom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAtSomedomainCom, salesAtSomedomainCom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailStatsTypeVolumeFrom {\n");
    sb.append("    billingAtSomedomainCom: ").append(toIndentedString(billingAtSomedomainCom)).append("\n");
    sb.append("    salesAtSomedomainCom: ").append(toIndentedString(salesAtSomedomainCom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("billing@somedomain.com", "sales@somedomain.com"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MailStatsTypeVolumeFrom
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MailStatsTypeVolumeFrom.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in MailStatsTypeVolumeFrom is not found in the empty JSON string", MailStatsTypeVolumeFrom.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MailStatsTypeVolumeFrom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `MailStatsTypeVolumeFrom` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailStatsTypeVolumeFrom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailStatsTypeVolumeFrom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailStatsTypeVolumeFrom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailStatsTypeVolumeFrom.class));

       return (TypeAdapter<T>) new TypeAdapter<MailStatsTypeVolumeFrom>() {
           @Override
           public void write(JsonWriter out, MailStatsTypeVolumeFrom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MailStatsTypeVolumeFrom read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MailStatsTypeVolumeFrom given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MailStatsTypeVolumeFrom
   * @throws IOException if the JSON string is invalid with respect to MailStatsTypeVolumeFrom
   */
  public static MailStatsTypeVolumeFrom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailStatsTypeVolumeFrom.class);
  }

  /**
   * Convert an instance of MailStatsTypeVolumeFrom to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


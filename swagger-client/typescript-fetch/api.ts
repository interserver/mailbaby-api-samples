/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.mailbaby.net".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    text?: string;
}
/**
 * A File attachment for an email
 * @export
 * @interface MailAttachment
 */
export interface MailAttachment {
    /**
     * Optional filename to specify for the attachment.
     * @type {string}
     * @memberof MailAttachment
     */
    filename?: string;
    /**
     * Contents of the attached file
     * @type {Blob}
     * @memberof MailAttachment
     */
    data: Blob;
}
/**
 * An Email Contact
 * @export
 * @interface MailContact
 */
export interface MailContact {
    /**
     * The email address
     * @type {string}
     * @memberof MailContact
     */
    email: string;
    /**
     * Optional contact name
     * @type {string}
     * @memberof MailContact
     */
    name?: string;
}
/**
 * Mail Order Details
 * @export
 * @interface MailLog
 */
export interface MailLog {
    /**
     * 
     * @type {number}
     * @memberof MailLog
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface MailOrder
 */
export interface MailOrder {
    /**
     * 
     * @type {number}
     * @memberof MailOrder
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    comment?: string;
}
/**
 * 
 * @export
 */
export type MailOrders = Array<MailOrder>
/**
 * Details for an Email
 * @export
 * @interface SendMail
 */
export interface SendMail {
    /**
     * The Contact whom is the primary recipient of this email.
     * @type {string}
     * @memberof SendMail
     */
    to: string;
    /**
     * The contact whom is the this email is from.
     * @type {string}
     * @memberof SendMail
     */
    from: string;
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMail
     */
    subject: string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMail
     */
    body: string;
}
/**
 * Details for an Email
 * @export
 * @interface SendMailAdv
 */
export interface SendMailAdv {
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMailAdv
     */
    subject: string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMailAdv
     */
    body: string;
    /**
     * The contact whom is the this email is from.
     * @type {Array<SendMailAdvFrom>}
     * @memberof SendMailAdv
     */
    from: Array<SendMailAdvFrom>;
    /**
     * The Contact whom is the primary recipient of this email.
     * @type {Array<MailContact>}
     * @memberof SendMailAdv
     */
    to: Array<MailContact>;
    /**
     * The ID of the Mail order within our system to use as the Mail Account.
     * @type {number}
     * @memberof SendMailAdv
     */
    id: number;
    /**
     * Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
     * @type {Array<MailContact>}
     * @memberof SendMailAdv
     */
    replyto?: Array<MailContact>;
    /**
     * Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
     * @type {Array<MailContact>}
     * @memberof SendMailAdv
     */
    cc?: Array<MailContact>;
    /**
     * Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
     * @type {Array<MailContact>}
     * @memberof SendMailAdv
     */
    bcc?: Array<MailContact>;
    /**
     * Optional file attachments to include in the email
     * @type {Array<MailAttachment>}
     * @memberof SendMailAdv
     */
    attachments?: Array<MailAttachment>;
}
/**
 * An Email Contact
 * @export
 * @interface SendMailAdvFrom
 */
export interface SendMailAdvFrom {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvFrom
     */
    email: string;
    /**
     * Optional contact name
     * @type {string}
     * @memberof SendMailAdvFrom
     */
    name?: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(id?: number, options: any = {}): FetchArgs {
            const localVarPath = `/mail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options: any = {}): FetchArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [body] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder(body?: MailOrder, options: any = {}): FetchArgs {
            const localVarPath = `/mail/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MailOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {SendMailAdv} body 
         * @param {string} subject 
         * @param {string} body 
         * @param {Array<SendMailAdvFrom>} from 
         * @param {Array<MailContact>} to 
         * @param {number} id 
         * @param {Array<MailContact>} replyto 
         * @param {Array<MailContact>} cc 
         * @param {Array<MailContact>} bcc 
         * @param {Array<MailAttachment>} attachments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdvMail(body: SendMailAdv, subject: string, body: string, from: Array<SendMailAdvFrom>, to: Array<MailContact>, id: number, replyto: Array<MailContact>, cc: Array<MailContact>, bcc: Array<MailContact>, attachments: Array<MailAttachment>, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'subject' is not null or undefined
            if (subject === null || subject === undefined) {
                throw new RequiredError('subject','Required parameter subject was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'replyto' is not null or undefined
            if (replyto === null || replyto === undefined) {
                throw new RequiredError('replyto','Required parameter replyto was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'cc' is not null or undefined
            if (cc === null || cc === undefined) {
                throw new RequiredError('cc','Required parameter cc was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'bcc' is not null or undefined
            if (bcc === null || bcc === undefined) {
                throw new RequiredError('bcc','Required parameter bcc was null or undefined when calling sendAdvMail.');
            }
            // verify required parameter 'attachments' is not null or undefined
            if (attachments === null || attachments === undefined) {
                throw new RequiredError('attachments','Required parameter attachments was null or undefined when calling sendAdvMail.');
            }
            const localVarPath = `/mail/advsend`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (subject !== undefined) {
                localVarFormParams.set('subject', subject as any);
            }

            if (body !== undefined) {
                localVarFormParams.set('body', body as any);
            }

            if (from) {
                from.forEach((element) => {
                    localVarFormParams.append('from', element as any);
                })
            }

            if (to) {
                to.forEach((element) => {
                    localVarFormParams.append('to', element as any);
                })
            }

            if (id !== undefined) {
                localVarFormParams.set('id', id as any);
            }

            if (replyto) {
                replyto.forEach((element) => {
                    localVarFormParams.append('replyto', element as any);
                })
            }

            if (cc) {
                cc.forEach((element) => {
                    localVarFormParams.append('cc', element as any);
                })
            }

            if (bcc) {
                bcc.forEach((element) => {
                    localVarFormParams.append('bcc', element as any);
                })
            }

            if (attachments) {
                attachments.forEach((element) => {
                    localVarFormParams.append('attachments', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            const needsSerialization = (<any>"SendMailAdv" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {string} to 
         * @param {string} from 
         * @param {string} subject 
         * @param {string} body 
         * @param {SendMail} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail(to: string, from: string, subject: string, body: string, body: SendMail, options: any = {}): FetchArgs {
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling sendMail.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling sendMail.');
            }
            // verify required parameter 'subject' is not null or undefined
            if (subject === null || subject === undefined) {
                throw new RequiredError('subject','Required parameter subject was null or undefined when calling sendMail.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendMail.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendMail.');
            }
            const localVarPath = `/mail/send`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (to !== undefined) {
                localVarFormParams.set('to', to as any);
            }

            if (from !== undefined) {
                localVarFormParams.set('from', from as any);
            }

            if (subject !== undefined) {
                localVarFormParams.set('subject', subject as any);
            }

            if (body !== undefined) {
                localVarFormParams.set('body', body as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            const needsSerialization = (<any>"SendMail" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder(options: any = {}): FetchArgs {
            const localVarPath = `/mail/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLog(id?: number, searchString?: string, skip?: number, limit?: number, options: any = {}): FetchArgs {
            const localVarPath = `/mail/log`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(id?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MailOrders> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getMailOrders(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).pingServer(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [body] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder(body?: MailOrder, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).placeMailOrder(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {SendMailAdv} body 
         * @param {string} subject 
         * @param {string} body 
         * @param {Array<SendMailAdvFrom>} from 
         * @param {Array<MailContact>} to 
         * @param {number} id 
         * @param {Array<MailContact>} replyto 
         * @param {Array<MailContact>} cc 
         * @param {Array<MailContact>} bcc 
         * @param {Array<MailAttachment>} attachments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdvMail(body: SendMailAdv, subject: string, body: string, from: Array<SendMailAdvFrom>, to: Array<MailContact>, id: number, replyto: Array<MailContact>, cc: Array<MailContact>, bcc: Array<MailContact>, attachments: Array<MailAttachment>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GenericResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).sendAdvMail(body, subject, body, from, to, id, replyto, cc, bcc, attachments, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {string} to 
         * @param {string} from 
         * @param {string} subject 
         * @param {string} body 
         * @param {SendMail} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail(to: string, from: string, subject: string, body: string, body: SendMail, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GenericResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).sendMail(to, from, subject, body, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).validateMailOrder(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLog(id?: number, searchString?: string, skip?: number, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MailLog>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).viewMailLog(id, searchString, skip, limit, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(id?: number, options?: any) {
            return DefaultApiFp(configuration).getMailOrders(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options?: any) {
            return DefaultApiFp(configuration).pingServer(options)(fetch, basePath);
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [body] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder(body?: MailOrder, options?: any) {
            return DefaultApiFp(configuration).placeMailOrder(body, options)(fetch, basePath);
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {SendMailAdv} body 
         * @param {string} subject 
         * @param {string} body 
         * @param {Array<SendMailAdvFrom>} from 
         * @param {Array<MailContact>} to 
         * @param {number} id 
         * @param {Array<MailContact>} replyto 
         * @param {Array<MailContact>} cc 
         * @param {Array<MailContact>} bcc 
         * @param {Array<MailAttachment>} attachments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdvMail(body: SendMailAdv, subject: string, body: string, from: Array<SendMailAdvFrom>, to: Array<MailContact>, id: number, replyto: Array<MailContact>, cc: Array<MailContact>, bcc: Array<MailContact>, attachments: Array<MailAttachment>, options?: any) {
            return DefaultApiFp(configuration).sendAdvMail(body, subject, body, from, to, id, replyto, cc, bcc, attachments, options)(fetch, basePath);
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {string} to 
         * @param {string} from 
         * @param {string} subject 
         * @param {string} body 
         * @param {SendMail} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail(to: string, from: string, subject: string, body: string, body: SendMail, options?: any) {
            return DefaultApiFp(configuration).sendMail(to, from, subject, body, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder(options?: any) {
            return DefaultApiFp(configuration).validateMailOrder(options)(fetch, basePath);
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLog(id?: number, searchString?: string, skip?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).viewMailLog(id, searchString, skip, limit, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary displays a list of mail service orders
     * @param {number} [id] The ID of your mail order this will be sent through.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMailOrders(id?: number, options?: any) {
        return DefaultApiFp(this.configuration).getMailOrders(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Checks if the server is running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingServer(options?: any) {
        return DefaultApiFp(this.configuration).pingServer(options)(this.fetch, this.basePath);
    }

    /**
     * Adds an item to the system
     * @summary places a mail order
     * @param {MailOrder} [body] Inventory item to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public placeMailOrder(body?: MailOrder, options?: any) {
        return DefaultApiFp(this.configuration).placeMailOrder(body, options)(this.fetch, this.basePath);
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @summary Sends an Email with Advanced Options
     * @param {SendMailAdv} body 
     * @param {string} subject 
     * @param {string} body 
     * @param {Array<SendMailAdvFrom>} from 
     * @param {Array<MailContact>} to 
     * @param {number} id 
     * @param {Array<MailContact>} replyto 
     * @param {Array<MailContact>} cc 
     * @param {Array<MailContact>} bcc 
     * @param {Array<MailAttachment>} attachments 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAdvMail(body: SendMailAdv, subject: string, body: string, from: Array<SendMailAdvFrom>, to: Array<MailContact>, id: number, replyto: Array<MailContact>, cc: Array<MailContact>, bcc: Array<MailContact>, attachments: Array<MailAttachment>, options?: any) {
        return DefaultApiFp(this.configuration).sendAdvMail(body, subject, body, from, to, id, replyto, cc, bcc, attachments, options)(this.fetch, this.basePath);
    }

    /**
     * Sends An email through one of your mail orders.
     * @summary Sends an Email
     * @param {string} to 
     * @param {string} from 
     * @param {string} subject 
     * @param {string} body 
     * @param {SendMail} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendMail(to: string, from: string, subject: string, body: string, body: SendMail, options?: any) {
        return DefaultApiFp(this.configuration).sendMail(to, from, subject, body, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary validatess order details before placing an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public validateMailOrder(options?: any) {
        return DefaultApiFp(this.configuration).validateMailOrder(options)(this.fetch, this.basePath);
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @summary displays the mail log
     * @param {number} [id] The ID of your mail order this will be sent through.
     * @param {string} [searchString] pass an optional search string for looking up inventory
     * @param {number} [skip] number of records to skip for pagination
     * @param {number} [limit] maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewMailLog(id?: number, searchString?: string, skip?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).viewMailLog(id, searchString, skip, limit, options)(this.fetch, this.basePath);
    }

}

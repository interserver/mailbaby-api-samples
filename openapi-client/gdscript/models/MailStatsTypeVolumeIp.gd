extends Resource
class_name MailStatsTypeVolumeIp

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# MailStatsTypeVolumeIp Model


# Required: False
# isArray: false
@export var 1Period1Period1Period1: int:
	set(value):
		__1Period1Period1Period1__was__set = true
		1Period1Period1Period1 = value
var __1Period1Period1Period1__was__set := false

# Required: False
# isArray: false
@export var 2Period2Period2Period2: int:
	set(value):
		__2Period2Period2Period2__was__set = true
		2Period2Period2Period2 = value
var __2Period2Period2Period2__was__set := false

# Required: False
# isArray: false
@export var 3Period3Period3Period3: int:
	set(value):
		__3Period3Period3Period3__was__set = true
		3Period3Period3Period3 = value
var __3Period3Period3Period3__was__set := false

# Required: False
# isArray: false
@export var 4Period4Period4Period4: int:
	set(value):
		__4Period4Period4Period4__was__set = true
		4Period4Period4Period4 = value
var __4Period4Period4Period4__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__1Period1Period1Period1__was__set:
		bzz_dictionary["1Period1Period1Period1"] = self.1Period1Period1Period1
	if self.__2Period2Period2Period2__was__set:
		bzz_dictionary["2Period2Period2Period2"] = self.2Period2Period2Period2
	if self.__3Period3Period3Period3__was__set:
		bzz_dictionary["3Period3Period3Period3"] = self.3Period3Period3Period3
	if self.__4Period4Period4Period4__was__set:
		bzz_dictionary["4Period4Period4Period4"] = self.4Period4Period4Period4
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("1Period1Period1Period1"):
		me.1Period1Period1Period1 = from_dict["1Period1Period1Period1"]
	if from_dict.has("2Period2Period2Period2"):
		me.2Period2Period2Period2 = from_dict["2Period2Period2Period2"]
	if from_dict.has("3Period3Period3Period3"):
		me.3Period3Period3Period3 = from_dict["3Period3Period3Period3"]
	if from_dict.has("4Period4Period4Period4"):
		me.4Period4Period4Period4 = from_dict["4Period4Period4Period4"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


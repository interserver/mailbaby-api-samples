/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMailStatsType_volume_ip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMailStatsType_volume_ip::OAIMailStatsType_volume_ip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMailStatsType_volume_ip::OAIMailStatsType_volume_ip() {
    this->initializeModel();
}

OAIMailStatsType_volume_ip::~OAIMailStatsType_volume_ip() {}

void OAIMailStatsType_volume_ip::initializeModel() {

    m_r_1_1_1_1_isSet = false;
    m_r_1_1_1_1_isValid = false;

    m_r_2_2_2_2_isSet = false;
    m_r_2_2_2_2_isValid = false;

    m_r_3_3_3_3_isSet = false;
    m_r_3_3_3_3_isValid = false;

    m_r_4_4_4_4_isSet = false;
    m_r_4_4_4_4_isValid = false;
}

void OAIMailStatsType_volume_ip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMailStatsType_volume_ip::fromJsonObject(QJsonObject json) {

    m_r_1_1_1_1_isValid = ::OpenAPI::fromJsonValue(m_r_1_1_1_1, json[QString("1.1.1.1")]);
    m_r_1_1_1_1_isSet = !json[QString("1.1.1.1")].isNull() && m_r_1_1_1_1_isValid;

    m_r_2_2_2_2_isValid = ::OpenAPI::fromJsonValue(m_r_2_2_2_2, json[QString("2.2.2.2")]);
    m_r_2_2_2_2_isSet = !json[QString("2.2.2.2")].isNull() && m_r_2_2_2_2_isValid;

    m_r_3_3_3_3_isValid = ::OpenAPI::fromJsonValue(m_r_3_3_3_3, json[QString("3.3.3.3")]);
    m_r_3_3_3_3_isSet = !json[QString("3.3.3.3")].isNull() && m_r_3_3_3_3_isValid;

    m_r_4_4_4_4_isValid = ::OpenAPI::fromJsonValue(m_r_4_4_4_4, json[QString("4.4.4.4")]);
    m_r_4_4_4_4_isSet = !json[QString("4.4.4.4")].isNull() && m_r_4_4_4_4_isValid;
}

QString OAIMailStatsType_volume_ip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMailStatsType_volume_ip::asJsonObject() const {
    QJsonObject obj;
    if (m_r_1_1_1_1_isSet) {
        obj.insert(QString("1.1.1.1"), ::OpenAPI::toJsonValue(m_r_1_1_1_1));
    }
    if (m_r_2_2_2_2_isSet) {
        obj.insert(QString("2.2.2.2"), ::OpenAPI::toJsonValue(m_r_2_2_2_2));
    }
    if (m_r_3_3_3_3_isSet) {
        obj.insert(QString("3.3.3.3"), ::OpenAPI::toJsonValue(m_r_3_3_3_3));
    }
    if (m_r_4_4_4_4_isSet) {
        obj.insert(QString("4.4.4.4"), ::OpenAPI::toJsonValue(m_r_4_4_4_4));
    }
    return obj;
}

qint32 OAIMailStatsType_volume_ip::getR1111() const {
    return m_r_1_1_1_1;
}
void OAIMailStatsType_volume_ip::setR1111(const qint32 &r_1_1_1_1) {
    m_r_1_1_1_1 = r_1_1_1_1;
    m_r_1_1_1_1_isSet = true;
}

bool OAIMailStatsType_volume_ip::is_r_1_1_1_1_Set() const{
    return m_r_1_1_1_1_isSet;
}

bool OAIMailStatsType_volume_ip::is_r_1_1_1_1_Valid() const{
    return m_r_1_1_1_1_isValid;
}

qint32 OAIMailStatsType_volume_ip::getR2222() const {
    return m_r_2_2_2_2;
}
void OAIMailStatsType_volume_ip::setR2222(const qint32 &r_2_2_2_2) {
    m_r_2_2_2_2 = r_2_2_2_2;
    m_r_2_2_2_2_isSet = true;
}

bool OAIMailStatsType_volume_ip::is_r_2_2_2_2_Set() const{
    return m_r_2_2_2_2_isSet;
}

bool OAIMailStatsType_volume_ip::is_r_2_2_2_2_Valid() const{
    return m_r_2_2_2_2_isValid;
}

qint32 OAIMailStatsType_volume_ip::getR3333() const {
    return m_r_3_3_3_3;
}
void OAIMailStatsType_volume_ip::setR3333(const qint32 &r_3_3_3_3) {
    m_r_3_3_3_3 = r_3_3_3_3;
    m_r_3_3_3_3_isSet = true;
}

bool OAIMailStatsType_volume_ip::is_r_3_3_3_3_Set() const{
    return m_r_3_3_3_3_isSet;
}

bool OAIMailStatsType_volume_ip::is_r_3_3_3_3_Valid() const{
    return m_r_3_3_3_3_isValid;
}

qint32 OAIMailStatsType_volume_ip::getR4444() const {
    return m_r_4_4_4_4;
}
void OAIMailStatsType_volume_ip::setR4444(const qint32 &r_4_4_4_4) {
    m_r_4_4_4_4 = r_4_4_4_4;
    m_r_4_4_4_4_isSet = true;
}

bool OAIMailStatsType_volume_ip::is_r_4_4_4_4_Set() const{
    return m_r_4_4_4_4_isSet;
}

bool OAIMailStatsType_volume_ip::is_r_4_4_4_4_Valid() const{
    return m_r_4_4_4_4_isValid;
}

bool OAIMailStatsType_volume_ip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_1_1_1_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_2_2_2_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_3_3_3_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_4_4_4_4_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMailStatsType_volume_ip::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

/* tslint:disable */
/* eslint-disable */
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A mail order record
 * @export
 * @interface MailOrder
 */
export interface MailOrder {
    /**
     * The ID of the order.
     * @type {number}
     * @memberof MailOrder
     */
    id: number;
    /**
     * The order status.
     * @type {string}
     * @memberof MailOrder
     */
    status: string;
    /**
     * The username to use for this order.
     * @type {string}
     * @memberof MailOrder
     */
    username: string;
    /**
     * Optional order comment.
     * @type {string}
     * @memberof MailOrder
     */
    comment?: string;
}

/**
 * Check if a given object implements the MailOrder interface.
 */
export function instanceOfMailOrder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "username" in value;

    return isInstance;
}

export function MailOrderFromJSON(json: any): MailOrder {
    return MailOrderFromJSONTyped(json, false);
}

export function MailOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): MailOrder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'status': json['status'],
        'username': json['username'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
    };
}

export function MailOrderToJSON(value?: MailOrder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'status': value.status,
        'username': value.username,
        'comment': value.comment,
    };
}


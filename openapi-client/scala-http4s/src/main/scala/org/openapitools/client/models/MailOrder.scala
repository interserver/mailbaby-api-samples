/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** A mail order record
  * @param id The ID of the order.
  * @param status The order status.
  * @param username The username to use for this order.
  * @param comment Optional order comment.
  */
case class MailOrder(
    id: Int,
    status: String,
    username: String,
    comment: Option[String] = None
)
  
object MailOrder {
  given encoderMailOrder: Encoder[MailOrder] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("id" -> t.id.asJson),
        Some("status" -> t.status.asJson),
        Some("username" -> t.username.asJson),
        t.comment.map(v => "comment" -> v.asJson)
      ).flatten
    }
  }
  given decoderMailOrder: Decoder[MailOrder] = Decoder.instance { c =>
    for {
      id <- c.downField("id").as[Int]
      status <- c.downField("status").as[String]
      username <- c.downField("username").as[String]
      comment <- c.downField("comment").as[Option[String]]
    } yield MailOrder(
      id = id,
      status = status,
      username = username,
      comment = comment
    )
  }
}


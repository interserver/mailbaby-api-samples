/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DenyRuleNew type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DenyRuleNew{}

// DenyRuleNew The data for a email deny rule record.
type DenyRuleNew struct {
	// Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
	User *string `json:"user,omitempty"`
	// The type of deny rule.
	Type string `json:"type"`
	// The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
	Data string `json:"data"`
}

type _DenyRuleNew DenyRuleNew

// NewDenyRuleNew instantiates a new DenyRuleNew object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDenyRuleNew(type_ string, data string) *DenyRuleNew {
	this := DenyRuleNew{}
	this.Type = type_
	this.Data = data
	return &this
}

// NewDenyRuleNewWithDefaults instantiates a new DenyRuleNew object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDenyRuleNewWithDefaults() *DenyRuleNew {
	this := DenyRuleNew{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DenyRuleNew) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DenyRuleNew) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DenyRuleNew) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *DenyRuleNew) SetUser(v string) {
	o.User = &v
}

// GetType returns the Type field value
func (o *DenyRuleNew) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DenyRuleNew) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DenyRuleNew) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value
func (o *DenyRuleNew) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *DenyRuleNew) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *DenyRuleNew) SetData(v string) {
	o.Data = v
}

func (o DenyRuleNew) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DenyRuleNew) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	toSerialize["type"] = o.Type
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *DenyRuleNew) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDenyRuleNew := _DenyRuleNew{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDenyRuleNew)

	if err != nil {
		return err
	}

	*o = DenyRuleNew(varDenyRuleNew)

	return err
}

type NullableDenyRuleNew struct {
	value *DenyRuleNew
	isSet bool
}

func (v NullableDenyRuleNew) Get() *DenyRuleNew {
	return v.value
}

func (v *NullableDenyRuleNew) Set(val *DenyRuleNew) {
	v.value = val
	v.isSet = true
}

func (v NullableDenyRuleNew) IsSet() bool {
	return v.isSet
}

func (v *NullableDenyRuleNew) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDenyRuleNew(val *DenyRuleNew) *NullableDenyRuleNew {
	return &NullableDenyRuleNew{value: val, isSet: true}
}

func (v NullableDenyRuleNew) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDenyRuleNew) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



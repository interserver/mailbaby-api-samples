#
# Mail Baby API
# 
# This is an API defintion for accesssing the Mail.Baby mail service.
# The version of the OpenAPI document: 1.0.0
# Contact: detain@interserver.net
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error_response
import ../models/model_generic_response
import ../models/model_mail_log
import ../models/model_mail_order
import ../models/model_send_mail_adv

const basepath = "https://api.mailbaby.net"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getMailOrders*(httpClient: HttpClient, id: int64): (Option[seq[MailOrder]], Response) =
  ## displays a list of mail service orders
  let query_for_api_call = encodeQuery([
    ("id", $id), # The ID of your mail order this will be sent through.
  ])

  let response = httpClient.get(basepath & "/mail" & "?" & query_for_api_call)
  constructResult[seq[MailOrder]](response)


proc pingServer*(httpClient: HttpClient): Response =
  ## Checks if the server is running
  httpClient.get(basepath & "/ping")


proc placeMailOrder*(httpClient: HttpClient, mailOrder: MailOrder): Response {.deprecated.} =
  ## places a mail order
  httpClient.headers["Content-Type"] = "application/json"
  httpClient.post(basepath & "/mail/order", $(%mailOrder))


proc sendAdvMail*(httpClient: HttpClient, sendMailAdv: SendMailAdv): (Option[GenericResponse], Response) =
  ## Sends an Email with Advanced Options
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/mail/advsend", $(%sendMailAdv))
  constructResult[GenericResponse](response)


proc sendMail*(httpClient: HttpClient, to: string, `from`: string, subject: string, body: string): (Option[GenericResponse], Response) =
  ## Sends an Email
  httpClient.headers["Content-Type"] = "application/x-www-form-urlencoded"
  let query_for_api_call = encodeQuery([
    ("to", $to), # The Contact whom is the primary recipient of this email.
    ("from", $`from`), # The contact whom is the this email is from.
    ("subject", $subject), # The subject or title of the email
    ("body", $body), # The main email contents.
  ])

  let response = httpClient.post(basepath & "/mail/send", $query_for_api_call)
  constructResult[GenericResponse](response)


proc validateMailOrder*(httpClient: HttpClient): Response {.deprecated.} =
  ## validatess order details before placing an order
  httpClient.get(basepath & "/mail/order")


proc viewMailLogById*(httpClient: HttpClient, id: int64, searchString: string, skip: int, limit: int): (Option[seq[MailLog]], Response) =
  ## displays the mail log
  let query_for_api_call = encodeQuery([
    ("id", $id), # The ID of your mail order this will be sent through.
    ("searchString", $searchString), # pass an optional search string for looking up inventory
    ("skip", $skip), # number of records to skip for pagination
    ("limit", $limit), # maximum number of records to return
  ])

  let response = httpClient.get(basepath & "/mail/log" & "?" & query_for_api_call)
  constructResult[seq[MailLog]](response)


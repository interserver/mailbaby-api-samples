// @flow
/* eslint-disable no-use-before-define */
/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://api.mailbaby.net".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}


/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type Error = {
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof Error
     */
    message: string;
}


/**
 * 
 * @export
 */
export type GenericResponse = {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status_text?: string;
}


/**
 * Mail Order Details
 * @export
 */
export type MailLog = {
    /**
     * 
     * @type {number}
     * @memberof MailLog
     */
    id?: number;
}


/**
 * 
 * @export
 */
export type MailOrder = {
    /**
     * 
     * @type {number}
     * @memberof MailOrder
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    comment?: string;
}




/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @throws {RequiredError}
         */
        getMailById(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMailById.');
            }
            const localVarPath = `/mail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @throws {RequiredError}
         */
        getMailOrders(options: RequestOptions): FetchArgs {
            const localVarPath = `/mail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @throws {RequiredError}
         */
        pingServer(options: RequestOptions): FetchArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @throws {RequiredError}
         */
        placeMailOrder(mailOrder?: MailOrder, options: RequestOptions): FetchArgs {
            const localVarPath = `/mail/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof mailOrder !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(mailOrder != null ? mailOrder : {}) : (((mailOrder:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @throws {RequiredError}
         */
        sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sendMailById.');
            }
            const localVarPath = `/mail/{id}/send`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = ((subject:any):string);
            }

            if (body !== undefined) {
                localVarQueryParameter['body'] = ((body:any):string);
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = ((to:any):string);
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = ((from:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @throws {RequiredError}
         */
        validateMailOrder(options: RequestOptions): FetchArgs {
            const localVarPath = `/mail/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @throws {RequiredError}
         */
        viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling viewMailLogById.');
            }
            const localVarPath = `/mail/{id}/log`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = ((searchString:any):string);
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = ((skip:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DefaultApiType = { 
    getMailById(id: number, options?: RequestOptions): Promise<MailOrder>,

    getMailOrders(options?: RequestOptions): Promise<Array<MailOrder>>,

    pingServer(options?: RequestOptions): Promise<Response>,

    placeMailOrder(mailOrder?: MailOrder, options?: RequestOptions): Promise<Response>,

    sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, options?: RequestOptions): Promise<GenericResponse>,

    validateMailOrder(options?: RequestOptions): Promise<Response>,

    viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: RequestOptions): Promise<Array<MailLog>>,
}

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export const DefaultApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DefaultApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @throws {RequiredError}
         */
        getMailById(id: number, options?: RequestOptions = {}): Promise<MailOrder> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getMailById(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @throws {RequiredError}
         */
        getMailOrders(options?: RequestOptions = {}): Promise<Array<MailOrder>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getMailOrders(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Checks if the server is running
         * @throws {RequiredError}
         */
        pingServer(options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).pingServer(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @throws {RequiredError}
         */
        placeMailOrder(mailOrder?: MailOrder, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).placeMailOrder(mailOrder, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @throws {RequiredError}
         */
        sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, options?: RequestOptions = {}): Promise<GenericResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).sendMailById(id, subject, body, to, from, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @throws {RequiredError}
         */
        validateMailOrder(options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).validateMailOrder(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @throws {RequiredError}
         */
        viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: RequestOptions = {}): Promise<Array<MailLog>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).viewMailLogById(id, searchString, skip, limit, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

export type ApiTypes = { 
    DefaultApi: DefaultApiType,
 }

<?php
/**
 * MailStatsTypeVolumeTo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Interserver\Mailbaby
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.75
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Interserver\Mailbaby\Model;

use \ArrayAccess;
use \Interserver\Mailbaby\ObjectSerializer;

/**
 * MailStatsTypeVolumeTo Class Doc Comment
 *
 * @category Class
 * @package  Interserver\Mailbaby
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailStatsTypeVolumeTo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MailStatsType_volume_to';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientdomainCom' => 'int',
        'usersiteNet' => 'int',
        'salescompanyCom' => 'int',
        'clientanothersiteCom' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientdomainCom' => 'int32',
        'usersiteNet' => 'int32',
        'salescompanyCom' => 'int32',
        'clientanothersiteCom' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientdomainCom' => 'client@domain.com',
        'usersiteNet' => 'user@site.net',
        'salescompanyCom' => 'sales@company.com',
        'clientanothersiteCom' => 'client@anothersite.com'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientdomainCom' => 'setClientdomainCom',
        'usersiteNet' => 'setUsersiteNet',
        'salescompanyCom' => 'setSalescompanyCom',
        'clientanothersiteCom' => 'setClientanothersiteCom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientdomainCom' => 'getClientdomainCom',
        'usersiteNet' => 'getUsersiteNet',
        'salescompanyCom' => 'getSalescompanyCom',
        'clientanothersiteCom' => 'getClientanothersiteCom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientdomainCom'] = isset($data['clientdomainCom']) ? $data['clientdomainCom'] : null;
        $this->container['usersiteNet'] = isset($data['usersiteNet']) ? $data['usersiteNet'] : null;
        $this->container['salescompanyCom'] = isset($data['salescompanyCom']) ? $data['salescompanyCom'] : null;
        $this->container['clientanothersiteCom'] = isset($data['clientanothersiteCom']) ? $data['clientanothersiteCom'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clientdomainCom
     *
     * @return int
     */
    public function getClientdomainCom()
    {
        return $this->container['clientdomainCom'];
    }

    /**
     * Sets clientdomainCom
     *
     * @param int $clientdomainCom clientdomainCom
     *
     * @return $this
     */
    public function setClientdomainCom($clientdomainCom)
    {
        $this->container['clientdomainCom'] = $clientdomainCom;

        return $this;
    }

    /**
     * Gets usersiteNet
     *
     * @return int
     */
    public function getUsersiteNet()
    {
        return $this->container['usersiteNet'];
    }

    /**
     * Sets usersiteNet
     *
     * @param int $usersiteNet usersiteNet
     *
     * @return $this
     */
    public function setUsersiteNet($usersiteNet)
    {
        $this->container['usersiteNet'] = $usersiteNet;

        return $this;
    }

    /**
     * Gets salescompanyCom
     *
     * @return int
     */
    public function getSalescompanyCom()
    {
        return $this->container['salescompanyCom'];
    }

    /**
     * Sets salescompanyCom
     *
     * @param int $salescompanyCom salescompanyCom
     *
     * @return $this
     */
    public function setSalescompanyCom($salescompanyCom)
    {
        $this->container['salescompanyCom'] = $salescompanyCom;

        return $this;
    }

    /**
     * Gets clientanothersiteCom
     *
     * @return int
     */
    public function getClientanothersiteCom()
    {
        return $this->container['clientanothersiteCom'];
    }

    /**
     * Sets clientanothersiteCom
     *
     * @param int $clientanothersiteCom clientanothersiteCom
     *
     * @return $this
     */
    public function setClientanothersiteCom($clientanothersiteCom)
    {
        $this->container['clientanothersiteCom'] = $clientanothersiteCom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

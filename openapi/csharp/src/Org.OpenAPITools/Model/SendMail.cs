/*
 * Mail Baby API
 *
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details for an Email
    /// </summary>
    [DataContract]
    public partial class SendMail :  IEquatable<SendMail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendMail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMail" /> class.
        /// </summary>
        /// <param name="id">The ID of the Mail order within our system to use as the Mail Account. (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="to">The Contact whom is the primary recipient of this email. (required).</param>
        /// <param name="subject">The subject or title of the email (required).</param>
        /// <param name="body">The main email contents. (required).</param>
        /// <param name="replyto">Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address..</param>
        /// <param name="cc">Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well..</param>
        /// <param name="bcc">Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list..</param>
        /// <param name="attachments">Optional file attachments to include in the email.</param>
        public SendMail(long id = default(long), MailContact from = default(MailContact), List<MailContact> to = default(List<MailContact>), string subject = default(string), string body = default(string), List<MailContact> replyto = default(List<MailContact>), List<MailContact> cc = default(List<MailContact>), List<MailContact> bcc = default(List<MailContact>), List<MailAttachment> attachments = default(List<MailAttachment>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SendMail and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for SendMail and cannot be null");
            }
            else
            {
                this.From = from;
            }

            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for SendMail and cannot be null");
            }
            else
            {
                this.To = to;
            }

            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for SendMail and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }

            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new InvalidDataException("body is a required property for SendMail and cannot be null");
            }
            else
            {
                this.Body = body;
            }

            this.Replyto = replyto;
            this.Cc = cc;
            this.Bcc = bcc;
            this.Attachments = attachments;
        }

        /// <summary>
        /// The ID of the Mail order within our system to use as the Mail Account.
        /// </summary>
        /// <value>The ID of the Mail order within our system to use as the Mail Account.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public MailContact From { get; set; }

        /// <summary>
        /// The Contact whom is the primary recipient of this email.
        /// </summary>
        /// <value>The Contact whom is the primary recipient of this email.</value>
        [DataMember(Name="to", EmitDefaultValue=true)]
        public List<MailContact> To { get; set; }

        /// <summary>
        /// The subject or title of the email
        /// </summary>
        /// <value>The subject or title of the email</value>
        [DataMember(Name="subject", EmitDefaultValue=true)]
        public string Subject { get; set; }

        /// <summary>
        /// The main email contents.
        /// </summary>
        /// <value>The main email contents.</value>
        [DataMember(Name="body", EmitDefaultValue=true)]
        public string Body { get; set; }

        /// <summary>
        /// Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
        /// </summary>
        /// <value>Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.</value>
        [DataMember(Name="replyto", EmitDefaultValue=false)]
        public List<MailContact> Replyto { get; set; }

        /// <summary>
        /// Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
        /// </summary>
        /// <value>Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.</value>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public List<MailContact> Cc { get; set; }

        /// <summary>
        /// Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
        /// </summary>
        /// <value>Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.</value>
        [DataMember(Name="bcc", EmitDefaultValue=false)]
        public List<MailContact> Bcc { get; set; }

        /// <summary>
        /// Optional file attachments to include in the email
        /// </summary>
        /// <value>Optional file attachments to include in the email</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<MailAttachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Replyto: ").Append(Replyto).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendMail);
        }

        /// <summary>
        /// Returns true if SendMail instances are equal
        /// </summary>
        /// <param name="input">Instance of SendMail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Replyto == input.Replyto ||
                    this.Replyto != null &&
                    input.Replyto != null &&
                    this.Replyto.SequenceEqual(input.Replyto)
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    input.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    this.Bcc != null &&
                    input.Bcc != null &&
                    this.Bcc.SequenceEqual(input.Bcc)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.Replyto != null)
                    hashCode = hashCode * 59 + this.Replyto.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MailBabyApi);
  }
}(this, function(expect, MailBabyApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SendMailAdv', function() {
      beforeEach(function() {
        instance = new MailBabyApi.SendMailAdv();
      });

      it('should create an instance of SendMailAdv', function() {
        // TODO: update the code to test SendMailAdv
        expect(instance).to.be.a(MailBabyApi.SendMailAdv);
      });

      it('should have the property subject (base name: "subject")', function() {
        // TODO: update the code to test the property subject
        expect(instance).to.have.property('subject');
        // expect(instance.subject).to.be(expectedValueLiteral);
      });

      it('should have the property body (base name: "body")', function() {
        // TODO: update the code to test the property body
        expect(instance).to.have.property('body');
        // expect(instance.body).to.be(expectedValueLiteral);
      });

      it('should have the property from (base name: "from")', function() {
        // TODO: update the code to test the property from
        expect(instance).to.have.property('from');
        // expect(instance.from).to.be(expectedValueLiteral);
      });

      it('should have the property to (base name: "to")', function() {
        // TODO: update the code to test the property to
        expect(instance).to.have.property('to');
        // expect(instance.to).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property replyto (base name: "replyto")', function() {
        // TODO: update the code to test the property replyto
        expect(instance).to.have.property('replyto');
        // expect(instance.replyto).to.be(expectedValueLiteral);
      });

      it('should have the property cc (base name: "cc")', function() {
        // TODO: update the code to test the property cc
        expect(instance).to.have.property('cc');
        // expect(instance.cc).to.be(expectedValueLiteral);
      });

      it('should have the property bcc (base name: "bcc")', function() {
        // TODO: update the code to test the property bcc
        expect(instance).to.have.property('bcc');
        // expect(instance.bcc).to.be(expectedValueLiteral);
      });

      it('should have the property attachments (base name: "attachments")', function() {
        // TODO: update the code to test the property attachments
        expect(instance).to.have.property('attachments');
        // expect(instance.attachments).to.be(expectedValueLiteral);
      });

    });
  });

}));

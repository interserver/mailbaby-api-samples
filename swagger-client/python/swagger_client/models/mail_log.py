# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@interserver.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MailLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'skip': 'int',
        'limit': 'int',
        'emails': 'list[MailLogEntry]'
    }

    attribute_map = {
        'total': 'total',
        'skip': 'skip',
        'limit': 'limit',
        'emails': 'emails'
    }

    def __init__(self, total=None, skip=None, limit=None, emails=None):  # noqa: E501
        """MailLog - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._skip = None
        self._limit = None
        self._emails = None
        self.discriminator = None
        self.total = total
        self.skip = skip
        self.limit = limit
        self.emails = emails

    @property
    def total(self):
        """Gets the total of this MailLog.  # noqa: E501

        total number of mail log entries  # noqa: E501

        :return: The total of this MailLog.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this MailLog.

        total number of mail log entries  # noqa: E501

        :param total: The total of this MailLog.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def skip(self):
        """Gets the skip of this MailLog.  # noqa: E501

        number of emails skipped in listing  # noqa: E501

        :return: The skip of this MailLog.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this MailLog.

        number of emails skipped in listing  # noqa: E501

        :param skip: The skip of this MailLog.  # noqa: E501
        :type: int
        """
        if skip is None:
            raise ValueError("Invalid value for `skip`, must not be `None`")  # noqa: E501

        self._skip = skip

    @property
    def limit(self):
        """Gets the limit of this MailLog.  # noqa: E501

        number of emails to return  # noqa: E501

        :return: The limit of this MailLog.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this MailLog.

        number of emails to return  # noqa: E501

        :param limit: The limit of this MailLog.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def emails(self):
        """Gets the emails of this MailLog.  # noqa: E501


        :return: The emails of this MailLog.  # noqa: E501
        :rtype: list[MailLogEntry]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this MailLog.


        :param emails: The emails of this MailLog.  # noqa: E501
        :type: list[MailLogEntry]
        """
        if emails is None:
            raise ValueError("Invalid value for `emails`, must not be `None`")  # noqa: E501

        self._emails = emails

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

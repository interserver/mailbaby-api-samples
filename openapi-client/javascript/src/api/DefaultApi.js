/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GenericResponse from '../model/GenericResponse';
import MailLog from '../model/MailLog';
import MailOrder from '../model/MailOrder';
import SendMail from '../model/SendMail';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMailOrders operation.
     * @callback module:api/DefaultApi~getMailOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MailOrder>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays a list of mail service orders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id The ID of your mail order this will be sent through.
     * @param {module:api/DefaultApi~getMailOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MailOrder>}
     */
    getMailOrders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = [MailOrder];
      return this.apiClient.callApi(
        '/mail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pingServer operation.
     * @callback module:api/DefaultApi~pingServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if the server is running
     * @param {module:api/DefaultApi~pingServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pingServer(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the placeMailOrder operation.
     * @callback module:api/DefaultApi~placeMailOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * places a mail order
     * Adds an item to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/MailOrder} opts.mailOrder Inventory item to add
     * @param {module:api/DefaultApi~placeMailOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    placeMailOrder(opts, callback) {
      opts = opts || {};
      let postBody = opts['mailOrder'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mail/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendAdvMailById operation.
     * @callback module:api/DefaultApi~sendAdvMailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param {module:model/SendMail} sendMail 
     * @param {module:api/DefaultApi~sendAdvMailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    sendAdvMailById(sendMail, callback) {
      let postBody = sendMail;
      // verify the required parameter 'sendMail' is set
      if (sendMail === undefined || sendMail === null) {
        throw new Error("Missing the required parameter 'sendMail' when calling sendAdvMailById");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/mail/advsend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMailById operation.
     * @callback module:api/DefaultApi~sendMailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param {String} subject The Subject of the email
     * @param {String} body The contents of the email
     * @param {String} from The email address of who this email will be sent from.
     * @param {String} to The email address of who this email will be sent to.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id The ID of your mail order this will be sent through.
     * @param {String} opts.toName The name or title of who this email is being sent to.
     * @param {String} opts.fromName The name or title of who this email is being sent from.
     * @param {module:api/DefaultApi~sendMailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    sendMailById(subject, body, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling sendMailById");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendMailById");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sendMailById");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendMailById");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'subject': subject,
        'body': body,
        'from': from,
        'to': to,
        'id': opts['id'],
        'toName': opts['toName'],
        'fromName': opts['fromName']
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/mail/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateMailOrder operation.
     * @callback module:api/DefaultApi~validateMailOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validatess order details before placing an order
     * @param {module:api/DefaultApi~validateMailOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validateMailOrder(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mail/order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewMailLogById operation.
     * @callback module:api/DefaultApi~viewMailLogByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MailLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id The ID of your mail order this will be sent through.
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/DefaultApi~viewMailLogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MailLog>}
     */
    viewMailLogById(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MailLog];
      return this.apiClient.callApi(
        '/mail/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

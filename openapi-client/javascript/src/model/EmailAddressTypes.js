/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailAddressName from './EmailAddressName';

/**
 * The EmailAddressTypes model module.
 * @module model/EmailAddressTypes
 * @version 1.1.0
 */
class EmailAddressTypes {
    /**
     * Constructs a new <code>EmailAddressTypes</code>.
     * 
     * @alias module:model/EmailAddressTypes
     * @param {(module:model/EmailAddressName|module:model/String)} instance The actual instance to initialize EmailAddressTypes.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        // an email address
        try {
            // validate string
            if (!(typeof instance === 'string')) {
                throw new Error("Invalid value. Must be string. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        try {
            if (typeof instance === "EmailAddressName") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EmailAddressName.validateJSON(instance); // throw an exception if no match
                // create EmailAddressName from JS object
                this.actualInstance = EmailAddressName.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EmailAddressName
            errorMessages.push("Failed to construct EmailAddressName: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `EmailAddressTypes` with oneOf schemas EmailAddressName, String. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `EmailAddressTypes` with oneOf schemas EmailAddressName, String. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>EmailAddressTypes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailAddressTypes} obj Optional instance to populate.
     * @return {module:model/EmailAddressTypes} The populated <code>EmailAddressTypes</code> instance.
     */
    static constructFromObject(data, obj) {
        return new EmailAddressTypes(data);
    }

    /**
     * Gets the actual instance, which can be <code>EmailAddressName</code>, <code>String</code>.
     * @return {(module:model/EmailAddressName|module:model/String)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>EmailAddressName</code>, <code>String</code>.
     * @param {(module:model/EmailAddressName|module:model/String)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = EmailAddressTypes.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of EmailAddressTypes from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/EmailAddressTypes} An instance of EmailAddressTypes.
     */
    static fromJSON = function(json_string){
        return EmailAddressTypes.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The email address.
 * @member {String} email
 */
EmailAddressTypes.prototype['email'] = undefined;

/**
 * Name to use for the sending contact.
 * @member {String} name
 */
EmailAddressTypes.prototype['name'] = undefined;


EmailAddressTypes.OneOf = ["EmailAddressName", "String"];

export default EmailAddressTypes;


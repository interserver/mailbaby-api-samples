//
// SendingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class SendingAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.mailbaby.net")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum SendAdvMailError: Error, CustomStringConvertible {
        // The specified resource was not found
        case code400Error(GetMailOrders401Response)
        // Unauthorized
        case code401Error(GetMailOrders401Response)
        // The specified resource was not found
        case code404Error(GetMailOrders401Response)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "SendAdvMailError: The specified resource was not found: \(object)"
            case .code401Error(let object):
                return "SendAdvMailError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "SendAdvMailError: The specified resource was not found: \(object)"
            }
        }
    }

    /// Sends an Email with Advanced Options
    /// - POST /mail/advsend
    /// - Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - parameter subject: (form) The subject or title of the email 
    /// - parameter body: (form) The main email contents. 
    /// - parameter from: (form)  
    /// - parameter to: (form) A list of destionation email addresses to send this to 
    /// - parameter replyto: (form) (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address. (optional)
    /// - parameter cc: (form) (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well. (optional)
    /// - parameter bcc: (form) (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list. (optional)
    /// - parameter attachments: (form) (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
    /// - parameter id: (form) (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
    /// - returns: AnyPublisher<GenericResponse, Error> 
    open func sendAdvMail(subject: String, body: String, from: EmailAddressName, to: [EmailAddressName], replyto: [EmailAddressName]? = nil, cc: [EmailAddressName]? = nil, bcc: [EmailAddressName]? = nil, attachments: [MailAttachment]? = nil, id: Int64? = nil) -> AnyPublisher<GenericResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/mail/advsend"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var formEncodedItems: [String] = []
                formEncodedItems.append("subject=\(subject)")
                formEncodedItems.append("body=\(body)")
                formEncodedItems.append("from=\(String(data: try self.encoder.encode(from), encoding: .utf8) ?? "")")
                formEncodedItems.append("to=\(String(data: try self.encoder.encode(to), encoding: .utf8) ?? "")")
                if let replyto = replyto { formEncodedItems.append("replyto=\(String(data: try self.encoder.encode(replyto), encoding: .utf8) ?? "")") } 
                if let cc = cc { formEncodedItems.append("cc=\(String(data: try self.encoder.encode(cc), encoding: .utf8) ?? "")") } 
                if let bcc = bcc { formEncodedItems.append("bcc=\(String(data: try self.encoder.encode(bcc), encoding: .utf8) ?? "")") } 
                if let attachments = attachments { formEncodedItems.append("attachments=\(String(data: try self.encoder.encode(attachments), encoding: .utf8) ?? "")") } 
                if let id = id { formEncodedItems.append("id=\("\(id)")") } 
                request.httpBody = formEncodedItems.joined(separator: "&").data(using: .utf8)
                request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GenericResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return SendAdvMailError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return SendAdvMailError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return SendAdvMailError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(GenericResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum SendMailError: Error, CustomStringConvertible {
        // The specified resource was not found
        case code400Error(GetMailOrders401Response)
        // Unauthorized
        case code401Error(GetMailOrders401Response)
        // The specified resource was not found
        case code404Error(GetMailOrders401Response)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "SendMailError: The specified resource was not found: \(object)"
            case .code401Error(let object):
                return "SendMailError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "SendMailError: The specified resource was not found: \(object)"
            }
        }
    }

    /// Sends an Email
    /// - POST /mail/send
    /// - Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - parameter to: (form) The Contact whom is the primary recipient of this email. 
    /// - parameter from: (form) The contact whom is the this email is from. 
    /// - parameter subject: (form) The subject or title of the email 
    /// - parameter body: (form) The main email contents. 
    /// - returns: AnyPublisher<GenericResponse, Error> 
    open func sendMail(to: String, from: String, subject: String, body: String) -> AnyPublisher<GenericResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/mail/send"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var formEncodedItems: [String] = []
                formEncodedItems.append("to=\(to)")
                formEncodedItems.append("from=\(from)")
                formEncodedItems.append("subject=\(subject)")
                formEncodedItems.append("body=\(body)")
                request.httpBody = formEncodedItems.joined(separator: "&").data(using: .utf8)
                request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GenericResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return SendMailError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return SendMailError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return SendMailError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(GenericResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

=begin
#MailBaby Email Delivery and Management Service API

#**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

OpenAPI spec version: 1.1.0
Contact: support@interserver.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.71
=end

module SwaggerClient
  class BlockingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new email deny rule.
    # Adds a new email deny rule into the system to block new emails that match the given criteria
    # @param user 
    # @param type 
    # @param data 
    # @param [Hash] opts the optional parameters
    # @return [GenericResponse]
    def add_rule(user, type, data, opts = {})
      data, _status_code, _headers = add_rule_with_http_info(user, type, data, opts)
      data
    end

    # Creates a new email deny rule.
    # Adds a new email deny rule into the system to block new emails that match the given criteria
    # @param user 
    # @param type 
    # @param data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def add_rule_with_http_info(user, type, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockingApi.add_rule ...'
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling BlockingApi.add_rule"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling BlockingApi.add_rule"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['domain', 'email', 'startswith', 'destination'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of domain, email, startswith, destination"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling BlockingApi.add_rule"
      end
      # resource path
      local_var_path = '/mail/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['user'] = user
      form_params['type'] = type
      form_params['data'] = data

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenericResponse' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockingApi#add_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new email deny rule.
    # Adds a new email deny rule into the system to block new emails that match the given criteria
    # @param body These are the fields needed to create a new email deny rule.
    # @param [Hash] opts the optional parameters
    # @return [GenericResponse]
    def add_rule(body, opts = {})
      data, _status_code, _headers = add_rule_with_http_info(body, opts)
      data
    end

    # Creates a new email deny rule.
    # Adds a new email deny rule into the system to block new emails that match the given criteria
    # @param body These are the fields needed to create a new email deny rule.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def add_rule_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockingApi.add_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockingApi.add_rule"
      end
      # resource path
      local_var_path = '/mail/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['user'] = user
      form_params['type'] = type
      form_params['data'] = data

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenericResponse' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockingApi#add_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes an deny mail rule.
    # Removes one of the configured deny mail rules from the system.
    # @param rule_id The ID of the Rules entry.
    # @param [Hash] opts the optional parameters
    # @return [GenericResponse]
    def delete_rule(rule_id, opts = {})
      data, _status_code, _headers = delete_rule_with_http_info(rule_id, opts)
      data
    end

    # Removes an deny mail rule.
    # Removes one of the configured deny mail rules from the system.
    # @param rule_id The ID of the Rules entry.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def delete_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockingApi.delete_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling BlockingApi.delete_rule"
      end
      # resource path
      local_var_path = '/mail/rules/{ruleId}'.sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GenericResponse' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockingApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Removes an email address from the blocked list
    # Removes an email address from the various block lists. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [GenericResponse]
    def delist_block(body, opts = {})
      data, _status_code, _headers = delist_block_with_http_info(body, opts)
      data
    end

    # Removes an email address from the blocked list
    # Removes an email address from the various block lists. 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def delist_block_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockingApi.delist_block ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BlockingApi.delist_block"
      end
      # resource path
      local_var_path = '/mail/blocks/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenericResponse' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockingApi#delist_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # displays a list of blocked email addresses
    # @param [Hash] opts the optional parameters
    # @return [MailBlocks]
    def get_mail_blocks(opts = {})
      data, _status_code, _headers = get_mail_blocks_with_http_info(opts)
      data
    end

    # displays a list of blocked email addresses
    # @param [Hash] opts the optional parameters
    # @return [Array<(MailBlocks, Integer, Hash)>] MailBlocks data, response status code and response headers
    def get_mail_blocks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockingApi.get_mail_blocks ...'
      end
      # resource path
      local_var_path = '/mail/blocks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MailBlocks' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockingApi#get_mail_blocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Displays a listing of deny email rules.
    # Returns a listing of all the deny block rules you have configured.
    # @param [Hash] opts the optional parameters
    # @return [Array<DenyRuleRecord>]
    def get_rules(opts = {})
      data, _status_code, _headers = get_rules_with_http_info(opts)
      data
    end

    # Displays a listing of deny email rules.
    # Returns a listing of all the deny block rules you have configured.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DenyRuleRecord>, Integer, Hash)>] Array<DenyRuleRecord> data, response status code and response headers
    def get_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BlockingApi.get_rules ...'
      end
      # resource path
      local_var_path = '/mail/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<DenyRuleRecord>' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BlockingApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

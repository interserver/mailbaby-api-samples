/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDenyRuleRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDenyRuleRecord::OAIDenyRuleRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDenyRuleRecord::OAIDenyRuleRecord() {
    this->initializeModel();
}

OAIDenyRuleRecord::~OAIDenyRuleRecord() {}

void OAIDenyRuleRecord::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIDenyRuleRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDenyRuleRecord::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIDenyRuleRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDenyRuleRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIDenyRuleRecord::getType() const {
    return m_type;
}
void OAIDenyRuleRecord::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDenyRuleRecord::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDenyRuleRecord::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDenyRuleRecord::getData() const {
    return m_data;
}
void OAIDenyRuleRecord::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDenyRuleRecord::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDenyRuleRecord::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDenyRuleRecord::getId() const {
    return m_id;
}
void OAIDenyRuleRecord::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDenyRuleRecord::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDenyRuleRecord::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIDenyRuleRecord::getCreated() const {
    return m_created;
}
void OAIDenyRuleRecord::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDenyRuleRecord::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDenyRuleRecord::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIDenyRuleRecord::getUser() const {
    return m_user;
}
void OAIDenyRuleRecord::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDenyRuleRecord::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDenyRuleRecord::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIDenyRuleRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDenyRuleRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_data_isValid && m_id_isValid && m_created_isValid && true;
}

} // namespace OpenAPI

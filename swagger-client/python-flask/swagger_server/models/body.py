# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, subject: str=None, body: str=None, _from: str=None, to: str=None, id: int=None, to_name: str=None, from_name: str=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param subject: The subject of this Body.  # noqa: E501
        :type subject: str
        :param body: The body of this Body.  # noqa: E501
        :type body: str
        :param _from: The _from of this Body.  # noqa: E501
        :type _from: str
        :param to: The to of this Body.  # noqa: E501
        :type to: str
        :param id: The id of this Body.  # noqa: E501
        :type id: int
        :param to_name: The to_name of this Body.  # noqa: E501
        :type to_name: str
        :param from_name: The from_name of this Body.  # noqa: E501
        :type from_name: str
        """
        self.swagger_types = {
            'subject': str,
            'body': str,
            '_from': str,
            'to': str,
            'id': int,
            'to_name': str,
            'from_name': str
        }

        self.attribute_map = {
            'subject': 'subject',
            'body': 'body',
            '_from': 'from',
            'to': 'to',
            'id': 'id',
            'to_name': 'toName',
            'from_name': 'fromName'
        }
        self._subject = subject
        self._body = body
        self.__from = _from
        self._to = to
        self._id = id
        self._to_name = to_name
        self._from_name = from_name

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self) -> str:
        """Gets the subject of this Body.

        The Subject of the email  # noqa: E501

        :return: The subject of this Body.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this Body.

        The Subject of the email  # noqa: E501

        :param subject: The subject of this Body.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self) -> str:
        """Gets the body of this Body.

        The contents of the email  # noqa: E501

        :return: The body of this Body.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this Body.

        The contents of the email  # noqa: E501

        :param body: The body of this Body.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def _from(self) -> str:
        """Gets the _from of this Body.

        The email address of who this email will be sent from.  # noqa: E501

        :return: The _from of this Body.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this Body.

        The email address of who this email will be sent from.  # noqa: E501

        :param _from: The _from of this Body.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this Body.

        The email address of who this email will be sent to.  # noqa: E501

        :return: The to of this Body.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this Body.

        The email address of who this email will be sent to.  # noqa: E501

        :param to: The to of this Body.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def id(self) -> int:
        """Gets the id of this Body.

        The ID of your mail order this will be sent through.  # noqa: E501

        :return: The id of this Body.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Body.

        The ID of your mail order this will be sent through.  # noqa: E501

        :param id: The id of this Body.
        :type id: int
        """

        self._id = id

    @property
    def to_name(self) -> str:
        """Gets the to_name of this Body.

        The name or title of who this email is being sent to.  # noqa: E501

        :return: The to_name of this Body.
        :rtype: str
        """
        return self._to_name

    @to_name.setter
    def to_name(self, to_name: str):
        """Sets the to_name of this Body.

        The name or title of who this email is being sent to.  # noqa: E501

        :param to_name: The to_name of this Body.
        :type to_name: str
        """

        self._to_name = to_name

    @property
    def from_name(self) -> str:
        """Gets the from_name of this Body.

        The name or title of who this email is being sent from.  # noqa: E501

        :return: The from_name of this Body.
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name: str):
        """Sets the from_name of this Body.

        The name or title of who this email is being sent from.  # noqa: E501

        :param from_name: The from_name of this Body.
        :type from_name: str
        """

        self._from_name = from_name

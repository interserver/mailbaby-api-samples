/* tslint:disable */
/* eslint-disable */
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DenyRuleRecord,
  EmailAddress,
  GenericResponse,
  GetMailOrders401Response,
  MailBlocks,
} from '../models';
import {
    DenyRuleRecordFromJSON,
    DenyRuleRecordToJSON,
    EmailAddressFromJSON,
    EmailAddressToJSON,
    GenericResponseFromJSON,
    GenericResponseToJSON,
    GetMailOrders401ResponseFromJSON,
    GetMailOrders401ResponseToJSON,
    MailBlocksFromJSON,
    MailBlocksToJSON,
} from '../models';

export interface AddRuleRequest {
    type: AddRuleTypeEnum;
    data: string;
    user?: string;
}

export interface DeleteRuleRequest {
    ruleId: number;
}

export interface DelistBlockRequest {
    emailAddress: EmailAddress;
}

/**
 * 
 */
export class BlockingApi extends runtime.BaseAPI {

    /**
     * Adds a new email deny rule into the system to block new emails that match the given criteria
     * Creates a new email deny rule.
     */
    async addRuleRaw(requestParameters: AddRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling addRule.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling addRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.user !== undefined) {
            formParams.append('user', requestParameters.user as any);
        }

        if (requestParameters.type !== undefined) {
            formParams.append('type', requestParameters.type as any);
        }

        if (requestParameters.data !== undefined) {
            formParams.append('data', requestParameters.data as any);
        }

        const response = await this.request({
            path: `/mail/rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Adds a new email deny rule into the system to block new emails that match the given criteria
     * Creates a new email deny rule.
     */
    async addRule(requestParameters: AddRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.addRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes one of the configured deny mail rules from the system.
     * Removes an deny mail rule.
     */
    async deleteRuleRaw(requestParameters: DeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling deleteRule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Removes one of the configured deny mail rules from the system.
     * Removes an deny mail rule.
     */
    async deleteRule(requestParameters: DeleteRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.deleteRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an email address from the various block lists. 
     * Removes an email address from the blocked list
     */
    async delistBlockRaw(requestParameters: DelistBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.emailAddress === null || requestParameters.emailAddress === undefined) {
            throw new runtime.RequiredError('emailAddress','Required parameter requestParameters.emailAddress was null or undefined when calling delistBlock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/blocks/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailAddressToJSON(requestParameters.emailAddress),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Removes an email address from the various block lists. 
     * Removes an email address from the blocked list
     */
    async delistBlock(requestParameters: DelistBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.delistBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * displays a list of blocked email addresses
     */
    async getMailBlocksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailBlocks>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/blocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailBlocksFromJSON(jsonValue));
    }

    /**
     * displays a list of blocked email addresses
     */
    async getMailBlocks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailBlocks> {
        const response = await this.getMailBlocksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a listing of all the deny block rules you have configured.
     * Displays a listing of deny email rules.
     */
    async getRulesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DenyRuleRecord>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DenyRuleRecordFromJSON));
    }

    /**
     * Returns a listing of all the deny block rules you have configured.
     * Displays a listing of deny email rules.
     */
    async getRules(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DenyRuleRecord>> {
        const response = await this.getRulesRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddRuleTypeEnum = {
    Domain: 'domain',
    Email: 'email',
    Startswith: 'startswith'
} as const;
export type AddRuleTypeEnum = typeof AddRuleTypeEnum[keyof typeof AddRuleTypeEnum];

// tslint:disable
/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    GenericResponse,
    GetMailOrders200ResponseInner,
    GetMailOrders401Response,
    MailLog,
    SendMailAdv,
} from '../models';

export interface SendAdvMailRequest {
    sendMailAdv: SendMailAdv;
}

export interface SendMailRequest {
    to: string;
    from: string;
    subject: string;
    body: string;
}

export interface ViewMailLogRequest {
    id?: number;
    search?: string;
    skip?: number;
    limit?: number;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * displays a list of mail service orders
     */
    getMailOrders(): Observable<Array<GetMailOrders200ResponseInner>>
    getMailOrders(opts?: OperationOpts): Observable<AjaxResponse<Array<GetMailOrders200ResponseInner>>>
    getMailOrders(opts?: OperationOpts): Observable<Array<GetMailOrders200ResponseInner> | AjaxResponse<Array<GetMailOrders200ResponseInner>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        return this.request<Array<GetMailOrders200ResponseInner>>({
            url: '/mail',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Checks if the server is running
     */
    pingServer(): Observable<void>
    pingServer(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    pingServer(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        return this.request<void>({
            url: '/ping',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    sendAdvMail({ sendMailAdv }: SendAdvMailRequest): Observable<GenericResponse>
    sendAdvMail({ sendMailAdv }: SendAdvMailRequest, opts?: OperationOpts): Observable<AjaxResponse<GenericResponse>>
    sendAdvMail({ sendMailAdv }: SendAdvMailRequest, opts?: OperationOpts): Observable<GenericResponse | AjaxResponse<GenericResponse>> {
        throwIfNullOrUndefined(sendMailAdv, 'sendMailAdv', 'sendAdvMail');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        return this.request<GenericResponse>({
            url: '/mail/advsend',
            method: 'POST',
            headers,
            body: sendMailAdv,
        }, opts?.responseOpts);
    };

    /**
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * Sends an Email
     */
    sendMail({ to, from, subject, body }: SendMailRequest): Observable<GenericResponse>
    sendMail({ to, from, subject, body }: SendMailRequest, opts?: OperationOpts): Observable<AjaxResponse<GenericResponse>>
    sendMail({ to, from, subject, body }: SendMailRequest, opts?: OperationOpts): Observable<GenericResponse | AjaxResponse<GenericResponse>> {
        throwIfNullOrUndefined(to, 'to', 'sendMail');
        throwIfNullOrUndefined(from, 'from', 'sendMail');
        throwIfNullOrUndefined(subject, 'subject', 'sendMail');
        throwIfNullOrUndefined(body, 'body', 'sendMail');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const formData = new FormData();
        if (to !== undefined) { formData.append('to', to as any); }
        if (from !== undefined) { formData.append('from', from as any); }
        if (subject !== undefined) { formData.append('subject', subject as any); }
        if (body !== undefined) { formData.append('body', body as any); }

        return this.request<GenericResponse>({
            url: '/mail/send',
            method: 'POST',
            headers,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * displays the mail log
     */
    viewMailLog({ id, search, skip, limit }: ViewMailLogRequest): Observable<MailLog>
    viewMailLog({ id, search, skip, limit }: ViewMailLogRequest, opts?: OperationOpts): Observable<AjaxResponse<MailLog>>
    viewMailLog({ id, search, skip, limit }: ViewMailLogRequest, opts?: OperationOpts): Observable<MailLog | AjaxResponse<MailLog>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }
        if (search != null) { query['search'] = search; }
        if (skip != null) { query['skip'] = skip; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<MailLog>({
            url: '/mail/log',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

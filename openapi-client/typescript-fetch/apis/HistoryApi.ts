/* tslint:disable */
/* eslint-disable */
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessage,
  MailLog,
  MailStatsType,
} from '../models/index';
import {
    ErrorMessageFromJSON,
    ErrorMessageToJSON,
    MailLogFromJSON,
    MailLogToJSON,
    MailStatsTypeFromJSON,
    MailStatsTypeToJSON,
} from '../models/index';

export interface GetStatsRequest {
    time?: GetStatsTimeEnum;
}

export interface ViewMailLogRequest {
    id?: number;
    origin?: string;
    mx?: string;
    from?: string;
    to?: string;
    subject?: string;
    mailid?: string;
    skip?: number;
    limit?: number;
    startDate?: number;
    endDate?: number;
    replyto?: string;
    headerfrom?: string;
    delivered?: ViewMailLogDeliveredEnum;
}

/**
 * 
 */
export class HistoryApi extends runtime.BaseAPI {

    /**
     * Returns information about the usage on your mail accounts.
     * Account usage statistics.
     */
    async getStatsRaw(requestParameters: GetStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailStatsType>> {
        const queryParameters: any = {};

        if (requestParameters['time'] != null) {
            queryParameters['time'] = requestParameters['time'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }


        let urlPath = `/mail/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailStatsTypeFromJSON(jsonValue));
    }

    /**
     * Returns information about the usage on your mail accounts.
     * Account usage statistics.
     */
    async getStats(requestParameters: GetStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailStatsType> {
        const response = await this.getStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a listing of the emails sent through this system 
     * displays the mail log
     */
    async viewMailLogRaw(requestParameters: ViewMailLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailLog>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['origin'] != null) {
            queryParameters['origin'] = requestParameters['origin'];
        }

        if (requestParameters['mx'] != null) {
            queryParameters['mx'] = requestParameters['mx'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        if (requestParameters['subject'] != null) {
            queryParameters['subject'] = requestParameters['subject'];
        }

        if (requestParameters['mailid'] != null) {
            queryParameters['mailid'] = requestParameters['mailid'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['replyto'] != null) {
            queryParameters['replyto'] = requestParameters['replyto'];
        }

        if (requestParameters['headerfrom'] != null) {
            queryParameters['headerfrom'] = requestParameters['headerfrom'];
        }

        if (requestParameters['delivered'] != null) {
            queryParameters['delivered'] = requestParameters['delivered'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }


        let urlPath = `/mail/log`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailLogFromJSON(jsonValue));
    }

    /**
     * Get a listing of the emails sent through this system 
     * displays the mail log
     */
    async viewMailLog(requestParameters: ViewMailLogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailLog> {
        const response = await this.viewMailLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetStatsTimeEnum = {
    All: 'all',
    Billing: 'billing',
    Month: 'month',
    _7d: '7d',
    _24h: '24h',
    _1d: '1d',
    _1h: '1h'
} as const;
export type GetStatsTimeEnum = typeof GetStatsTimeEnum[keyof typeof GetStatsTimeEnum];
/**
 * @export
 */
export const ViewMailLogDeliveredEnum = {
    _0: '0',
    _1: '1'
} as const;
export type ViewMailLogDeliveredEnum = typeof ViewMailLogDeliveredEnum[keyof typeof ViewMailLogDeliveredEnum];

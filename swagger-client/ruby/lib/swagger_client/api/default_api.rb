=begin
#Mail Baby API

#This is an API defintion for accesssing the Mail.Baby mail service.

OpenAPI spec version: 1.0.0
Contact: detain@interserver.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.26-SNAPSHOT
=end

module SwaggerClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # displays a list of mail service orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id The ID of your mail order this will be sent through.
    # @return [MailOrders]
    def get_mail_orders(opts = {})
      data, _status_code, _headers = get_mail_orders_with_http_info(opts)
      data
    end

    # displays a list of mail service orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id The ID of your mail order this will be sent through.
    # @return [Array<(MailOrders, Integer, Hash)>] MailOrders data, response status code and response headers
    def get_mail_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_mail_orders ...'
      end
      # resource path
      local_var_path = '/mail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MailOrders' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_mail_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Checks if the server is running
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def ping_server(opts = {})
      ping_server_with_http_info(opts)
      nil
    end

    # Checks if the server is running
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ping_server_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.ping_server ...'
      end
      # resource path
      local_var_path = '/ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#ping_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # places a mail order
    # Adds an item to the system
    # @param [Hash] opts the optional parameters
    # @option opts [MailOrder] :body Inventory item to add
    # @return [nil]
    def place_mail_order(opts = {})
      place_mail_order_with_http_info(opts)
      nil
    end

    # places a mail order
    # Adds an item to the system
    # @param [Hash] opts the optional parameters
    # @option opts [MailOrder] :body Inventory item to add
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def place_mail_order_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.place_mail_order ...'
      end
      # resource path
      local_var_path = '/mail/order'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#place_mail_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sends an Email with Advanced Options
    # Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [GenericResponse]
    def send_adv_mail_by_id(body, opts = {})
      data, _status_code, _headers = send_adv_mail_by_id_with_http_info(body, opts)
      data
    end

    # Sends an Email with Advanced Options
    # Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def send_adv_mail_by_id_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_adv_mail_by_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.send_adv_mail_by_id"
      end
      # resource path
      local_var_path = '/mail/advsend'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenericResponse' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_adv_mail_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sends an Email
    # Sends An email through one of your mail orders.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subject The Subject of the email
    # @option opts [String] :body The contents of the email
    # @option opts [String] :to The email address of who this email will be sent to.
    # @option opts [String] :from The email address of who this email will be sent from.
    # @option opts [Integer] :id The ID of your mail order this will be sent through.
    # @option opts [String] :to_name The name or title of who this email is being sent to.
    # @option opts [String] :from_name The name or title of who this email is being sent from.
    # @return [GenericResponse]
    def send_mail_by_id(opts = {})
      data, _status_code, _headers = send_mail_by_id_with_http_info(opts)
      data
    end

    # Sends an Email
    # Sends An email through one of your mail orders.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subject The Subject of the email
    # @option opts [String] :body The contents of the email
    # @option opts [String] :to The email address of who this email will be sent to.
    # @option opts [String] :from The email address of who this email will be sent from.
    # @option opts [Integer] :id The ID of your mail order this will be sent through.
    # @option opts [String] :to_name The name or title of who this email is being sent to.
    # @option opts [String] :from_name The name or title of who this email is being sent from.
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def send_mail_by_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.send_mail_by_id ...'
      end
      # resource path
      local_var_path = '/mail/send'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subject'] = opts[:'subject'] if !opts[:'subject'].nil?
      query_params[:'body'] = opts[:'body'] if !opts[:'body'].nil?
      query_params[:'to'] = opts[:'to'] if !opts[:'to'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'toName'] = opts[:'to_name'] if !opts[:'to_name'].nil?
      query_params[:'fromName'] = opts[:'from_name'] if !opts[:'from_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GenericResponse' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#send_mail_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # validatess order details before placing an order
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def validate_mail_order(opts = {})
      validate_mail_order_with_http_info(opts)
      nil
    end

    # validatess order details before placing an order
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_mail_order_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.validate_mail_order ...'
      end
      # resource path
      local_var_path = '/mail/order'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#validate_mail_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # displays the mail log
    # By passing in the appropriate options, you can search for available inventory in the system 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id The ID of your mail order this will be sent through.
    # @option opts [String] :search_string pass an optional search string for looking up inventory
    # @option opts [Integer] :skip number of records to skip for pagination
    # @option opts [Integer] :limit maximum number of records to return
    # @return [Array<MailLog>]
    def view_mail_log_by_id(opts = {})
      data, _status_code, _headers = view_mail_log_by_id_with_http_info(opts)
      data
    end

    # displays the mail log
    # By passing in the appropriate options, you can search for available inventory in the system 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id The ID of your mail order this will be sent through.
    # @option opts [String] :search_string pass an optional search string for looking up inventory
    # @option opts [Integer] :skip number of records to skip for pagination
    # @option opts [Integer] :limit maximum number of records to return
    # @return [Array<(Array<MailLog>, Integer, Hash)>] Array<MailLog> data, response status code and response headers
    def view_mail_log_by_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.view_mail_log_by_id ...'
      end
      # resource path
      local_var_path = '/mail/log'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'searchString'] = opts[:'search_string'] if !opts[:'search_string'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<MailLog>' 

      auth_names = opts[:auth_names] || ['apiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#view_mail_log_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

#
# MailBaby Email Delivery and Management Service API
# **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
# Version: 1.1.0
# Contact: support@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An email record

.PARAMETER Id
internal db id
.PARAMETER Id
mail id
.PARAMETER VarFrom
from address
.PARAMETER To
to address
.PARAMETER Subject
email subject
.PARAMETER MessageId
message id
.PARAMETER Created
creation date
.PARAMETER Time
creation timestamp
.PARAMETER User
user account
.PARAMETER Transtype
transaction type
.PARAMETER Origin
origin ip
.PARAMETER Interface
interface name
.PARAMETER SendingZone
sending zone
.PARAMETER BodySize
email body size in bytes
.PARAMETER Seq
index of email in the to adderess list
.PARAMETER Recipient
to address this email is being sent to
.PARAMETER Domain
to address domain
.PARAMETER Locked
locked status
.PARAMETER LockTime
lock timestamp
.PARAMETER Assigned
assigned server
.PARAMETER Queued
queued timestamp
.PARAMETER MxHostname
mx hostname
.PARAMETER Response
mail delivery response
.OUTPUTS

MailLogEntry<PSCustomObject>
#>

function Initialize-MailLogEntry {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${To},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MessageId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Time},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Transtype},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Origin},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Interface},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SendingZone},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${BodySize},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Seq},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Recipient},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Locked},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LockTime},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Assigned},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Queued},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MxHostname},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Response}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MailLogEntry' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $VarFrom) {
            throw "invalid value for 'VarFrom', 'VarFrom' cannot be null."
        }

        if ($null -eq $To) {
            throw "invalid value for 'To', 'To' cannot be null."
        }

        if ($null -eq $Subject) {
            throw "invalid value for 'Subject', 'Subject' cannot be null."
        }

        if ($null -eq $Created) {
            throw "invalid value for 'Created', 'Created' cannot be null."
        }

        if ($null -eq $Time) {
            throw "invalid value for 'Time', 'Time' cannot be null."
        }

        if ($null -eq $User) {
            throw "invalid value for 'User', 'User' cannot be null."
        }

        if ($null -eq $Transtype) {
            throw "invalid value for 'Transtype', 'Transtype' cannot be null."
        }

        if ($null -eq $Origin) {
            throw "invalid value for 'Origin', 'Origin' cannot be null."
        }

        if ($null -eq $Interface) {
            throw "invalid value for 'Interface', 'Interface' cannot be null."
        }

        if ($null -eq $SendingZone) {
            throw "invalid value for 'SendingZone', 'SendingZone' cannot be null."
        }

        if ($null -eq $BodySize) {
            throw "invalid value for 'BodySize', 'BodySize' cannot be null."
        }

        if ($null -eq $Seq) {
            throw "invalid value for 'Seq', 'Seq' cannot be null."
        }

        if ($null -eq $Recipient) {
            throw "invalid value for 'Recipient', 'Recipient' cannot be null."
        }

        if ($null -eq $Domain) {
            throw "invalid value for 'Domain', 'Domain' cannot be null."
        }

        if ($null -eq $Locked) {
            throw "invalid value for 'Locked', 'Locked' cannot be null."
        }

        if ($null -eq $LockTime) {
            throw "invalid value for 'LockTime', 'LockTime' cannot be null."
        }

        if ($null -eq $Assigned) {
            throw "invalid value for 'Assigned', 'Assigned' cannot be null."
        }

        if ($null -eq $Queued) {
            throw "invalid value for 'Queued', 'Queued' cannot be null."
        }

        if ($null -eq $MxHostname) {
            throw "invalid value for 'MxHostname', 'MxHostname' cannot be null."
        }

        if ($null -eq $Response) {
            throw "invalid value for 'Response', 'Response' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "_id" = ${Id}
            "id" = ${Id}
            "from" = ${VarFrom}
            "to" = ${To}
            "subject" = ${Subject}
            "messageId" = ${MessageId}
            "created" = ${Created}
            "time" = ${Time}
            "user" = ${User}
            "transtype" = ${Transtype}
            "origin" = ${Origin}
            "interface" = ${Interface}
            "sendingZone" = ${SendingZone}
            "bodySize" = ${BodySize}
            "seq" = ${Seq}
            "recipient" = ${Recipient}
            "domain" = ${Domain}
            "locked" = ${Locked}
            "lockTime" = ${LockTime}
            "assigned" = ${Assigned}
            "queued" = ${Queued}
            "mxHostname" = ${MxHostname}
            "response" = ${Response}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MailLogEntry<PSCustomObject>

.DESCRIPTION

Convert from JSON to MailLogEntry<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MailLogEntry<PSCustomObject>
#>
function ConvertFrom-JsonToMailLogEntry {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MailLogEntry' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MailLogEntry
        $AllProperties = ("_id", "id", "from", "to", "subject", "messageId", "created", "time", "user", "transtype", "origin", "interface", "sendingZone", "bodySize", "seq", "recipient", "domain", "locked", "lockTime", "assigned", "queued", "mxHostname", "response")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property '_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_id"))) {
            throw "Error! JSON cannot be serialized due to the required property '_id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) {
            throw "Error! JSON cannot be serialized due to the required property 'from' missing."
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) {
            throw "Error! JSON cannot be serialized due to the required property 'to' missing."
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subject' missing."
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time"))) {
            throw "Error! JSON cannot be serialized due to the required property 'time' missing."
        } else {
            $Time = $JsonParameters.PSobject.Properties["time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) {
            throw "Error! JSON cannot be serialized due to the required property 'user' missing."
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transtype"))) {
            throw "Error! JSON cannot be serialized due to the required property 'transtype' missing."
        } else {
            $Transtype = $JsonParameters.PSobject.Properties["transtype"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "origin"))) {
            throw "Error! JSON cannot be serialized due to the required property 'origin' missing."
        } else {
            $Origin = $JsonParameters.PSobject.Properties["origin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interface"))) {
            throw "Error! JSON cannot be serialized due to the required property 'interface' missing."
        } else {
            $Interface = $JsonParameters.PSobject.Properties["interface"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sendingZone"))) {
            throw "Error! JSON cannot be serialized due to the required property 'sendingZone' missing."
        } else {
            $SendingZone = $JsonParameters.PSobject.Properties["sendingZone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bodySize"))) {
            throw "Error! JSON cannot be serialized due to the required property 'bodySize' missing."
        } else {
            $BodySize = $JsonParameters.PSobject.Properties["bodySize"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seq"))) {
            throw "Error! JSON cannot be serialized due to the required property 'seq' missing."
        } else {
            $Seq = $JsonParameters.PSobject.Properties["seq"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recipient"))) {
            throw "Error! JSON cannot be serialized due to the required property 'recipient' missing."
        } else {
            $Recipient = $JsonParameters.PSobject.Properties["recipient"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) {
            throw "Error! JSON cannot be serialized due to the required property 'domain' missing."
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locked"))) {
            throw "Error! JSON cannot be serialized due to the required property 'locked' missing."
        } else {
            $Locked = $JsonParameters.PSobject.Properties["locked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lockTime"))) {
            throw "Error! JSON cannot be serialized due to the required property 'lockTime' missing."
        } else {
            $LockTime = $JsonParameters.PSobject.Properties["lockTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assigned' missing."
        } else {
            $Assigned = $JsonParameters.PSobject.Properties["assigned"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "queued"))) {
            throw "Error! JSON cannot be serialized due to the required property 'queued' missing."
        } else {
            $Queued = $JsonParameters.PSobject.Properties["queued"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mxHostname"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mxHostname' missing."
        } else {
            $MxHostname = $JsonParameters.PSobject.Properties["mxHostname"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response"))) {
            throw "Error! JSON cannot be serialized due to the required property 'response' missing."
        } else {
            $Response = $JsonParameters.PSobject.Properties["response"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "messageId"))) { #optional property not found
            $MessageId = $null
        } else {
            $MessageId = $JsonParameters.PSobject.Properties["messageId"].value
        }

        $PSO = [PSCustomObject]@{
            "_id" = ${Id}
            "id" = ${Id}
            "from" = ${VarFrom}
            "to" = ${To}
            "subject" = ${Subject}
            "messageId" = ${MessageId}
            "created" = ${Created}
            "time" = ${Time}
            "user" = ${User}
            "transtype" = ${Transtype}
            "origin" = ${Origin}
            "interface" = ${Interface}
            "sendingZone" = ${SendingZone}
            "bodySize" = ${BodySize}
            "seq" = ${Seq}
            "recipient" = ${Recipient}
            "domain" = ${Domain}
            "locked" = ${Locked}
            "lockTime" = ${LockTime}
            "assigned" = ${Assigned}
            "queued" = ${Queued}
            "mxHostname" = ${MxHostname}
            "response" = ${Response}
        }

        return $PSO
    }

}


/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIErrorResponse.h"
#include "OAIGenericResponse.h"
#include "OAIMailLog.h"
#include "OAIMailOrder.h"
#include "OAISendMail.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    */
    void getMailById(const qint64 &id);


    void getMailOrders();


    void pingServer();

    /**
    * @param[in]  oai_mail_order OAIMailOrder [optional]
    */
    Q_DECL_DEPRECATED void placeMailOrder(const ::OpenAPI::OptionalParam<OAIMailOrder> &oai_mail_order = ::OpenAPI::OptionalParam<OAIMailOrder>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_send_mail OAISendMail [required]
    */
    void sendAdvMailById(const qint64 &id, const OAISendMail &oai_send_mail);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  subject QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  to_name QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  from_name QString [optional]
    */
    void sendMailById(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_name = ::OpenAPI::OptionalParam<QString>());


    Q_DECL_DEPRECATED void validateMailOrder();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  search_string QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    void viewMailLogById(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &search_string = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void getMailByIdCallback(OAIHttpRequestWorker *worker);
    void getMailOrdersCallback(OAIHttpRequestWorker *worker);
    void pingServerCallback(OAIHttpRequestWorker *worker);
    void placeMailOrderCallback(OAIHttpRequestWorker *worker);
    void sendAdvMailByIdCallback(OAIHttpRequestWorker *worker);
    void sendMailByIdCallback(OAIHttpRequestWorker *worker);
    void validateMailOrderCallback(OAIHttpRequestWorker *worker);
    void viewMailLogByIdCallback(OAIHttpRequestWorker *worker);

signals:

    void getMailByIdSignal(OAIMailOrder summary);
    void getMailOrdersSignal(QList<OAIMailOrder> summary);
    void pingServerSignal();
    void placeMailOrderSignal();
    void sendAdvMailByIdSignal(OAIGenericResponse summary);
    void sendMailByIdSignal(OAIGenericResponse summary);
    void validateMailOrderSignal();
    void viewMailLogByIdSignal(QList<OAIMailLog> summary);

    void getMailByIdSignalFull(OAIHttpRequestWorker *worker, OAIMailOrder summary);
    void getMailOrdersSignalFull(OAIHttpRequestWorker *worker, QList<OAIMailOrder> summary);
    void pingServerSignalFull(OAIHttpRequestWorker *worker);
    void placeMailOrderSignalFull(OAIHttpRequestWorker *worker);
    void sendAdvMailByIdSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void sendMailByIdSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void validateMailOrderSignalFull(OAIHttpRequestWorker *worker);
    void viewMailLogByIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIMailLog> summary);

    void getMailByIdSignalE(OAIMailOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMailOrdersSignalE(QList<OAIMailOrder> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pingServerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void placeMailOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendAdvMailByIdSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMailByIdSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateMailOrderSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void viewMailLogByIdSignalE(QList<OAIMailLog> summary, QNetworkReply::NetworkError error_type, QString error_str);

    void getMailByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMailOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pingServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void placeMailOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendAdvMailByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMailByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateMailOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewMailLogByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace OpenAPI
#endif

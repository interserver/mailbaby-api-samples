/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendMail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendMail::OAISendMail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendMail::OAISendMail() {
    this->initializeModel();
}

OAISendMail::~OAISendMail() {}

void OAISendMail::initializeModel() {

    m_to_isSet = false;
    m_to_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;
}

void OAISendMail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendMail::fromJsonObject(QJsonObject json) {

    m_to_isValid = ::OpenAPI::fromJsonValue(to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;
}

QString OAISendMail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendMail::asJsonObject() const {
    QJsonObject obj;
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(to));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(from));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(subject));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(body));
    }
    return obj;
}

QString OAISendMail::getTo() const {
    return to;
}
void OAISendMail::setTo(const QString &to) {
    this->to = to;
    this->m_to_isSet = true;
}

bool OAISendMail::is_to_Set() const{
    return m_to_isSet;
}

bool OAISendMail::is_to_Valid() const{
    return m_to_isValid;
}

QString OAISendMail::getFrom() const {
    return from;
}
void OAISendMail::setFrom(const QString &from) {
    this->from = from;
    this->m_from_isSet = true;
}

bool OAISendMail::is_from_Set() const{
    return m_from_isSet;
}

bool OAISendMail::is_from_Valid() const{
    return m_from_isValid;
}

QString OAISendMail::getSubject() const {
    return subject;
}
void OAISendMail::setSubject(const QString &subject) {
    this->subject = subject;
    this->m_subject_isSet = true;
}

bool OAISendMail::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAISendMail::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAISendMail::getBody() const {
    return body;
}
void OAISendMail::setBody(const QString &body) {
    this->body = body;
    this->m_body_isSet = true;
}

bool OAISendMail::is_body_Set() const{
    return m_body_isSet;
}

bool OAISendMail::is_body_Valid() const{
    return m_body_isValid;
}

bool OAISendMail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendMail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_to_isValid && m_from_isValid && m_subject_isValid && m_body_isValid && true;
}

} // namespace OpenAPI

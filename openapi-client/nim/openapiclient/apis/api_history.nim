#
# MailBaby Email Delivery and Management Service API
# 
# **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
# The version of the OpenAPI document: 1.1.0
# Contact: support@interserver.net
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_error_message
import ../models/model_mail_log
import ../models/model_get_stats_200_response_inner

const basepath = "https://api.mailbaby.net"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getStats*(httpClient: HttpClient): (Option[seq[getStats_200_response_inner]], Response) =
  ## Account usage statistics.

  let response = httpClient.get(basepath & "/mail/stats")
  constructResult[seq[getStats_200_response_inner]](response)


proc viewMailLog*(httpClient: HttpClient, id: int64, origin: string, mx: string, `from`: string, to: string, subject: string, mailid: string, skip: int, limit: int, startDate: int64, endDate: int64): (Option[MailLog], Response) =
  ## displays the mail log
  let query_for_api_call = encodeQuery([
    ("id", $id), # The ID of your mail order this will be sent through.
    ("origin", $origin), # originating ip address sending mail
    ("mx", $mx), # mx record mail was sent to
    ("from", $`from`), # from email address
    ("to", $to), # to/destination email address
    ("subject", $subject), # subject containing this string
    ("mailid", $mailid), # mail id
    ("skip", $skip), # number of records to skip for pagination
    ("limit", $limit), # maximum number of records to return
    ("startDate", $startDate), # earliest date to get emails in unix timestamp format
    ("endDate", $endDate), # earliest date to get emails in unix timestamp format
  ])

  let response = httpClient.get(basepath & "/mail/log" & "?" & query_for_api_call)
  constructResult[MailLog](response)


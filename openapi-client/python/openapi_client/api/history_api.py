# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

    The version of the OpenAPI document: 1.1.0
    Contact: support@interserver.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, conint

from typing import List, Optional

from openapi_client.models.get_stats200_response_inner import GetStats200ResponseInner
from openapi_client.models.mail_log import MailLog

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class HistoryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_stats(self, **kwargs) -> List[GetStats200ResponseInner]:  # noqa: E501
        """displays a list of blocked email addresses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stats(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[GetStats200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_stats_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_stats_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """displays a list of blocked email addresses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[GetStats200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[GetStats200ResponseInner]",
            '401': "GetMailOrders401Response",
            '404': "GetMailOrders401Response",
        }

        return self.api_client.call_api(
            '/mail/stats', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def view_mail_log(self, id : Annotated[Optional[StrictInt], Field(description="The ID of your mail order this will be sent through.")] = None, origin : Annotated[Optional[StrictStr], Field(description="originating ip address sending mail")] = None, mx : Annotated[Optional[StrictStr], Field(description="mx record mail was sent to")] = None, var_from : Annotated[Optional[StrictStr], Field(description="from email address")] = None, to : Annotated[Optional[StrictStr], Field(description="to/destination email address")] = None, subject : Annotated[Optional[StrictStr], Field(description="subject containing this string")] = None, mailid : Annotated[Optional[StrictStr], Field(description="mail id")] = None, skip : Annotated[Optional[conint(strict=True, ge=0)], Field(description="number of records to skip for pagination")] = None, limit : Annotated[Optional[conint(strict=True, le=10000, ge=1)], Field(description="maximum number of records to return")] = None, start_date : Annotated[Optional[conint(strict=True, le=9999999999, ge=0)], Field(description="earliest date to get emails in unix timestamp format")] = None, end_date : Annotated[Optional[conint(strict=True, le=9999999999, ge=0)], Field(description="earliest date to get emails in unix timestamp format")] = None, **kwargs) -> MailLog:  # noqa: E501
        """displays the mail log  # noqa: E501

        Get a listing of the emails sent through this system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.view_mail_log(id, origin, mx, var_from, to, subject, mailid, skip, limit, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param id: The ID of your mail order this will be sent through.
        :type id: int
        :param origin: originating ip address sending mail
        :type origin: str
        :param mx: mx record mail was sent to
        :type mx: str
        :param var_from: from email address
        :type var_from: str
        :param to: to/destination email address
        :type to: str
        :param subject: subject containing this string
        :type subject: str
        :param mailid: mail id
        :type mailid: str
        :param skip: number of records to skip for pagination
        :type skip: int
        :param limit: maximum number of records to return
        :type limit: int
        :param start_date: earliest date to get emails in unix timestamp format
        :type start_date: int
        :param end_date: earliest date to get emails in unix timestamp format
        :type end_date: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MailLog
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the view_mail_log_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.view_mail_log_with_http_info(id, origin, mx, var_from, to, subject, mailid, skip, limit, start_date, end_date, **kwargs)  # noqa: E501

    @validate_arguments
    def view_mail_log_with_http_info(self, id : Annotated[Optional[StrictInt], Field(description="The ID of your mail order this will be sent through.")] = None, origin : Annotated[Optional[StrictStr], Field(description="originating ip address sending mail")] = None, mx : Annotated[Optional[StrictStr], Field(description="mx record mail was sent to")] = None, var_from : Annotated[Optional[StrictStr], Field(description="from email address")] = None, to : Annotated[Optional[StrictStr], Field(description="to/destination email address")] = None, subject : Annotated[Optional[StrictStr], Field(description="subject containing this string")] = None, mailid : Annotated[Optional[StrictStr], Field(description="mail id")] = None, skip : Annotated[Optional[conint(strict=True, ge=0)], Field(description="number of records to skip for pagination")] = None, limit : Annotated[Optional[conint(strict=True, le=10000, ge=1)], Field(description="maximum number of records to return")] = None, start_date : Annotated[Optional[conint(strict=True, le=9999999999, ge=0)], Field(description="earliest date to get emails in unix timestamp format")] = None, end_date : Annotated[Optional[conint(strict=True, le=9999999999, ge=0)], Field(description="earliest date to get emails in unix timestamp format")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """displays the mail log  # noqa: E501

        Get a listing of the emails sent through this system   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.view_mail_log_with_http_info(id, origin, mx, var_from, to, subject, mailid, skip, limit, start_date, end_date, async_req=True)
        >>> result = thread.get()

        :param id: The ID of your mail order this will be sent through.
        :type id: int
        :param origin: originating ip address sending mail
        :type origin: str
        :param mx: mx record mail was sent to
        :type mx: str
        :param var_from: from email address
        :type var_from: str
        :param to: to/destination email address
        :type to: str
        :param subject: subject containing this string
        :type subject: str
        :param mailid: mail id
        :type mailid: str
        :param skip: number of records to skip for pagination
        :type skip: int
        :param limit: maximum number of records to return
        :type limit: int
        :param start_date: earliest date to get emails in unix timestamp format
        :type start_date: int
        :param end_date: earliest date to get emails in unix timestamp format
        :type end_date: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MailLog, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'origin',
            'mx',
            'var_from',
            'to',
            'subject',
            'mailid',
            'skip',
            'limit',
            'start_date',
            'end_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method view_mail_log" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))

        if _params.get('origin') is not None:  # noqa: E501
            _query_params.append(('origin', _params['origin']))

        if _params.get('mx') is not None:  # noqa: E501
            _query_params.append(('mx', _params['mx']))

        if _params.get('var_from') is not None:  # noqa: E501
            _query_params.append(('from', _params['var_from']))

        if _params.get('to') is not None:  # noqa: E501
            _query_params.append(('to', _params['to']))

        if _params.get('subject') is not None:  # noqa: E501
            _query_params.append(('subject', _params['subject']))

        if _params.get('mailid') is not None:  # noqa: E501
            _query_params.append(('mailid', _params['mailid']))

        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKeyAuth']  # noqa: E501

        _response_types_map = {
            '200': "MailLog",
            '400': None,
        }

        return self.api_client.call_api(
            '/mail/log', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

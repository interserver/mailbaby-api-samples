#
# MailBaby Email Delivery and Management Service API
# **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
# Version: 1.1.0
# Contact: support@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ClientdomainCom
No description available.
.PARAMETER UsersiteNet
No description available.
.PARAMETER SalescompanyCom
No description available.
.PARAMETER ClientanothersiteCom
No description available.
.OUTPUTS

MailStatsTypeVolumeTo<PSCustomObject>
#>

function Initialize-MailStatsTypeVolumeTo {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ClientdomainCom},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UsersiteNet},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SalescompanyCom},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ClientanothersiteCom}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MailStatsTypeVolumeTo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "client@domain.com" = ${ClientdomainCom}
            "user@site.net" = ${UsersiteNet}
            "sales@company.com" = ${SalescompanyCom}
            "client@anothersite.com" = ${ClientanothersiteCom}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MailStatsTypeVolumeTo<PSCustomObject>

.DESCRIPTION

Convert from JSON to MailStatsTypeVolumeTo<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MailStatsTypeVolumeTo<PSCustomObject>
#>
function ConvertFrom-JsonToMailStatsTypeVolumeTo {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MailStatsTypeVolumeTo' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MailStatsTypeVolumeTo
        $AllProperties = ("client@domain.com", "user@site.net", "sales@company.com", "client@anothersite.com")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client@domain.com"))) { #optional property not found
            $ClientdomainCom = $null
        } else {
            $ClientdomainCom = $JsonParameters.PSobject.Properties["client@domain.com"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user@site.net"))) { #optional property not found
            $UsersiteNet = $null
        } else {
            $UsersiteNet = $JsonParameters.PSobject.Properties["user@site.net"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sales@company.com"))) { #optional property not found
            $SalescompanyCom = $null
        } else {
            $SalescompanyCom = $JsonParameters.PSobject.Properties["sales@company.com"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client@anothersite.com"))) { #optional property not found
            $ClientanothersiteCom = $null
        } else {
            $ClientanothersiteCom = $JsonParameters.PSobject.Properties["client@anothersite.com"].value
        }

        $PSO = [PSCustomObject]@{
            "client@domain.com" = ${ClientdomainCom}
            "user@site.net" = ${UsersiteNet}
            "sales@company.com" = ${SalescompanyCom}
            "client@anothersite.com" = ${ClientanothersiteCom}
        }

        return $PSO
    }

}


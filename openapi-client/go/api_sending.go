/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SendingAPIService SendingAPI service
type SendingAPIService service

type ApiSendAdvMailRequest struct {
	ctx context.Context
	ApiService *SendingAPIService
	subject *string
	body *string
	from *EmailAddressTypes
	to *EmailAddressesTypes
	replyto *EmailAddressesTypes
	cc *EmailAddressesTypes
	bcc *EmailAddressesTypes
	attachments *[]MailAttachment
	id *int64
}

// The subject or title of the email
func (r ApiSendAdvMailRequest) Subject(subject string) ApiSendAdvMailRequest {
	r.subject = &subject
	return r
}

// The main email contents.
func (r ApiSendAdvMailRequest) Body(body string) ApiSendAdvMailRequest {
	r.body = &body
	return r
}

func (r ApiSendAdvMailRequest) From(from EmailAddressTypes) ApiSendAdvMailRequest {
	r.from = &from
	return r
}

func (r ApiSendAdvMailRequest) To(to EmailAddressesTypes) ApiSendAdvMailRequest {
	r.to = &to
	return r
}

func (r ApiSendAdvMailRequest) Replyto(replyto EmailAddressesTypes) ApiSendAdvMailRequest {
	r.replyto = &replyto
	return r
}

func (r ApiSendAdvMailRequest) Cc(cc EmailAddressesTypes) ApiSendAdvMailRequest {
	r.cc = &cc
	return r
}

func (r ApiSendAdvMailRequest) Bcc(bcc EmailAddressesTypes) ApiSendAdvMailRequest {
	r.bcc = &bcc
	return r
}

// (optional) File attachments to include in the email.  The file contents must be base64 encoded!
func (r ApiSendAdvMailRequest) Attachments(attachments []MailAttachment) ApiSendAdvMailRequest {
	r.attachments = &attachments
	return r
}

// (optional)  ID of the Mail order within our system to use as the Mail Account.
func (r ApiSendAdvMailRequest) Id(id int64) ApiSendAdvMailRequest {
	r.id = &id
	return r
}

func (r ApiSendAdvMailRequest) Execute() (*GenericResponse, *http.Response, error) {
	return r.ApiService.SendAdvMailExecute(r)
}

/*
SendAdvMail Sends an Email with Advanced Options

Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.

Here are 9 examples showing the various ways to call the advsend operation showing the different ways you can pass the to, cc, bcc, and replyto information. The first several examples are all for the application/x-www-form-urlencoded content-type while the later ones are for application/json content-types.

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data 'subject=Welcome' \
--data 'body=Hello' \
--data from=user@domain.com \
--data to=support@interserver.net
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data 'subject=Welcome' \
--data 'body=Hello' \
--data from=user@domain.com \
--data "to[0][name]=Joe" \
--data "to[0][email]=support@interserver.net"
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data 'subject=Welcome' \
--data 'body=Hello' \
--data from="Joe <user@domain.com>" \
--data to="Joe <support@interserver.net>"
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data 'subject=Welcome' \
--data 'body=Hello' \
--data from=user@domain.com \
--data "to=support@interserver.net, support@interserver.net"
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data 'subject=Welcome' \
--data 'body=Hello' \
--data from=user@domain.com \
--data "to=Joe <support@interserver.net>, Joe <support@interserver.net>"
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/x-www-form-urlencoded' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data 'subject=Welcome' \
--data 'body=Hello' \
--data from=user@domain.com \
--data "to[0][name]=Joe" \
--data "to[0][email]=support@interserver.net" \
--data "to[1][name]=Joe" \
--data "to[1][email]=support@interserver.net"
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data '{
"subject": "Welcome",
"body": "Hello",
"from": "user@domain.com",
"to": "support@interserver.net"
}'
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data '{
"subject": "Welcome",
"body": "Hello",
"from": {"name": "Joe", "email": "user@domain.com"},
"to": [{"name": "Joe", "email": "support@interserver.net"}]
}'
```

```
curl -i --request POST --url https://api.mailbaby.net/mail/advsend \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'X-API-KEY: YOUR_API_KEY' \
--data '{
"subject": "Welcome",
"body": "Hello",
"from": "Joe <user@domain.com>",
"to": "Joe <support@interserver.net>"
}'
```


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSendAdvMailRequest
*/
func (a *SendingAPIService) SendAdvMail(ctx context.Context) ApiSendAdvMailRequest {
	return ApiSendAdvMailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GenericResponse
func (a *SendingAPIService) SendAdvMailExecute(r ApiSendAdvMailRequest) (*GenericResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GenericResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SendingAPIService.SendAdvMail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mail/advsend"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subject == nil {
		return localVarReturnValue, nil, reportError("subject is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}
	if r.from == nil {
		return localVarReturnValue, nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, nil, reportError("to is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "subject", r.subject, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "body", r.body, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "to", r.to, "")
	if r.replyto != nil {
		paramJson, err := parameterToJson(*r.replyto)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("replyto", paramJson)
	}
	if r.cc != nil {
		paramJson, err := parameterToJson(*r.cc)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("cc", paramJson)
	}
	if r.bcc != nil {
		paramJson, err := parameterToJson(*r.bcc)
		if err != nil {
			return localVarReturnValue, nil, err
		}
		localVarFormParams.Add("bcc", paramJson)
	}
	if r.attachments != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "attachments", r.attachments, "csv")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "id", r.id, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendMailRequest struct {
	ctx context.Context
	ApiService *SendingAPIService
	to *string
	from *string
	subject *string
	body *string
}

// The Contact whom is the primary recipient of this email.
func (r ApiSendMailRequest) To(to string) ApiSendMailRequest {
	r.to = &to
	return r
}

// The contact whom is the this email is from.
func (r ApiSendMailRequest) From(from string) ApiSendMailRequest {
	r.from = &from
	return r
}

// The subject or title of the email
func (r ApiSendMailRequest) Subject(subject string) ApiSendMailRequest {
	r.subject = &subject
	return r
}

// The main email contents.
func (r ApiSendMailRequest) Body(body string) ApiSendMailRequest {
	r.body = &body
	return r
}

func (r ApiSendMailRequest) Execute() (*GenericResponse, *http.Response, error) {
	return r.ApiService.SendMailExecute(r)
}

/*
SendMail Sends an Email

Sends an email through one of your mail orders.

*Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSendMailRequest
*/
func (a *SendingAPIService) SendMail(ctx context.Context) ApiSendMailRequest {
	return ApiSendMailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GenericResponse
func (a *SendingAPIService) SendMailExecute(r ApiSendMailRequest) (*GenericResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GenericResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SendingAPIService.SendMail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mail/send"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.to == nil {
		return localVarReturnValue, nil, reportError("to is required and must be specified")
	}
	if r.from == nil {
		return localVarReturnValue, nil, reportError("from is required and must be specified")
	}
	if r.subject == nil {
		return localVarReturnValue, nil, reportError("subject is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded", "application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "to", r.to, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "subject", r.subject, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "body", r.body, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-KEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

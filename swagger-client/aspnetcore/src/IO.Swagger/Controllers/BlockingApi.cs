/*
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BlockingApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>Adds a new email deny rule into the system to block new emails that match the given criteria</remarks>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">Error message when there was a problem with the input parameters.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/mail/rules")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddRule")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenericResponse), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Error message when there was a problem with the input parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "The specified resource was not found")]
        public virtual IActionResult AddRule([FromBody]DenyRuleNew body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenericResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"The command completed successfully.\",\n  \"status\" : \"ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GenericResponse>(exampleJson)
                        : default(GenericResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an deny mail rule.
        /// </summary>
        /// <remarks>Removes one of the configured deny mail rules from the system.</remarks>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">Error message when there was a problem with the input parameters.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/mail/rules/{ruleId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteRule")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenericResponse), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Error message when there was a problem with the input parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "The specified resource was not found")]
        public virtual IActionResult DeleteRule([FromRoute][Required]int? ruleId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenericResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"The command completed successfully.\",\n  \"status\" : \"ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GenericResponse>(exampleJson)
                        : default(GenericResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an email address from the blocked list
        /// </summary>
        /// <remarks>Removes an email address from the various block lists. </remarks>
        /// <param name="body"></param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">Error message when there was a problem with the input parameters.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/mail/blocks/delete")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DelistBlock")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenericResponse), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Error message when there was a problem with the input parameters.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "The specified resource was not found")]
        public virtual IActionResult DelistBlock([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenericResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"The command completed successfully.\",\n  \"status\" : \"ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GenericResponse>(exampleJson)
                        : default(GenericResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// displays a list of blocked email addresses
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Unauthorized</response>
        [HttpGet]
        [Route("/mail/blocks")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetMailBlocks")]
        [SwaggerResponse(statusCode: 200, type: typeof(MailBlocks), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "Unauthorized")]
        public virtual IActionResult GetMailBlocks()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MailBlocks));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\n  \"local\" : [ {\n    \"date\" : \"2023-08-07\",\n    \"from\" : \"user@domain.com\",\n    \"messageId\" : \"pFaRqFUEWkucjhTuIzYuoAgWU@domain.com\",\n    \"subject\" : \"Test Email\",\n    \"to\" : \"['client@site.com']\"\n  } ],\n  \"mbtrap\" : [ {\n    \"date\" : \"2023-08-07\",\n    \"from\" : \"user@domain.com\",\n    \"messageId\" : \"pFaRqFUEWkucjhTuIzYuoAgWU@domain.com\",\n    \"subject\" : \"Test Email\",\n    \"to\" : \"['client@site.com']\"\n  } ],\n  \"subject\" : [ {\n    \"from\" : \"user@domain.com\",\n    \"subject\" : \"Test Email\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MailBlocks>(exampleJson)
                        : default(MailBlocks);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Displays a listing of deny email rules.
        /// </summary>
        /// <remarks>Returns a listing of all the deny block rules you have configured.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Unauthorized</response>
        [HttpGet]
        [Route("/mail/rules")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetRules")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DenyRuleRecord>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorMessage), description: "Unauthorized")]
        public virtual IActionResult GetRules()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DenyRuleRecord>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "[ {\n  \"id\" : 14,\n  \"user\" : \"mb20682\",\n  \"type\" : \"email\",\n  \"data\" : \"domeinwo@server.guesshost.net\",\n  \"created\" : \"2022-03-22 19:16:35\"\n}, {\n  \"id\" : 14,\n  \"user\" : \"mb20682\",\n  \"type\" : \"email\",\n  \"data\" : \"domeinwo@server.guesshost.net\",\n  \"created\" : \"2022-03-22 19:16:35\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DenyRuleRecord>>(exampleJson)
                        : default(List<DenyRuleRecord>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

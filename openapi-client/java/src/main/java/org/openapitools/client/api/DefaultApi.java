/*
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GenericResponse;
import org.openapitools.client.model.MailLog;
import org.openapitools.client.model.MailOrder;
import org.openapitools.client.model.SendMail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getMailOrders
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailOrdersCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailOrdersValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMailOrdersCall(id, _callback);
        return localVarCall;

    }

    /**
     * displays a list of mail service orders
     * 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @return List&lt;MailOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<MailOrder> getMailOrders(Long id) throws ApiException {
        ApiResponse<List<MailOrder>> localVarResp = getMailOrdersWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * displays a list of mail service orders
     * 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @return ApiResponse&lt;List&lt;MailOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MailOrder>> getMailOrdersWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getMailOrdersValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<MailOrder>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * displays a list of mail service orders (asynchronously)
     * 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMailOrdersAsync(Long id, final ApiCallback<List<MailOrder>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailOrdersValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<MailOrder>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pingServer
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server is up and running </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Something is wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingServerCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pingServerValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = pingServerCall(_callback);
        return localVarCall;

    }

    /**
     * Checks if the server is running
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server is up and running </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Something is wrong </td><td>  -  </td></tr>
     </table>
     */
    public void pingServer() throws ApiException {
        pingServerWithHttpInfo();
    }

    /**
     * Checks if the server is running
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server is up and running </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Something is wrong </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pingServerWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pingServerValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Checks if the server is running (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server is up and running </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Something is wrong </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pingServerAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pingServerValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for placeMailOrder
     * @param mailOrder Inventory item to add (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call placeMailOrderCall(MailOrder mailOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mailOrder;

        // create path and map variables
        String localVarPath = "/mail/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeMailOrderValidateBeforeCall(MailOrder mailOrder, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = placeMailOrderCall(mailOrder, _callback);
        return localVarCall;

    }

    /**
     * places a mail order
     * Adds an item to the system
     * @param mailOrder Inventory item to add (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void placeMailOrder(MailOrder mailOrder) throws ApiException {
        placeMailOrderWithHttpInfo(mailOrder);
    }

    /**
     * places a mail order
     * Adds an item to the system
     * @param mailOrder Inventory item to add (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> placeMailOrderWithHttpInfo(MailOrder mailOrder) throws ApiException {
        okhttp3.Call localVarCall = placeMailOrderValidateBeforeCall(mailOrder, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * places a mail order (asynchronously)
     * Adds an item to the system
     * @param mailOrder Inventory item to add (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input, object invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> an existing item already exists </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call placeMailOrderAsync(MailOrder mailOrder, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = placeMailOrderValidateBeforeCall(mailOrder, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendAdvMailById
     * @param sendMail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendAdvMailByIdCall(SendMail sendMail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendMail;

        // create path and map variables
        String localVarPath = "/mail/advsend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendAdvMailByIdValidateBeforeCall(SendMail sendMail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sendMail' is set
        if (sendMail == null) {
            throw new ApiException("Missing the required parameter 'sendMail' when calling sendAdvMailById(Async)");
        }
        

        okhttp3.Call localVarCall = sendAdvMailByIdCall(sendMail, _callback);
        return localVarCall;

    }

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param sendMail  (required)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse sendAdvMailById(SendMail sendMail) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = sendAdvMailByIdWithHttpInfo(sendMail);
        return localVarResp.getData();
    }

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param sendMail  (required)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> sendAdvMailByIdWithHttpInfo(SendMail sendMail) throws ApiException {
        okhttp3.Call localVarCall = sendAdvMailByIdValidateBeforeCall(sendMail, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends an Email with Advanced Options (asynchronously)
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param sendMail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendAdvMailByIdAsync(SendMail sendMail, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendAdvMailByIdValidateBeforeCall(sendMail, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMailById
     * @param subject The Subject of the email (required)
     * @param body The contents of the email (required)
     * @param from The email address of who this email will be sent from. (required)
     * @param to The email address of who this email will be sent to. (required)
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param toName The name or title of who this email is being sent to. (optional)
     * @param fromName The name or title of who this email is being sent from. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMailByIdCall(String subject, String body, String from, String to, Integer id, String toName, String fromName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mail/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        if (body != null) {
            localVarFormParams.put("body", body);
        }

        if (from != null) {
            localVarFormParams.put("from", from);
        }

        if (to != null) {
            localVarFormParams.put("to", to);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (toName != null) {
            localVarFormParams.put("toName", toName);
        }

        if (fromName != null) {
            localVarFormParams.put("fromName", fromName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMailByIdValidateBeforeCall(String subject, String body, String from, String to, Integer id, String toName, String fromName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling sendMailById(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendMailById(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling sendMailById(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sendMailById(Async)");
        }
        

        okhttp3.Call localVarCall = sendMailByIdCall(subject, body, from, to, id, toName, fromName, _callback);
        return localVarCall;

    }

    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param subject The Subject of the email (required)
     * @param body The contents of the email (required)
     * @param from The email address of who this email will be sent from. (required)
     * @param to The email address of who this email will be sent to. (required)
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param toName The name or title of who this email is being sent to. (optional)
     * @param fromName The name or title of who this email is being sent from. (optional)
     * @return GenericResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public GenericResponse sendMailById(String subject, String body, String from, String to, Integer id, String toName, String fromName) throws ApiException {
        ApiResponse<GenericResponse> localVarResp = sendMailByIdWithHttpInfo(subject, body, from, to, id, toName, fromName);
        return localVarResp.getData();
    }

    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param subject The Subject of the email (required)
     * @param body The contents of the email (required)
     * @param from The email address of who this email will be sent from. (required)
     * @param to The email address of who this email will be sent to. (required)
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param toName The name or title of who this email is being sent to. (optional)
     * @param fromName The name or title of who this email is being sent from. (optional)
     * @return ApiResponse&lt;GenericResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenericResponse> sendMailByIdWithHttpInfo(String subject, String body, String from, String to, Integer id, String toName, String fromName) throws ApiException {
        okhttp3.Call localVarCall = sendMailByIdValidateBeforeCall(subject, body, from, to, id, toName, fromName, null);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sends an Email (asynchronously)
     * Sends An email through one of your mail orders.
     * @param subject The Subject of the email (required)
     * @param body The contents of the email (required)
     * @param from The email address of who this email will be sent from. (required)
     * @param to The email address of who this email will be sent to. (required)
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param toName The name or title of who this email is being sent to. (optional)
     * @param fromName The name or title of who this email is being sent from. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMailByIdAsync(String subject, String body, String from, String to, Integer id, String toName, String fromName, final ApiCallback<GenericResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMailByIdValidateBeforeCall(subject, body, from, to, id, toName, fromName, _callback);
        Type localVarReturnType = new TypeToken<GenericResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateMailOrder
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call validateMailOrderCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mail/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateMailOrderValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = validateMailOrderCall(_callback);
        return localVarCall;

    }

    /**
     * validatess order details before placing an order
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void validateMailOrder() throws ApiException {
        validateMailOrderWithHttpInfo();
    }

    /**
     * validatess order details before placing an order
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> validateMailOrderWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = validateMailOrderValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * validatess order details before placing an order (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of mail orders </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call validateMailOrderAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateMailOrderValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewMailLogById
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param searchString pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional)
     * @param limit maximum number of records to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewMailLogByIdCall(Long id, String searchString, Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mail/log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (searchString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchString", searchString));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewMailLogByIdValidateBeforeCall(Long id, String searchString, Integer skip, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = viewMailLogByIdCall(id, searchString, skip, limit, _callback);
        return localVarCall;

    }

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param searchString pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional)
     * @param limit maximum number of records to return (optional)
     * @return List&lt;MailLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public List<MailLog> viewMailLogById(Long id, String searchString, Integer skip, Integer limit) throws ApiException {
        ApiResponse<List<MailLog>> localVarResp = viewMailLogByIdWithHttpInfo(id, searchString, skip, limit);
        return localVarResp.getData();
    }

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param searchString pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional)
     * @param limit maximum number of records to return (optional)
     * @return ApiResponse&lt;List&lt;MailLog&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MailLog>> viewMailLogByIdWithHttpInfo(Long id, String searchString, Integer skip, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = viewMailLogByIdValidateBeforeCall(id, searchString, skip, limit, null);
        Type localVarReturnType = new TypeToken<List<MailLog>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * displays the mail log (asynchronously)
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param searchString pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional)
     * @param limit maximum number of records to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search results matching criteria </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad input parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewMailLogByIdAsync(Long id, String searchString, Integer skip, Integer limit, final ApiCallback<List<MailLog>> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewMailLogByIdValidateBeforeCall(id, searchString, skip, limit, _callback);
        Type localVarReturnType = new TypeToken<List<MailLog>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

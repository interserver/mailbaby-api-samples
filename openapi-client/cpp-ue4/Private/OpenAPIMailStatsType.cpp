/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMailStatsType.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIMailStatsType::TimeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMailStatsType::TimeEnum::All:
		return TEXT("all");
	case OpenAPIMailStatsType::TimeEnum::Billing:
		return TEXT("billing");
	case OpenAPIMailStatsType::TimeEnum::Month:
		return TEXT("month");
	case OpenAPIMailStatsType::TimeEnum::_7d:
		return TEXT("7d");
	case OpenAPIMailStatsType::TimeEnum::_24h:
		return TEXT("24h");
	case OpenAPIMailStatsType::TimeEnum::Today:
		return TEXT("today");
	case OpenAPIMailStatsType::TimeEnum::_1h:
		return TEXT("1h");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMailStatsType::TimeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIMailStatsType::EnumToString(const OpenAPIMailStatsType::TimeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMailStatsType::TimeEnum& Value)
{
	static TMap<FString, OpenAPIMailStatsType::TimeEnum> StringToEnum = { 
		{ TEXT("all"), OpenAPIMailStatsType::TimeEnum::All },
		{ TEXT("billing"), OpenAPIMailStatsType::TimeEnum::Billing },
		{ TEXT("month"), OpenAPIMailStatsType::TimeEnum::Month },
		{ TEXT("7d"), OpenAPIMailStatsType::TimeEnum::_7d },
		{ TEXT("24h"), OpenAPIMailStatsType::TimeEnum::_24h },
		{ TEXT("today"), OpenAPIMailStatsType::TimeEnum::Today },
		{ TEXT("1h"), OpenAPIMailStatsType::TimeEnum::_1h }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIMailStatsType::EnumFromString(const FString& EnumAsString, OpenAPIMailStatsType::TimeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMailStatsType::TimeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMailStatsType::TimeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIMailStatsType::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Time.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("time")); WriteJsonValue(Writer, Time.GetValue());
	}
	if (Usage.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("usage")); WriteJsonValue(Writer, Usage.GetValue());
	}
	if (Currency.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currency")); WriteJsonValue(Writer, Currency.GetValue());
	}
	if (CurrencySymbol.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("currencySymbol")); WriteJsonValue(Writer, CurrencySymbol.GetValue());
	}
	if (Cost.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("cost")); WriteJsonValue(Writer, Cost.GetValue());
	}
	if (Received.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("received")); WriteJsonValue(Writer, Received.GetValue());
	}
	if (Sent.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sent")); WriteJsonValue(Writer, Sent.GetValue());
	}
	if (Volume.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("volume")); WriteJsonValue(Writer, Volume.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIMailStatsType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("time"), Time);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("usage"), Usage);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currency"), Currency);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("currencySymbol"), CurrencySymbol);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cost"), Cost);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("received"), Received);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sent"), Sent);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("volume"), Volume);

	return ParseSuccess;
}

}

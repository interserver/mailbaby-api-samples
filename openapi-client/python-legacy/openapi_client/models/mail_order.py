# coding: utf-8

"""
    Mail Baby API

    This is an API for accesssing the mail services.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: detain@interserver.net
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class MailOrder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'status': 'str',
        'username': 'str',
        'password': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'id': 'id',
        'status': 'status',
        'username': 'username',
        'password': 'password',
        'comment': 'comment'
    }

    def __init__(self, id=None, status=None, username=None, password=None, comment=None, local_vars_configuration=None):  # noqa: E501
        """MailOrder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._status = None
        self._username = None
        self._password = None
        self._comment = None
        self.discriminator = None

        self.id = id
        self.status = status
        self.username = username
        if password is not None:
            self.password = password
        if comment is not None:
            self.comment = comment

    @property
    def id(self):
        """Gets the id of this MailOrder.  # noqa: E501


        :return: The id of this MailOrder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MailOrder.


        :param id: The id of this MailOrder.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this MailOrder.  # noqa: E501


        :return: The status of this MailOrder.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MailOrder.


        :param status: The status of this MailOrder.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def username(self):
        """Gets the username of this MailOrder.  # noqa: E501


        :return: The username of this MailOrder.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MailOrder.


        :param username: The username of this MailOrder.  # noqa: E501
        :type username: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this MailOrder.  # noqa: E501


        :return: The password of this MailOrder.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MailOrder.


        :param password: The password of this MailOrder.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def comment(self):
        """Gets the comment of this MailOrder.  # noqa: E501


        :return: The comment of this MailOrder.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MailOrder.


        :param comment: The comment of this MailOrder.  # noqa: E501
        :type comment: str
        """

        self._comment = comment

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MailOrder):
            return True

        return self.to_dict() != other.to_dict()

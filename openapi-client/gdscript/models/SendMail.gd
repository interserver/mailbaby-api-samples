extends Resource
class_name SendMail

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# SendMail Model
# Details for an Email


# The Contact whom is the primary recipient of this email.
# Required: True
# Example: johndoe@company.com
# isArray: false
@export var to: String = "":
	set(value):
		__to__was__set = true
		to = value
var __to__was__set := false

# The contact whom is the this email is from.
# Required: True
# Example: janedoe@company.com
# isArray: false
@export var from: String = "":
	set(value):
		__from__was__set = true
		from = value
var __from__was__set := false

# The subject or title of the email
# Required: True
# Example: Attention Client
# isArray: false
@export var subject: String = "":
	set(value):
		__subject__was__set = true
		subject = value
var __subject__was__set := false

# The main email contents.
# Required: True
# Example: This is an email to inform you that something noteworthy happened.
# isArray: false
@export var body: String = "":
	set(value):
		__body__was__set = true
		body = value
var __body__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__to__was__set:
		bzz_missing_properties.append("to")
	if not self.__from__was__set:
		bzz_missing_properties.append("from")
	if not self.__subject__was__set:
		bzz_missing_properties.append("subject")
	if not self.__body__was__set:
		bzz_missing_properties.append("body")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__to__was__set:
		bzz_dictionary["to"] = self.to
	if self.__from__was__set:
		bzz_dictionary["from"] = self.from
	if self.__subject__was__set:
		bzz_dictionary["subject"] = self.subject
	if self.__body__was__set:
		bzz_dictionary["body"] = self.body
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("to"):
		me.to = from_dict["to"]
	if from_dict.has("from"):
		me.from = from_dict["from"]
	if from_dict.has("subject"):
		me.subject = from_dict["subject"]
	if from_dict.has("body"):
		me.body = from_dict["body"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


/* tslint:disable */
/* eslint-disable */
/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericResponse,
  GetMailOrders200ResponseInner,
  GetMailOrders401Response,
  MailLog,
  SendMailAdv,
} from '../models';
import {
    GenericResponseFromJSON,
    GenericResponseToJSON,
    GetMailOrders200ResponseInnerFromJSON,
    GetMailOrders200ResponseInnerToJSON,
    GetMailOrders401ResponseFromJSON,
    GetMailOrders401ResponseToJSON,
    MailLogFromJSON,
    MailLogToJSON,
    SendMailAdvFromJSON,
    SendMailAdvToJSON,
} from '../models';

export interface SendAdvMailRequest {
    sendMailAdv: SendMailAdv;
}

export interface SendMailRequest {
    to: string;
    from: string;
    subject: string;
    body: string;
}

export interface ViewMailLogRequest {
    id?: number;
    search?: string;
    skip?: number;
    limit?: number;
    startDate?: number;
    endDate?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * displays a list of mail service orders
     */
    async getMailOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetMailOrders200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetMailOrders200ResponseInnerFromJSON));
    }

    /**
     * displays a list of mail service orders
     */
    async getMailOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetMailOrders200ResponseInner>> {
        const response = await this.getMailOrdersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Checks if the server is running
     */
    async pingServerRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Checks if the server is running
     */
    async pingServer(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pingServerRaw(initOverrides);
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    async sendAdvMailRaw(requestParameters: SendAdvMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.sendMailAdv === null || requestParameters.sendMailAdv === undefined) {
            throw new runtime.RequiredError('sendMailAdv','Required parameter requestParameters.sendMailAdv was null or undefined when calling sendAdvMail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/advsend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMailAdvToJSON(requestParameters.sendMailAdv),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    async sendAdvMail(requestParameters: SendAdvMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.sendAdvMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * Sends an Email
     */
    async sendMailRaw(requestParameters: SendMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendMail.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling sendMail.');
        }

        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling sendMail.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendMail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.to !== undefined) {
            formParams.append('to', requestParameters.to as any);
        }

        if (requestParameters.from !== undefined) {
            formParams.append('from', requestParameters.from as any);
        }

        if (requestParameters.subject !== undefined) {
            formParams.append('subject', requestParameters.subject as any);
        }

        if (requestParameters.body !== undefined) {
            formParams.append('body', requestParameters.body as any);
        }

        const response = await this.request({
            path: `/mail/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * Sends an Email
     */
    async sendMail(requestParameters: SendMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.sendMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * displays the mail log
     */
    async viewMailLogRaw(requestParameters: ViewMailLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailLog>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailLogFromJSON(jsonValue));
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * displays the mail log
     */
    async viewMailLog(requestParameters: ViewMailLogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailLog> {
        const response = await this.viewMailLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

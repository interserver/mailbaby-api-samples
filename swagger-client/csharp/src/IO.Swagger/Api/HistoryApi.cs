/* 
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IHistoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Account usage statistics.
        /// </summary>
        /// <remarks>
        /// Returns information about the usage on your mail accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> GetStats ();

        /// <summary>
        /// Account usage statistics.
        /// </summary>
        /// <remarks>
        /// Returns information about the usage on your mail accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> GetStatsWithHttpInfo ();
        /// <summary>
        /// displays the mail log
        /// </summary>
        /// <remarks>
        /// Get a listing of the emails sent through this system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>MailLog</returns>
        MailLog ViewMailLog (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null);

        /// <summary>
        /// displays the mail log
        /// </summary>
        /// <remarks>
        /// Get a listing of the emails sent through this system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>ApiResponse of MailLog</returns>
        ApiResponse<MailLog> ViewMailLogWithHttpInfo (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Account usage statistics.
        /// </summary>
        /// <remarks>
        /// Returns information about the usage on your mail accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> GetStatsAsync ();

        /// <summary>
        /// Account usage statistics.
        /// </summary>
        /// <remarks>
        /// Returns information about the usage on your mail accounts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> GetStatsAsyncWithHttpInfo ();
        /// <summary>
        /// displays the mail log
        /// </summary>
        /// <remarks>
        /// Get a listing of the emails sent through this system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>Task of MailLog</returns>
        System.Threading.Tasks.Task<MailLog> ViewMailLogAsync (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null);

        /// <summary>
        /// displays the mail log
        /// </summary>
        /// <remarks>
        /// Get a listing of the emails sent through this system 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>Task of ApiResponse (MailLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailLog>> ViewMailLogAsyncWithHttpInfo (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class HistoryApi : IHistoryApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoryApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class
        /// </summary>
        /// <returns></returns>
        public HistoryApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HistoryApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Account usage statistics. Returns information about the usage on your mail accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> GetStats ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = GetStatsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Account usage statistics. Returns information about the usage on your mail accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > GetStatsWithHttpInfo ()
        {

            var localVarPath = "/mail/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse200>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        /// Account usage statistics. Returns information about the usage on your mail accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> GetStatsAsync ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await GetStatsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Account usage statistics. Returns information about the usage on your mail accounts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> GetStatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/mail/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse200>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        /// displays the mail log Get a listing of the emails sent through this system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>MailLog</returns>
        public MailLog ViewMailLog (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null)
        {
             ApiResponse<MailLog> localVarResponse = ViewMailLogWithHttpInfo(id, origin, mx, from, to, subject, mailid, skip, limit, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// displays the mail log Get a listing of the emails sent through this system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>ApiResponse of MailLog</returns>
        public ApiResponse< MailLog > ViewMailLogWithHttpInfo (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null)
        {

            var localVarPath = "/mail/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (mx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mx", mx)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (mailid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mailid", mailid)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewMailLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailLog)));
        }

        /// <summary>
        /// displays the mail log Get a listing of the emails sent through this system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>Task of MailLog</returns>
        public async System.Threading.Tasks.Task<MailLog> ViewMailLogAsync (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null)
        {
             ApiResponse<MailLog> localVarResponse = await ViewMailLogAsyncWithHttpInfo(id, origin, mx, from, to, subject, mailid, skip, limit, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// displays the mail log Get a listing of the emails sent through this system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of your mail order this will be sent through. (optional)</param>
        /// <param name="origin">originating ip address sending mail (optional)</param>
        /// <param name="mx">mx record mail was sent to (optional)</param>
        /// <param name="from">from email address (optional)</param>
        /// <param name="to">to/destination email address (optional)</param>
        /// <param name="subject">subject containing this string (optional)</param>
        /// <param name="mailid">mail id (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
        /// <param name="limit">maximum number of records to return (optional, default to 100)</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format (optional)</param>
        /// <returns>Task of ApiResponse (MailLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailLog>> ViewMailLogAsyncWithHttpInfo (long? id = null, string origin = null, string mx = null, string from = null, string to = null, string subject = null, string mailid = null, int? skip = null, int? limit = null, long? startDate = null, long? endDate = null)
        {

            var localVarPath = "/mail/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (origin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "origin", origin)); // query parameter
            if (mx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mx", mx)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (subject != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subject", subject)); // query parameter
            if (mailid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mailid", mailid)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewMailLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailLog)));
        }

    }
}

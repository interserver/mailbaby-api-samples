/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_


#include "../ApiClient.h"

#include "ErrorResponse.h"
#include "GenericResponse.h"
#include "MailLog.h"
#include "MailOrder.h"
#include "SendMail.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DefaultApi 
{
public:

    explicit DefaultApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DefaultApi();

    /// <summary>
    /// Gets mail order information by id
    /// </summary>
    /// <remarks>
    /// returns information about a mail order in the system with the given id.
    /// </remarks>
    /// <param name="id">User ID</param>
    pplx::task<std::shared_ptr<MailOrder>> getMailById(
        int64_t id
    ) const;
    /// <summary>
    /// displays a list of mail service orders
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<MailOrder>>> getMailOrders(
    ) const;
    /// <summary>
    /// Checks if the server is running
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> pingServer(
    ) const;
    /// <summary>
    /// places a mail order
    /// </summary>
    /// <remarks>
    /// Adds an item to the system
    /// </remarks>
    /// <param name="mailOrder">Inventory item to add (optional)</param>
    pplx::task<void> placeMailOrder(
        boost::optional<std::shared_ptr<MailOrder>> mailOrder
    ) const;
    /// <summary>
    /// Sends an Email with Advanced Options
    /// </summary>
    /// <remarks>
    /// Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    /// </remarks>
    /// <param name="id">User ID</param>
    /// <param name="sendMail"></param>
    pplx::task<std::shared_ptr<GenericResponse>> sendAdvMailById(
        int64_t id,
        std::shared_ptr<SendMail> sendMail
    ) const;
    /// <summary>
    /// Sends an Email
    /// </summary>
    /// <remarks>
    /// Sends An email through one of your mail orders.
    /// </remarks>
    /// <param name="id">User ID</param>
    /// <param name="subject"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="body"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="to"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="toName"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="from"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fromName"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<GenericResponse>> sendMailById(
        int64_t id,
        boost::optional<utility::string_t> subject,
        boost::optional<utility::string_t> body,
        boost::optional<utility::string_t> to,
        boost::optional<utility::string_t> toName,
        boost::optional<utility::string_t> from,
        boost::optional<utility::string_t> fromName
    ) const;
    /// <summary>
    /// validatess order details before placing an order
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> validateMailOrder(
    ) const;
    /// <summary>
    /// displays the mail log
    /// </summary>
    /// <remarks>
    /// By passing in the appropriate options, you can search for available inventory in the system 
    /// </remarks>
    /// <param name="id">User ID</param>
    /// <param name="searchString">pass an optional search string for looking up inventory (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="skip">number of records to skip for pagination (optional, default to 0)</param>
    /// <param name="limit">maximum number of records to return (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<MailLog>>> viewMailLogById(
        int64_t id,
        boost::optional<utility::string_t> searchString,
        boost::optional<int32_t> skip,
        boost::optional<int32_t> limit
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_ */


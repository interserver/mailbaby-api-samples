/*
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import DenyRuleNew from '../model/DenyRuleNew';
import DenyRuleRecord from '../model/DenyRuleRecord';
import ErrorMessage from '../model/ErrorMessage';
import GenericResponse from '../model/GenericResponse';
import MailBlocks from '../model/MailBlocks';

/**
* Blocking service.
* @module api/BlockingApi
* @version 1.1.0
*/
export default class BlockingApi {

    /**
    * Constructs a new BlockingApi. 
    * @alias module:api/BlockingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addRule operation.
     * @callback moduleapi/BlockingApi~addRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new email deny rule.
     * Adds a new email deny rule into the system to block new emails that match the given criteria
     * @param {String} user 
     * @param {module:model/String} type 
     * @param {String} data 
     * @param {module:model/DenyRuleNew} body These are the fields needed to create a new email deny rule.
     * @param {module:api/BlockingApi~addRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addRule(user, type, data, body, callback) {
      
      let postBody = body;
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addRule");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling addRule");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling addRule");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addRule");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'user': user,'type': type,'data': data
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;

      return this.apiClient.callApi(
        '/mail/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteRule operation.
     * @callback moduleapi/BlockingApi~deleteRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an deny mail rule.
     * Removes one of the configured deny mail rules from the system.
     * @param {Number} ruleId The ID of the Rules entry.
     * @param {module:api/BlockingApi~deleteRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteRule(ruleId, callback) {
      
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling deleteRule");
      }

      let pathParams = {
        'ruleId': ruleId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenericResponse;

      return this.apiClient.callApi(
        '/mail/rules/{ruleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the delistBlock operation.
     * @callback moduleapi/BlockingApi~delistBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an email address from the blocked list
     * Removes an email address from the various block lists. 
     * @param {String} body 
     * @param {module:api/BlockingApi~delistBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    delistBlock(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling delistBlock");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;

      return this.apiClient.callApi(
        '/mail/blocks/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMailBlocks operation.
     * @callback moduleapi/BlockingApi~getMailBlocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailBlocks{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays a list of blocked email addresses
     * @param {module:api/BlockingApi~getMailBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMailBlocks(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MailBlocks;

      return this.apiClient.callApi(
        '/mail/blocks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRules operation.
     * @callback moduleapi/BlockingApi~getRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DenyRuleRecord>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a listing of deny email rules.
     * Returns a listing of all the deny block rules you have configured.
     * @param {module:api/BlockingApi~getRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRules(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DenyRuleRecord];

      return this.apiClient.callApi(
        '/mail/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
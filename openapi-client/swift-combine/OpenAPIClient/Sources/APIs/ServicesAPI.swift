//
// ServicesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class ServicesAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.mailbaby.net")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum GetMailOrdersError: Error, CustomStringConvertible {
        // Unauthorized
        case code401Error(GetMailOrders401Response)
        // Unauthorized
        case code404Error(GetMailOrders401Response)

        public var description: String {
            switch self {
            case .code401Error(let object):
                return "GetMailOrdersError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "GetMailOrdersError: Unauthorized: \(object)"
            }
        }
    }

    /// displays a list of mail service orders
    /// - GET /mail
    /// - This will return a list of the mail orders you have in our system including their id, status, username, and optional comment.
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - returns: AnyPublisher<[MailOrder], Error> 
    open func getMailOrders() -> AnyPublisher<[MailOrder], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/mail"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[MailOrder], Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return GetMailOrdersError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(GetMailOrders401Response.self, from: transportError.data)
                            return GetMailOrdersError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode([MailOrder].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

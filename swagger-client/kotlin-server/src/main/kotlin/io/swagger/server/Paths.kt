/**
* Mail Baby API
* This is an API for accesssing the mail services.
*
* OpenAPI spec version: 1.0.0
* Contact: detain@interserver.net
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*;


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Gets mail order information by id
     * returns information about a mail order in the system with the given id.
     * @param id User ID 
     */
    @Location("/mail/{id}") class getMailById(val id: kotlin.Long)

    /**
     * displays a list of mail service orders
     * 
     */
    @Location("/mail") class getMailOrders()

    /**
     * Checks if the server is running
     * 
     */
    @Location("/ping") class pingServer()

    /**
     * places a mail order
     * Adds an item to the system
     * @param body Inventory item to add (optional)
     */
    @Location("/mail/order") class placeMailOrder(val body: MailOrder)

    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param id User ID 
     * @param subject  (optional)
     * @param body  (optional)
     * @param to  (optional)
     * @param from  (optional)
     */
    @Location("/mail/{id}/send") class sendMailById(val id: kotlin.Long, val subject: kotlin.String, val body: kotlin.String, val to: kotlin.String, val from: kotlin.String)

    /**
     * validatess order details before placing an order
     * 
     */
    @Location("/mail/order") class validateMailOrder()

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for
available inventory in the system

     * @param id User ID 
     * @param searchString pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional)
     * @param limit maximum number of records to return (optional)
     */
    @Location("/mail/{id}/log") class viewMailLogById(val id: kotlin.Long, val searchString: kotlin.String, val skip: kotlin.Int, val limit: kotlin.Int)

}

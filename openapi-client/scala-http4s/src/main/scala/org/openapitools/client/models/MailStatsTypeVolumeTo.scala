/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param clientdomainCom 
  * @param usersiteNet 
  * @param salescompanyCom 
  * @param clientanothersiteCom 
  */
case class MailStatsTypeVolumeTo(
    clientdomainCom: Option[Int] = None,
    usersiteNet: Option[Int] = None,
    salescompanyCom: Option[Int] = None,
    clientanothersiteCom: Option[Int] = None
)
  
object MailStatsTypeVolumeTo {
  given encoderMailStatsTypeVolumeTo: Encoder[MailStatsTypeVolumeTo] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.clientdomainCom.map(v => "client@domain.com" -> v.asJson),
        t.usersiteNet.map(v => "user@site.net" -> v.asJson),
        t.salescompanyCom.map(v => "sales@company.com" -> v.asJson),
        t.clientanothersiteCom.map(v => "client@anothersite.com" -> v.asJson)
      ).flatten
    }
  }
  given decoderMailStatsTypeVolumeTo: Decoder[MailStatsTypeVolumeTo] = Decoder.instance { c =>
    for {
      clientdomainCom <- c.downField("client@domain.com").as[Option[Int]]
      usersiteNet <- c.downField("user@site.net").as[Option[Int]]
      salescompanyCom <- c.downField("sales@company.com").as[Option[Int]]
      clientanothersiteCom <- c.downField("client@anothersite.com").as[Option[Int]]
    } yield MailStatsTypeVolumeTo(
      clientdomainCom = clientdomainCom,
      usersiteNet = usersiteNet,
      salescompanyCom = salescompanyCom,
      clientanothersiteCom = clientanothersiteCom
    )
  }
}


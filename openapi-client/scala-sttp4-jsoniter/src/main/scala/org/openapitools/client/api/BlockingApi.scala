/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DenyRuleRecord
import org.openapitools.client.model.ErrorMessage
import org.openapitools.client.model.GenericResponse
import org.openapitools.client.model.MailBlocks
import org.openapitools.client.core.JsonSupport.{*, given}
import org.openapitools.client.core.FormSerializable
import org.openapitools.client.core.FormStyleFormat
import org.openapitools.client.core.HeaderSerializable
import org.openapitools.client.core.ApiKeyLocation
import org.openapitools.client.core.PathStyleFormat
import org.openapitools.client.core.PathSerializable
import org.openapitools.client.core.CookieSerializable
import org.openapitools.client.core.Helpers.*
import sttp.client4.jsoniter.*
import sttp.client4.*
import sttp.model.Method

object BlockingApi:
  def apply(baseUrl: String = "https://api.mailbaby.net"): BlockingApi[org.openapitools.client.core.Authorization.NoAuthorization.type] = BlockingApi(baseUrl, org.openapitools.client.core.Authorization.NoAuthorization)
  def withBasicAuth(baseUrl: String, username: String, password: String): BlockingApi[org.openapitools.client.core.Authorization.BasicAuth] =
    BlockingApi(baseUrl, org.openapitools.client.core.Authorization.BasicAuth(username, password))

  def withApiKeyAuth(baseUrl: String, apiKey: String): BlockingApi[org.openapitools.client.core.Authorization.ApiKey] =
    BlockingApi(baseUrl, org.openapitools.client.core.Authorization.ApiKey(apiKey))

  def withBearerTokenAuth(baseUrl: String, token: String): BlockingApi[org.openapitools.client.core.Authorization.BearerToken] =
    BlockingApi(baseUrl, org.openapitools.client.core.Authorization.BearerToken(token))

case class BlockingApi[Auth <: org.openapitools.client.core.Authorization] private (baseUrl: String, authConfig: org.openapitools.client.core.Authorization):
  def withBasicAuth(username: String, password: String): BlockingApi[org.openapitools.client.core.Authorization.BasicAuth] =
    copy(authConfig = org.openapitools.client.core.Authorization.BasicAuth(username, password))

  def withApiKeyAuth(apiKey: String): BlockingApi[org.openapitools.client.core.Authorization.ApiKey] =
    copy(authConfig = org.openapitools.client.core.Authorization.ApiKey(apiKey))

  def withNoAuth: BlockingApi[org.openapitools.client.core.Authorization.NoAuthorization.type] =
    copy(authConfig = org.openapitools.client.core.Authorization.NoAuthorization)

  def withBearerTokenAuth(token: String): BlockingApi[org.openapitools.client.core.Authorization.BearerToken] =
    copy(authConfig = org.openapitools.client.core.Authorization.BearerToken(token))

  /**
   * Adds a new email deny rule into the system to block new emails that match the given criteria
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param `type` The type of deny rule.
   * @param data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
   * @param user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
   */
  def addRule(`type`: String, data: String, user: Option[String] = scala.None)(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], GenericResponse]] =
    val requestURL =
      uri"$baseUrl/mail/rules"

    basicRequest
      .method(Method.POST, requestURL)
      .contentType("application/x-www-form-urlencoded")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .body(
        FormSerializable.serialize("user", user, FormStyleFormat.FORM, false) ++ 
        FormSerializable.serialize("type", `type`, FormStyleFormat.FORM, false) ++ 
        FormSerializable.serialize("data", data, FormStyleFormat.FORM, false),
        "utf-8"
      )
      .response(asJson[GenericResponse])

  /**
   * Removes one of the configured deny mail rules from the system.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param ruleId The ID of the Rules entry.
   */
  def deleteRule(ruleId: Int)(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], GenericResponse]] =
    val ruleIdPathParam = PathSerializable.serialize("ruleId", ruleId, PathStyleFormat.SIMPLE, false)
    val requestURL =
      uri"$baseUrl/mail/rules/${ruleIdPathParam}"

    basicRequest
      .method(Method.DELETE, requestURL)
      .contentType("application/json")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .response(asJson[GenericResponse])

  /**
   * Removes an email address from the various block lists. 
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param body 
   */
  def delistBlock(body: String)(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], GenericResponse]] =
    val requestURL =
      uri"$baseUrl/mail/blocks/delete"

    basicRequest
      .method(Method.POST, requestURL)
      .contentType("application/json")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .body(asJson(body))
      .response(asJson[GenericResponse])

  /**
   * Expected answers:
   *   code 200 : MailBlocks (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getMailBlocks(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], MailBlocks]] =
    val requestURL =
      uri"$baseUrl/mail/blocks"

    basicRequest
      .method(Method.GET, requestURL)
      .contentType("application/json")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .response(asJson[MailBlocks])

  /**
   * Returns a listing of all the deny block rules you have configured.
   * 
   * Expected answers:
   *   code 200 : Seq[DenyRuleRecord] (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getRules(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], Seq[DenyRuleRecord]]] =
    val requestURL =
      uri"$baseUrl/mail/rules"

    basicRequest
      .method(Method.GET, requestURL)
      .contentType("application/json")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .response(asJson[Seq[DenyRuleRecord]])

end BlockingApi
/*
 * Mail Baby API
 *
 * This is an API for accesssing the mail services.
 *
 * API version: 1.0.0
 * Contact: detain@interserver.net
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MailContact An Email Contact
type MailContact struct {
	// The email address
	Email string `json:"email"`
	// Optional contact name
	Name *string `json:"name,omitempty"`
}

// NewMailContact instantiates a new MailContact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailContact(email string) *MailContact {
	this := MailContact{}
	this.Email = email
	return &this
}

// NewMailContactWithDefaults instantiates a new MailContact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailContactWithDefaults() *MailContact {
	this := MailContact{}
	return &this
}

// GetEmail returns the Email field value
func (o *MailContact) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *MailContact) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *MailContact) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MailContact) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailContact) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MailContact) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MailContact) SetName(v string) {
	o.Name = &v
}

func (o MailContact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableMailContact struct {
	value *MailContact
	isSet bool
}

func (v NullableMailContact) Get() *MailContact {
	return v.value
}

func (v *NullableMailContact) Set(val *MailContact) {
	v.value = val
	v.isSet = true
}

func (v NullableMailContact) IsSet() bool {
	return v.isSet
}

func (v *NullableMailContact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailContact(val *MailContact) *NullableMailContact {
	return &NullableMailContact{value: val, isSet: true}
}

func (v NullableMailContact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailContact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



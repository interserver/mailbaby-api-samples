/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ErrorMessage
import org.openapitools.client.model.MailLog
import org.openapitools.client.model.MailStatsType
import org.openapitools.client.core.JsonSupport.{*, given}
import org.openapitools.client.core.FormSerializable
import org.openapitools.client.core.FormStyleFormat
import org.openapitools.client.core.HeaderSerializable
import org.openapitools.client.core.ApiKeyLocation
import org.openapitools.client.core.PathStyleFormat
import org.openapitools.client.core.PathSerializable
import org.openapitools.client.core.CookieSerializable
import org.openapitools.client.core.Helpers.*
import sttp.client4.jsoniter.*
import sttp.client4.*
import sttp.model.Method

object HistoryApi:
  def apply(baseUrl: String = "https://api.mailbaby.net"): HistoryApi[org.openapitools.client.core.Authorization.NoAuthorization.type] = HistoryApi(baseUrl, org.openapitools.client.core.Authorization.NoAuthorization)
  def withBasicAuth(baseUrl: String, username: String, password: String): HistoryApi[org.openapitools.client.core.Authorization.BasicAuth] =
    HistoryApi(baseUrl, org.openapitools.client.core.Authorization.BasicAuth(username, password))

  def withApiKeyAuth(baseUrl: String, apiKey: String): HistoryApi[org.openapitools.client.core.Authorization.ApiKey] =
    HistoryApi(baseUrl, org.openapitools.client.core.Authorization.ApiKey(apiKey))

  def withBearerTokenAuth(baseUrl: String, token: String): HistoryApi[org.openapitools.client.core.Authorization.BearerToken] =
    HistoryApi(baseUrl, org.openapitools.client.core.Authorization.BearerToken(token))

case class HistoryApi[Auth <: org.openapitools.client.core.Authorization] private (baseUrl: String, authConfig: org.openapitools.client.core.Authorization):
  def withBasicAuth(username: String, password: String): HistoryApi[org.openapitools.client.core.Authorization.BasicAuth] =
    copy(authConfig = org.openapitools.client.core.Authorization.BasicAuth(username, password))

  def withApiKeyAuth(apiKey: String): HistoryApi[org.openapitools.client.core.Authorization.ApiKey] =
    copy(authConfig = org.openapitools.client.core.Authorization.ApiKey(apiKey))

  def withNoAuth: HistoryApi[org.openapitools.client.core.Authorization.NoAuthorization.type] =
    copy(authConfig = org.openapitools.client.core.Authorization.NoAuthorization)

  def withBearerTokenAuth(token: String): HistoryApi[org.openapitools.client.core.Authorization.BearerToken] =
    copy(authConfig = org.openapitools.client.core.Authorization.BearerToken(token))

  /**
   * Returns information about the usage on your mail accounts.
   * 
   * Expected answers:
   *   code 200 : MailStatsType (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param time The timeframe for the statistics.
   */
  def getStats(time: Option[String] = scala.None)(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], MailStatsType]] =
    val requestURL =
      uri"$baseUrl/mail/stats"
        .addParams(FormSerializable.serialize("time", time, FormStyleFormat.FORM, true): _*)

    basicRequest
      .method(Method.GET, requestURL)
      .contentType("application/json")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .response(asJson[MailStatsType])

  /**
   * Get a listing of the emails sent through this system 
   * 
   * Expected answers:
   *   code 200 : MailLog (search results matching criteria)
   *   code 400 :  (bad input parameter)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param id The ID of your mail order this will be sent through.
   * @param origin originating ip address sending mail
   * @param mx mx record mail was sent to
   * @param from from email address
   * @param to to/destination email address
   * @param subject subject containing this string
   * @param mailid mail id
   * @param skip number of records to skip for pagination
   * @param limit maximum number of records to return
   * @param startDate earliest date to get emails in unix timestamp format
   * @param endDate earliest date to get emails in unix timestamp format
   * @param replyto Reply-To Email Address
   * @param headerfrom Header From Email Address
   * @param delivered Limiting the emails to wether or not they were delivered.
   */
  def viewMailLog(id: Option[Long] = scala.None, origin: Option[String] = scala.None, mx: Option[String] = scala.None, from: Option[String] = scala.None, to: Option[String] = scala.None, subject: Option[String] = scala.None, mailid: Option[String] = scala.None, skip: Option[Int] = scala.None, limit: Option[Int] = scala.None, startDate: Option[Long] = scala.None, endDate: Option[Long] = scala.None, replyto: Option[String] = scala.None, headerfrom: Option[String] = scala.None, delivered: Option[String] = scala.None)(using Auth <:< org.openapitools.client.core.Authorization.ApiKey): sttp.client4.Request[Either[ResponseException[String], MailLog]] =
    val requestURL =
      uri"$baseUrl/mail/log"
        .addParams(FormSerializable.serialize("id", id, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("origin", origin, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("mx", mx, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("from", from, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("to", to, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("subject", subject, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("mailid", mailid, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("skip", skip, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("limit", limit, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("startDate", startDate, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("endDate", endDate, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("replyto", replyto, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("headerfrom", headerfrom, FormStyleFormat.FORM, true): _*)
        .addParams(FormSerializable.serialize("delivered", delivered, FormStyleFormat.FORM, true): _*)

    basicRequest
      .method(Method.GET, requestURL)
      .contentType("application/json")
      .auth(authConfig, org.openapitools.client.core.ApiKeyLocation.HEADER, "X-API-KEY")
      .response(asJson[MailLog])

end HistoryApi
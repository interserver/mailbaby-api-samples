/*
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// MailStatsType : Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MailStatsType {
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<Time>,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<i32>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "currencySymbol", skip_serializing_if = "Option::is_none")]
    pub currency_symbol: Option<String>,
    #[serde(rename = "cost", skip_serializing_if = "Option::is_none")]
    pub cost: Option<f64>,
    #[serde(rename = "received", skip_serializing_if = "Option::is_none")]
    pub received: Option<i32>,
    #[serde(rename = "sent", skip_serializing_if = "Option::is_none")]
    pub sent: Option<i32>,
    #[serde(rename = "volume", skip_serializing_if = "Option::is_none")]
    pub volume: Option<Box<models::MailStatsTypeVolume>>,
}

impl MailStatsType {
    /// Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost.
    pub fn new() -> MailStatsType {
        MailStatsType {
            time: None,
            usage: None,
            currency: None,
            currency_symbol: None,
            cost: None,
            received: None,
            sent: None,
            volume: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Time {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "billing")]
    Billing,
    #[serde(rename = "month")]
    Month,
    #[serde(rename = "7d")]
    Variant7d,
    #[serde(rename = "24h")]
    Variant24h,
    #[serde(rename = "today")]
    Today,
    #[serde(rename = "1h")]
    Variant1h,
}

impl Default for Time {
    fn default() -> Time {
        Self::All
    }
}


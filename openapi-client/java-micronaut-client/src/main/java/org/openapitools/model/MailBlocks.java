/*
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.MailBlockClickHouse;
import org.openapitools.model.MailBlockRspamd;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * The listing of blocked emails.
 */
@JsonPropertyOrder({
  MailBlocks.JSON_PROPERTY_LOCAL,
  MailBlocks.JSON_PROPERTY_MBTRAP,
  MailBlocks.JSON_PROPERTY_SUBJECT
})
@JsonTypeName("MailBlocks")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-04-02T13:30:31.050992336-04:00[America/New_York]")
@Introspected
public class MailBlocks {
    public static final String JSON_PROPERTY_LOCAL = "local";
    private List<MailBlockClickHouse> local = new ArrayList<>();

    public static final String JSON_PROPERTY_MBTRAP = "mbtrap";
    private List<MailBlockClickHouse> mbtrap = new ArrayList<>();

    public static final String JSON_PROPERTY_SUBJECT = "subject";
    private List<MailBlockRspamd> subject = new ArrayList<>();

    public MailBlocks(List<MailBlockClickHouse> local, List<MailBlockClickHouse> mbtrap, List<MailBlockRspamd> subject) {
        this.local = local;
        this.mbtrap = mbtrap;
        this.subject = subject;
    }

    public MailBlocks local(List<MailBlockClickHouse> local) {
        this.local = local;
        return this;
    }

    public MailBlocks addLocalItem(MailBlockClickHouse localItem) {
        this.local.add(localItem);
        return this;
    }

    /**
     * Get local
     * @return local
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_LOCAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<MailBlockClickHouse> getLocal() {
        return local;
    }

    @JsonProperty(JSON_PROPERTY_LOCAL)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setLocal(List<MailBlockClickHouse> local) {
        this.local = local;
    }

    public MailBlocks mbtrap(List<MailBlockClickHouse> mbtrap) {
        this.mbtrap = mbtrap;
        return this;
    }

    public MailBlocks addMbtrapItem(MailBlockClickHouse mbtrapItem) {
        this.mbtrap.add(mbtrapItem);
        return this;
    }

    /**
     * Get mbtrap
     * @return mbtrap
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_MBTRAP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<MailBlockClickHouse> getMbtrap() {
        return mbtrap;
    }

    @JsonProperty(JSON_PROPERTY_MBTRAP)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMbtrap(List<MailBlockClickHouse> mbtrap) {
        this.mbtrap = mbtrap;
    }

    public MailBlocks subject(List<MailBlockRspamd> subject) {
        this.subject = subject;
        return this;
    }

    public MailBlocks addSubjectItem(MailBlockRspamd subjectItem) {
        this.subject.add(subjectItem);
        return this;
    }

    /**
     * Get subject
     * @return subject
     **/
    @NotNull
    @JsonProperty(JSON_PROPERTY_SUBJECT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<MailBlockRspamd> getSubject() {
        return subject;
    }

    @JsonProperty(JSON_PROPERTY_SUBJECT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSubject(List<MailBlockRspamd> subject) {
        this.subject = subject;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MailBlocks mailBlocks = (MailBlocks) o;
        return Objects.equals(this.local, mailBlocks.local) &&
            Objects.equals(this.mbtrap, mailBlocks.mbtrap) &&
            Objects.equals(this.subject, mailBlocks.subject);
    }

    @Override
    public int hashCode() {
        return Objects.hash(local, mbtrap, subject);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MailBlocks {\n");
        sb.append("    local: ").append(toIndentedString(local)).append("\n");
        sb.append("    mbtrap: ").append(toIndentedString(mbtrap)).append("\n");
        sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}


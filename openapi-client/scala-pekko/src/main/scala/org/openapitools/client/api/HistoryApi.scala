/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ErrorMessage
import org.openapitools.client.model.MailLog
import org.openapitools.client.model.MailStatsType
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object HistoryApi {

  def apply(baseUrl: String = "https://api.mailbaby.net") = new HistoryApi(baseUrl)
}

class HistoryApi(baseUrl: String) {

  /**
   * Returns information about the usage on your mail accounts.
   * 
   * Expected answers:
   *   code 200 : MailStatsType (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param time The timeframe for the statistics.
   */
  def getStats(time: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[MailStatsType] =
    ApiRequest[MailStatsType](ApiMethods.GET, baseUrl, "/mail/stats", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withQueryParam("time", time)
      .withSuccessResponse[MailStatsType](200)
      .withErrorResponse[ErrorMessage](401)
      .withErrorResponse[ErrorMessage](404)
      

  /**
   * Get a listing of the emails sent through this system 
   * 
   * Expected answers:
   *   code 200 : MailLog (search results matching criteria)
   *   code 400 :  (bad input parameter)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param id The ID of your mail order this will be sent through.
   * @param origin originating ip address sending mail
   * @param mx mx record mail was sent to
   * @param from from email address
   * @param to to/destination email address
   * @param subject subject containing this string
   * @param mailid mail id
   * @param skip number of records to skip for pagination
   * @param limit maximum number of records to return
   * @param startDate earliest date to get emails in unix timestamp format
   * @param endDate earliest date to get emails in unix timestamp format
   * @param replyto Reply-To Email Address
   * @param headerfrom Header From Email Address
   * @param delivered Limiting the emails to wether or not they were delivered.
   */
  def viewMailLog(id: Option[Long] = None, origin: Option[String] = None, mx: Option[String] = None, from: Option[String] = None, to: Option[String] = None, subject: Option[String] = None, mailid: Option[String] = None, skip: Option[Int] = None, limit: Option[Int] = None, startDate: Option[Long] = None, endDate: Option[Long] = None, replyto: Option[String] = None, headerfrom: Option[String] = None, delivered: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[MailLog] =
    ApiRequest[MailLog](ApiMethods.GET, baseUrl, "/mail/log", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("origin", origin)
      .withQueryParam("mx", mx)
      .withQueryParam("from", from)
      .withQueryParam("to", to)
      .withQueryParam("subject", subject)
      .withQueryParam("mailid", mailid)
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("replyto", replyto)
      .withQueryParam("headerfrom", headerfrom)
      .withQueryParam("delivered", delivered)
      .withSuccessResponse[MailLog](200)
      .withErrorResponse[Unit](400)
      



}


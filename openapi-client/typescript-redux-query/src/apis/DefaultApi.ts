// tslint:disable
/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    GenericResponse,
    GenericResponseFromJSON,
    GenericResponseToJSON,
    GetMailOrders200ResponseInner,
    GetMailOrders200ResponseInnerFromJSON,
    GetMailOrders200ResponseInnerToJSON,
    GetMailOrders401Response,
    GetMailOrders401ResponseFromJSON,
    GetMailOrders401ResponseToJSON,
    MailLog,
    MailLogFromJSON,
    MailLogToJSON,
    SendMailAdv,
    SendMailAdvFromJSON,
    SendMailAdvToJSON,
} from '../models';

export interface SendAdvMailRequest {
    sendMailAdv: SendMailAdv;
}

export interface SendMailRequest {
    to: string;
    from: string;
    subject: string;
    body: string;
}

export interface ViewMailLogRequest {
    id?: number;
    search?: string;
    skip?: number;
    limit?: number;
}


/**
 * displays a list of mail service orders
 */
function getMailOrdersRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<GetMailOrders200ResponseInner>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(GetMailOrders200ResponseInnerFromJSON), text);
    }

    return config;
}

/**
* displays a list of mail service orders
*/
export function getMailOrders<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<GetMailOrders200ResponseInner>>): QueryConfig<T> {
    return getMailOrdersRaw( requestConfig);
}

/**
 * Checks if the server is running
 */
function pingServerRaw<T>( requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ping`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Checks if the server is running
*/
export function pingServer<T>( requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return pingServerRaw( requestConfig);
}

/**
 * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
 * Sends an Email with Advanced Options
 */
function sendAdvMailRaw<T>(requestParameters: SendAdvMailRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.sendMailAdv === null || requestParameters.sendMailAdv === undefined) {
        throw new runtime.RequiredError('sendMailAdv','Required parameter requestParameters.sendMailAdv was null or undefined when calling sendAdvMail.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/advsend`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SendMailAdvToJSON(requestParameters.sendMailAdv),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
* Sends an Email with Advanced Options
*/
export function sendAdvMail<T>(requestParameters: SendAdvMailRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return sendAdvMailRaw(requestParameters, requestConfig);
}

/**
 * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
 * Sends an Email
 */
function sendMailRaw<T>(requestParameters: SendMailRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.to === null || requestParameters.to === undefined) {
        throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendMail.');
    }

    if (requestParameters.from === null || requestParameters.from === undefined) {
        throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling sendMail.');
    }

    if (requestParameters.subject === null || requestParameters.subject === undefined) {
        throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling sendMail.');
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendMail.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const formData = new FormData();
    if (requestParameters.to !== undefined) {
        formData.append('to', requestParameters.to as any);
    }

    if (requestParameters.from !== undefined) {
        formData.append('from', requestParameters.from as any);
    }

    if (requestParameters.subject !== undefined) {
        formData.append('subject', requestParameters.subject as any);
    }

    if (requestParameters.body !== undefined) {
        formData.append('body', requestParameters.body as any);
    }

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/send`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: formData,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
* Sends an Email
*/
export function sendMail<T>(requestParameters: SendMailRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return sendMailRaw(requestParameters, requestConfig);
}

/**
 * By passing in the appropriate options, you can search for available inventory in the system 
 * displays the mail log
 */
function viewMailLogRaw<T>(requestParameters: ViewMailLogRequest, requestConfig: runtime.TypedQueryConfig<T, MailLog> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.id !== undefined) {
        queryParameters['id'] = requestParameters.id;
    }


    if (requestParameters.search !== undefined) {
        queryParameters['search'] = requestParameters.search;
    }


    if (requestParameters.skip !== undefined) {
        queryParameters['skip'] = requestParameters.skip;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/log`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MailLogFromJSON(body), text);
    }

    return config;
}

/**
* By passing in the appropriate options, you can search for available inventory in the system 
* displays the mail log
*/
export function viewMailLog<T>(requestParameters: ViewMailLogRequest, requestConfig?: runtime.TypedQueryConfig<T, MailLog>): QueryConfig<T> {
    return viewMailLogRaw(requestParameters, requestConfig);
}


/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.SendingApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 * Version: 1.1.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license GNU GPLv3
 * https://www.gnu.org/licenses/gpl.txt
 */

goog.provide('API.Client.SendingApi');

goog.require('API.Client.EmailAddressName');
goog.require('API.Client.GenericResponse');
goog.require('API.Client.MailAttachment');
goog.require('API.Client.getMailOrders_401_response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.SendingApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('SendingApiBasePath') ?
                   /** @type {!string} */ ($injector.get('SendingApiBasePath')) :
                   'https://api.mailbaby.net';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('SendingApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('SendingApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.SendingApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Sends an Email with Advanced Options
 * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
 * @param {!string} subject The subject or title of the email
 * @param {!string} body The main email contents.
 * @param {!API.Client.EmailAddressName} from 
 * @param {!Array<!API.Client.EmailAddressName>} to A list of destionation email addresses to send this to
 * @param {!Array<!API.Client.EmailAddressName>=} opt_replyto (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
 * @param {!Array<!API.Client.EmailAddressName>=} opt_cc (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
 * @param {!Array<!API.Client.EmailAddressName>=} opt_bcc (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
 * @param {!Array<!API.Client.MailAttachment>=} opt_attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded!
 * @param {!number=} opt_id (optional)  ID of the Mail order within our system to use as the Mail Account.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GenericResponse>}
 */
API.Client.SendingApi.prototype.sendAdvMail = function(subject, body, from, to, opt_replyto, opt_cc, opt_bcc, opt_attachments, opt_id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/advsend';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'subject' is set
  if (!subject) {
    throw new Error('Missing required parameter subject when calling sendAdvMail');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling sendAdvMail');
  }
  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling sendAdvMail');
  }
  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling sendAdvMail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['subject'] = subject;

  formParams['body'] = body;

  formParams['from'] = from;

  formParams['to'] = to;

  formParams['replyto'] = opt_replyto;

  formParams['cc'] = opt_cc;

  formParams['bcc'] = opt_bcc;

  formParams['attachments'] = opt_attachments;

  formParams['id'] = opt_id;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Sends an Email
 * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
 * @param {!string} to The Contact whom is the primary recipient of this email.
 * @param {!string} from The contact whom is the this email is from.
 * @param {!string} subject The subject or title of the email
 * @param {!string} body The main email contents.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GenericResponse>}
 */
API.Client.SendingApi.prototype.sendMail = function(to, from, subject, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/send';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'to' is set
  if (!to) {
    throw new Error('Missing required parameter to when calling sendMail');
  }
  // verify required parameter 'from' is set
  if (!from) {
    throw new Error('Missing required parameter from when calling sendMail');
  }
  // verify required parameter 'subject' is set
  if (!subject) {
    throw new Error('Missing required parameter subject when calling sendMail');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling sendMail');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['to'] = to;

  formParams['from'] = from;

  formParams['subject'] = subject;

  formParams['body'] = body;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

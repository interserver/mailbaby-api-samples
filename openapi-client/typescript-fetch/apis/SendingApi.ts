/* tslint:disable */
/* eslint-disable */
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailAddressName,
  GenericResponse,
  GetMailOrders401Response,
  MailAttachment,
} from '../models/index';
import {
    EmailAddressNameFromJSON,
    EmailAddressNameToJSON,
    GenericResponseFromJSON,
    GenericResponseToJSON,
    GetMailOrders401ResponseFromJSON,
    GetMailOrders401ResponseToJSON,
    MailAttachmentFromJSON,
    MailAttachmentToJSON,
} from '../models/index';

export interface SendAdvMailRequest {
    subject: string;
    body: string;
    from: EmailAddressName;
    to: Array<EmailAddressName>;
    replyto?: Array<EmailAddressName>;
    cc?: Array<EmailAddressName>;
    bcc?: Array<EmailAddressName>;
    attachments?: Array<MailAttachment>;
    id?: number;
}

export interface SendMailRequest {
    to: string;
    from: string;
    subject: string;
    body: string;
}

/**
 * 
 */
export class SendingApi extends runtime.BaseAPI {

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    async sendAdvMailRaw(requestParameters: SendAdvMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling sendAdvMail.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendAdvMail.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling sendAdvMail.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendAdvMail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.subject !== undefined) {
            formParams.append('subject', requestParameters.subject as any);
        }

        if (requestParameters.body !== undefined) {
            formParams.append('body', requestParameters.body as any);
        }

        if (requestParameters.from !== undefined) {
            formParams.append('from', new Blob([JSON.stringify(EmailAddressNameToJSON(requestParameters.from))], { type: "application/json", }));
                    }

        if (requestParameters.to) {
            formParams.append('to', requestParameters.to.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.replyto) {
            formParams.append('replyto', requestParameters.replyto.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.cc) {
            formParams.append('cc', requestParameters.cc.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.bcc) {
            formParams.append('bcc', requestParameters.bcc.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.attachments) {
            formParams.append('attachments', requestParameters.attachments.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        if (requestParameters.id !== undefined) {
            formParams.append('id', requestParameters.id as any);
        }

        const response = await this.request({
            path: `/mail/advsend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    async sendAdvMail(requestParameters: SendAdvMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.sendAdvMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * Sends an Email
     */
    async sendMailRaw(requestParameters: SendMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendMail.');
        }

        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling sendMail.');
        }

        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling sendMail.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling sendMail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
            { contentType: 'application/json' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.to !== undefined) {
            formParams.append('to', requestParameters.to as any);
        }

        if (requestParameters.from !== undefined) {
            formParams.append('from', requestParameters.from as any);
        }

        if (requestParameters.subject !== undefined) {
            formParams.append('subject', requestParameters.subject as any);
        }

        if (requestParameters.body !== undefined) {
            formParams.append('body', requestParameters.body as any);
        }

        const response = await this.request({
            path: `/mail/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * Sends an Email
     */
    async sendMail(requestParameters: SendMailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.sendMailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

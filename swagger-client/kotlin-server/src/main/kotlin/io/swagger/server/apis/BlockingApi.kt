/**
* MailBaby Email Delivery and Management Service API
* **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
*
* OpenAPI spec version: 1.1.0
* Contact: support@interserver.net
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/package io.swagger.server.apis

import com.google.gson.Gson
import io.ktor.application.call
import io.ktor.auth.UserIdPrincipal
import io.ktor.auth.authentication
import io.ktor.auth.authenticate
import io.ktor.auth.OAuthAccessTokenResponse
import io.ktor.auth.OAuthServerSettings
import io.ktor.http.ContentType
import io.ktor.http.HttpStatusCode
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.delete
import io.ktor.locations.get
import io.ktor.locations.post
import io.ktor.locations.put
import io.ktor.locations.patch
import io.ktor.response.respond
import io.ktor.response.respondText
import io.ktor.routing.Route
import io.ktor.routing.route

import io.swagger.server.Paths
import io.swagger.server.infrastructure.ApiPrincipal


import io.swagger.server.models.DenyRuleNew
import io.swagger.server.models.DenyRuleRecord
import io.swagger.server.models.ErrorMessage
import io.swagger.server.models.GenericResponse
import io.swagger.server.models.MailBlocks

@KtorExperimentalLocationsAPI
fun Route.BlockingApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()
    post<Paths.addRule> {  _: Paths.addRule ->
        val principal = call.authentication.principal<ApiPrincipal>()
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
  "text" : "The command completed successfully.",
  "status" : "ok"
}"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }        }
    }
    delete<Paths.deleteRule> {  _: Paths.deleteRule ->
        val principal = call.authentication.principal<ApiPrincipal>()
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
  "text" : "The command completed successfully.",
  "status" : "ok"
}"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }        }
    }
    post<Paths.delistBlock> {  _: Paths.delistBlock ->
        val principal = call.authentication.principal<ApiPrincipal>()
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
  "text" : "The command completed successfully.",
  "status" : "ok"
}"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }        }
    }
    get<Paths.getMailBlocks> {  _: Paths.getMailBlocks ->
        val principal = call.authentication.principal<ApiPrincipal>()
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """{
  "local" : [ {
    "date" : "2023-08-07",
    "from" : "user@domain.com",
    "messageId" : "pFaRqFUEWkucjhTuIzYuoAgWU@domain.com",
    "subject" : "Test Email",
    "to" : "['client@site.com']"
  } ],
  "mbtrap" : [ {
    "date" : "2023-08-07",
    "from" : "user@domain.com",
    "messageId" : "pFaRqFUEWkucjhTuIzYuoAgWU@domain.com",
    "subject" : "Test Email",
    "to" : "['client@site.com']"
  } ],
  "subject" : [ {
    "from" : "user@domain.com",
    "subject" : "Test Email"
  } ]
}"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }        }
    }
    get<Paths.getRules> {  _: Paths.getRules ->
        val principal = call.authentication.principal<ApiPrincipal>()
        if (principal == null) {
            call.respond(HttpStatusCode.Unauthorized)
        } else {
            val exampleContentType = "application/json"
            val exampleContentString = """[ {
  "id" : 14,
  "user" : "mb20682",
  "type" : "email",
  "data" : "domeinwo@server.guesshost.net",
  "created" : "2022-03-22 19:16:35"
}, {
  "id" : 14,
  "user" : "mb20682",
  "type" : "email",
  "data" : "domeinwo@server.guesshost.net",
  "created" : "2022-03-22 19:16:35"
} ]"""
            
            when(exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }        }
    }
}

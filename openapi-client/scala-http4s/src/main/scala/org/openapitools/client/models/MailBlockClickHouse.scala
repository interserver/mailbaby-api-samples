/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.LocalDate

/** A block entry from the clickhouse mailblocks server.
  * @param date 
  * @param from 
  * @param messageId 
  * @param subject 
  * @param to 
  */
case class MailBlockClickHouse(
    date: LocalDate,
    from: String,
    messageId: String,
    subject: String,
    to: String
)
  
object MailBlockClickHouse {
  given encoderMailBlockClickHouse: Encoder[MailBlockClickHouse] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("date" -> t.date.asJson),
        Some("from" -> t.from.asJson),
        Some("messageId" -> t.messageId.asJson),
        Some("subject" -> t.subject.asJson),
        Some("to" -> t.to.asJson)
      ).flatten
    }
  }
  given decoderMailBlockClickHouse: Decoder[MailBlockClickHouse] = Decoder.instance { c =>
    for {
      date <- c.downField("date").as[LocalDate]
      from <- c.downField("from").as[String]
      messageId <- c.downField("messageId").as[String]
      subject <- c.downField("subject").as[String]
      to <- c.downField("to").as[String]
    } yield MailBlockClickHouse(
      date = date,
      from = from,
      messageId = messageId,
      subject = subject,
      to = to
    )
  }
}


/* tslint:disable */
/* eslint-disable */
/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface GetMailOrders200ResponseInner
 */
export interface GetMailOrders200ResponseInner {
    /**
     * 
     * @type {number}
     * @memberof GetMailOrders200ResponseInner
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface GetMailOrders401Response
 */
export interface GetMailOrders401Response {
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders401Response
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders401Response
     */
    'message': string;
}
/**
 * Mail log records
 * @export
 * @interface MailLog
 */
export interface MailLog {
    /**
     * total number of mail log entries
     * @type {number}
     * @memberof MailLog
     */
    'total': number;
    /**
     * number of emails skipped in listing
     * @type {number}
     * @memberof MailLog
     */
    'skip': number;
    /**
     * number of emails to return
     * @type {number}
     * @memberof MailLog
     */
    'limit': number;
    /**
     * 
     * @type {Array<MailLogEntry>}
     * @memberof MailLog
     */
    'emails': Array<MailLogEntry>;
}
/**
 * An email record
 * @export
 * @interface MailLogEntry
 */
export interface MailLogEntry {
    /**
     * internal db id
     * @type {number}
     * @memberof MailLogEntry
     */
    '_id': number;
    /**
     * mail id
     * @type {string}
     * @memberof MailLogEntry
     */
    'id': string;
    /**
     * from address
     * @type {string}
     * @memberof MailLogEntry
     */
    'from': string;
    /**
     * to address
     * @type {string}
     * @memberof MailLogEntry
     */
    'to': string;
    /**
     * email subject
     * @type {string}
     * @memberof MailLogEntry
     */
    'subject': string;
    /**
     * message id
     * @type {string}
     * @memberof MailLogEntry
     */
    'messageId': string;
    /**
     * creation date
     * @type {string}
     * @memberof MailLogEntry
     */
    'created': string;
    /**
     * creation timestamp
     * @type {number}
     * @memberof MailLogEntry
     */
    'time': number;
    /**
     * user account
     * @type {string}
     * @memberof MailLogEntry
     */
    'user': string;
    /**
     * transaction type
     * @type {string}
     * @memberof MailLogEntry
     */
    'transtype': string;
    /**
     * transaction host
     * @type {string}
     * @memberof MailLogEntry
     */
    'transhost': string;
    /**
     * origin host
     * @type {string}
     * @memberof MailLogEntry
     */
    'originhost': string;
    /**
     * origin ip
     * @type {string}
     * @memberof MailLogEntry
     */
    'origin': string;
    /**
     * interface name
     * @type {string}
     * @memberof MailLogEntry
     */
    'interface': string;
    /**
     * date processed
     * @type {string}
     * @memberof MailLogEntry
     */
    'date': string;
    /**
     * sending zone
     * @type {string}
     * @memberof MailLogEntry
     */
    'sendingZone': string;
    /**
     * email body size in bytes
     * @type {number}
     * @memberof MailLogEntry
     */
    'bodySize': number;
    /**
     * md5 sum of the email
     * @type {string}
     * @memberof MailLogEntry
     */
    'sourceMd5': string;
    /**
     * delivery sequency
     * @type {number}
     * @memberof MailLogEntry
     */
    'seq': number;
    /**
     * to address domain
     * @type {string}
     * @memberof MailLogEntry
     */
    'domain': string;
    /**
     * email receiver address
     * @type {string}
     * @memberof MailLogEntry
     */
    'recipient': string;
    /**
     * locked status
     * @type {number}
     * @memberof MailLogEntry
     */
    'locked': number;
    /**
     * lock timestamp
     * @type {number}
     * @memberof MailLogEntry
     */
    'lockTime': number;
    /**
     * assigned server
     * @type {string}
     * @memberof MailLogEntry
     */
    'assigned': string;
    /**
     * queued timestamp
     * @type {string}
     * @memberof MailLogEntry
     */
    'queued': string;
    /**
     * lock id
     * @type {string}
     * @memberof MailLogEntry
     */
    '_lock': string;
    /**
     * logger
     * @type {string}
     * @memberof MailLogEntry
     */
    'logger': string;
    /**
     * mx port number
     * @type {number}
     * @memberof MailLogEntry
     */
    'mxPort': number;
    /**
     * connection key
     * @type {string}
     * @memberof MailLogEntry
     */
    'connectionKey': string;
    /**
     * mx hostname
     * @type {string}
     * @memberof MailLogEntry
     */
    'mxHostname': string;
    /**
     * body hash
     * @type {string}
     * @memberof MailLogEntry
     */
    'sentBodyHash': string;
    /**
     * sent body size in bytes
     * @type {number}
     * @memberof MailLogEntry
     */
    'sentBodySize': number;
    /**
     * md5 checksum matching result
     * @type {number}
     * @memberof MailLogEntry
     */
    'md5Match': number;
}
/**
 * Details for an Email
 * @export
 * @interface SendMail
 */
export interface SendMail {
    /**
     * The Contact whom is the primary recipient of this email.
     * @type {string}
     * @memberof SendMail
     */
    'to': string;
    /**
     * The contact whom is the this email is from.
     * @type {string}
     * @memberof SendMail
     */
    'from': string;
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMail
     */
    'subject': string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMail
     */
    'body': string;
}
/**
 * Details for an Email
 * @export
 * @interface SendMailAdv
 */
export interface SendMailAdv {
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMailAdv
     */
    'subject': string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMailAdv
     */
    'body': string;
    /**
     * 
     * @type {SendMailAdvFrom}
     * @memberof SendMailAdv
     */
    'from': SendMailAdvFrom;
    /**
     * A list of destionation email addresses to send this to
     * @type {Array<SendMailAdvToInner>}
     * @memberof SendMailAdv
     */
    'to': Array<SendMailAdvToInner>;
    /**
     * (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
     * @type {Array<SendMailAdvReplytoInner>}
     * @memberof SendMailAdv
     */
    'replyto'?: Array<SendMailAdvReplytoInner>;
    /**
     * (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
     * @type {Array<SendMailAdvCcInner>}
     * @memberof SendMailAdv
     */
    'cc'?: Array<SendMailAdvCcInner>;
    /**
     * (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
     * @type {Array<SendMailAdvBccInner>}
     * @memberof SendMailAdv
     */
    'bcc'?: Array<SendMailAdvBccInner>;
    /**
     * (optional) File attachments to include in the email.  The file contents must be base64 encoded!
     * @type {Array<SendMailAdvAttachmentsInner>}
     * @memberof SendMailAdv
     */
    'attachments'?: Array<SendMailAdvAttachmentsInner>;
    /**
     * (optional)  ID of the Mail order within our system to use as the Mail Account.
     * @type {number}
     * @memberof SendMailAdv
     */
    'id'?: number;
}
/**
 * A File attachment for an email
 * @export
 * @interface SendMailAdvAttachmentsInner
 */
export interface SendMailAdvAttachmentsInner {
    /**
     * Contents of the attached file (must be base64 encoded)
     * @type {any}
     * @memberof SendMailAdvAttachmentsInner
     */
    'data': any;
    /**
     * (optional) Filename to specify for the attachment.
     * @type {string}
     * @memberof SendMailAdvAttachmentsInner
     */
    'filename'?: string;
}
/**
 * An Email Contact
 * @export
 * @interface SendMailAdvBccInner
 */
export interface SendMailAdvBccInner {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvBccInner
     */
    'email': string;
    /**
     * (optional) Name to use for the BCC contact.
     * @type {string}
     * @memberof SendMailAdvBccInner
     */
    'name'?: string;
}
/**
 * An Email Contact
 * @export
 * @interface SendMailAdvCcInner
 */
export interface SendMailAdvCcInner {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvCcInner
     */
    'email': string;
    /**
     * (optional) Name to use for the CC contact.
     * @type {string}
     * @memberof SendMailAdvCcInner
     */
    'name'?: string;
}
/**
 * The information to use for the From address in the email. from.
 * @export
 * @interface SendMailAdvFrom
 */
export interface SendMailAdvFrom {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvFrom
     */
    'email': string;
    /**
     * (optional) Name to use for the sending contact.
     * @type {string}
     * @memberof SendMailAdvFrom
     */
    'name'?: string;
}
/**
 * An Email Contact
 * @export
 * @interface SendMailAdvReplytoInner
 */
export interface SendMailAdvReplytoInner {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvReplytoInner
     */
    'email': string;
    /**
     * (optional) Name to use for the sending contact.
     * @type {string}
     * @memberof SendMailAdvReplytoInner
     */
    'name'?: string;
}
/**
 * An Email Contact
 * @export
 * @interface SendMailAdvToInner
 */
export interface SendMailAdvToInner {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvToInner
     */
    'email': string;
    /**
     * (optional) Name to use for the destination contact.
     * @type {string}
     * @memberof SendMailAdvToInner
     */
    'name'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {SendMailAdv} sendMailAdv 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdvMail: async (sendMailAdv: SendMailAdv, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendMailAdv' is not null or undefined
            assertParamExists('sendAdvMail', 'sendMailAdv', sendMailAdv)
            const localVarPath = `/mail/advsend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMailAdv, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
         * @summary Sends an Email
         * @param {string} to The Contact whom is the primary recipient of this email.
         * @param {string} from The contact whom is the this email is from.
         * @param {string} subject The subject or title of the email
         * @param {string} body The main email contents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail: async (to: string, from: string, subject: string, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'to' is not null or undefined
            assertParamExists('sendMail', 'to', to)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('sendMail', 'from', from)
            // verify required parameter 'subject' is not null or undefined
            assertParamExists('sendMail', 'subject', subject)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('sendMail', 'body', body)
            const localVarPath = `/mail/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)


            if (to !== undefined) { 
                localVarFormParams.set('to', to as any);
            }
    
            if (from !== undefined) { 
                localVarFormParams.set('from', from as any);
            }
    
            if (subject !== undefined) { 
                localVarFormParams.set('subject', subject as any);
            }
    
            if (body !== undefined) { 
                localVarFormParams.set('body', body as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {string} [search] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {number} [startDate] earliest date to get emails in unix timestamp format
         * @param {number} [endDate] earliest date to get emails in unix timestamp format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLog: async (id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMailOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetMailOrders200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMailOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingServer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingServer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {SendMailAdv} sendMailAdv 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAdvMail(sendMailAdv: SendMailAdv, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAdvMail(sendMailAdv, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
         * @summary Sends an Email
         * @param {string} to The Contact whom is the primary recipient of this email.
         * @param {string} from The contact whom is the this email is from.
         * @param {string} subject The subject or title of the email
         * @param {string} body The main email contents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMail(to: string, from: string, subject: string, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMail(to, from, subject, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {string} [search] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {number} [startDate] earliest date to get emails in unix timestamp format
         * @param {number} [endDate] earliest date to get emails in unix timestamp format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailLog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMailLog(id, search, skip, limit, startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(options?: any): AxiosPromise<Array<GetMailOrders200ResponseInner>> {
            return localVarFp.getMailOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options?: any): AxiosPromise<void> {
            return localVarFp.pingServer(options).then((request) => request(axios, basePath));
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {SendMailAdv} sendMailAdv 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdvMail(sendMailAdv: SendMailAdv, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.sendAdvMail(sendMailAdv, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
         * @summary Sends an Email
         * @param {string} to The Contact whom is the primary recipient of this email.
         * @param {string} from The contact whom is the this email is from.
         * @param {string} subject The subject or title of the email
         * @param {string} body The main email contents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail(to: string, from: string, subject: string, body: string, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.sendMail(to, from, subject, body, options).then((request) => request(axios, basePath));
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} [id] The ID of your mail order this will be sent through.
         * @param {string} [search] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {number} [startDate] earliest date to get emails in unix timestamp format
         * @param {number} [endDate] earliest date to get emails in unix timestamp format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, options?: any): AxiosPromise<MailLog> {
            return localVarFp.viewMailLog(id, search, skip, limit, startDate, endDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary displays a list of mail service orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMailOrders(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMailOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Checks if the server is running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingServer(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pingServer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @summary Sends an Email with Advanced Options
     * @param {SendMailAdv} sendMailAdv 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAdvMail(sendMailAdv: SendMailAdv, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendAdvMail(sendMailAdv, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * @summary Sends an Email
     * @param {string} to The Contact whom is the primary recipient of this email.
     * @param {string} from The contact whom is the this email is from.
     * @param {string} subject The subject or title of the email
     * @param {string} body The main email contents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendMail(to: string, from: string, subject: string, body: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendMail(to, from, subject, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @summary displays the mail log
     * @param {number} [id] The ID of your mail order this will be sent through.
     * @param {string} [search] pass an optional search string for looking up inventory
     * @param {number} [skip] number of records to skip for pagination
     * @param {number} [limit] maximum number of records to return
     * @param {number} [startDate] earliest date to get emails in unix timestamp format
     * @param {number} [endDate] earliest date to get emails in unix timestamp format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).viewMailLog(id, search, skip, limit, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
}




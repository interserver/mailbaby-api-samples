# #MailBaby Email Delivery API
#
##**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
#
#The version of the OpenAPI document: 1.0.1
#Contact: support@interserver.net
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require "json"
require "time"

module 
  # An email record
  class MailLogEntry
    include JSON::Serializable

    # Required properties
    # internal db id
    @[JSON::Field(key: "_id", type: Int32, nillable: false, emit_null: false)]
    property _id : Int32

    # mail id
    @[JSON::Field(key: "id", type: String, nillable: false, emit_null: false)]
    property id : String

    # from address
    @[JSON::Field(key: "from", type: String, nillable: false, emit_null: false)]
    property from : String

    # to address
    @[JSON::Field(key: "to", type: String, nillable: false, emit_null: false)]
    property to : String

    # email subject
    @[JSON::Field(key: "subject", type: String, nillable: false, emit_null: false)]
    property subject : String

    # message id
    @[JSON::Field(key: "messageId", type: String, nillable: false, emit_null: false)]
    property message_id : String

    # creation date
    @[JSON::Field(key: "created", type: String, nillable: false, emit_null: false)]
    property created : String

    # creation timestamp
    @[JSON::Field(key: "time", type: Int32, nillable: false, emit_null: false)]
    property time : Int32

    # user account
    @[JSON::Field(key: "user", type: String, nillable: false, emit_null: false)]
    property user : String

    # transaction type
    @[JSON::Field(key: "transtype", type: String, nillable: false, emit_null: false)]
    property transtype : String

    # transaction host
    @[JSON::Field(key: "transhost", type: String, nillable: false, emit_null: false)]
    property transhost : String

    # origin host
    @[JSON::Field(key: "originhost", type: String, nillable: false, emit_null: false)]
    property originhost : String

    # origin ip
    @[JSON::Field(key: "origin", type: String, nillable: false, emit_null: false)]
    property origin : String

    # interface name
    @[JSON::Field(key: "interface", type: String, nillable: false, emit_null: false)]
    property interface : String

    # date processed
    @[JSON::Field(key: "date", type: String, nillable: false, emit_null: false)]
    property date : String

    # sending zone
    @[JSON::Field(key: "sendingZone", type: String, nillable: false, emit_null: false)]
    property sending_zone : String

    # email body size in bytes
    @[JSON::Field(key: "bodySize", type: Int32, nillable: false, emit_null: false)]
    property body_size : Int32

    # md5 sum of the email
    @[JSON::Field(key: "sourceMd5", type: String, nillable: false, emit_null: false)]
    property source_md5 : String

    # delivery sequency
    @[JSON::Field(key: "seq", type: Int32, nillable: false, emit_null: false)]
    property seq : Int32

    # to address domain
    @[JSON::Field(key: "domain", type: String, nillable: false, emit_null: false)]
    property domain : String

    # email receiver address
    @[JSON::Field(key: "recipient", type: String, nillable: false, emit_null: false)]
    property recipient : String

    # locked status
    @[JSON::Field(key: "locked", type: Int32, nillable: false, emit_null: false)]
    property locked : Int32

    # lock timestamp
    @[JSON::Field(key: "lockTime", type: Int32, nillable: false, emit_null: false)]
    property lock_time : Int32

    # assigned server
    @[JSON::Field(key: "assigned", type: String, nillable: false, emit_null: false)]
    property assigned : String

    # queued timestamp
    @[JSON::Field(key: "queued", type: String, nillable: false, emit_null: false)]
    property queued : String

    # lock id
    @[JSON::Field(key: "_lock", type: String, nillable: false, emit_null: false)]
    property _lock : String

    # logger
    @[JSON::Field(key: "logger", type: String, nillable: false, emit_null: false)]
    property logger : String

    # mx port number
    @[JSON::Field(key: "mxPort", type: Int32, nillable: false, emit_null: false)]
    property mx_port : Int32

    # connection key
    @[JSON::Field(key: "connectionKey", type: String, nillable: false, emit_null: false)]
    property connection_key : String

    # mx hostname
    @[JSON::Field(key: "mxHostname", type: String, nillable: false, emit_null: false)]
    property mx_hostname : String

    # body hash
    @[JSON::Field(key: "sentBodyHash", type: String, nillable: false, emit_null: false)]
    property sent_body_hash : String

    # sent body size in bytes
    @[JSON::Field(key: "sentBodySize", type: Int32, nillable: false, emit_null: false)]
    property sent_body_size : Int32

    # md5 checksum matching result
    @[JSON::Field(key: "md5Match", type: Int32, nillable: false, emit_null: false)]
    property md5_match : Int32

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@_id : Int32, @id : String, @from : String, @to : String, @subject : String, @message_id : String, @created : String, @time : Int32, @user : String, @transtype : String, @transhost : String, @originhost : String, @origin : String, @interface : String, @date : String, @sending_zone : String, @body_size : Int32, @source_md5 : String, @seq : Int32, @domain : String, @recipient : String, @locked : Int32, @lock_time : Int32, @assigned : String, @queued : String, @_lock : String, @logger : String, @mx_port : Int32, @connection_key : String, @mx_hostname : String, @sent_body_hash : String, @sent_body_size : Int32, @md5_match : Int32)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          _id == o._id &&
          id == o.id &&
          from == o.from &&
          to == o.to &&
          subject == o.subject &&
          message_id == o.message_id &&
          created == o.created &&
          time == o.time &&
          user == o.user &&
          transtype == o.transtype &&
          transhost == o.transhost &&
          originhost == o.originhost &&
          origin == o.origin &&
          interface == o.interface &&
          date == o.date &&
          sending_zone == o.sending_zone &&
          body_size == o.body_size &&
          source_md5 == o.source_md5 &&
          seq == o.seq &&
          domain == o.domain &&
          recipient == o.recipient &&
          locked == o.locked &&
          lock_time == o.lock_time &&
          assigned == o.assigned &&
          queued == o.queued &&
          _lock == o._lock &&
          logger == o.logger &&
          mx_port == o.mx_port &&
          connection_key == o.connection_key &&
          mx_hostname == o.mx_hostname &&
          sent_body_hash == o.sent_body_hash &&
          sent_body_size == o.sent_body_size &&
          md5_match == o.md5_match
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_id, id, from, to, subject, message_id, created, time, user, transtype, transhost, originhost, origin, interface, date, sending_zone, body_size, source_md5, seq, domain, recipient, locked, lock_time, assigned, queued, _lock, logger, mx_port, connection_key, mx_hostname, sent_body_hash, sent_body_size, md5_match].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = .const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

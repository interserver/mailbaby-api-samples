// tslint:disable
/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    GenericResponse,
    GenericResponseFromJSON,
    GenericResponseToJSON,
    MailLog,
    MailLogFromJSON,
    MailLogToJSON,
    MailOrder,
    MailOrderFromJSON,
    MailOrderToJSON,
} from '../models';

export interface GetMailByIdRequest {
    id: number;
}

export interface PlaceMailOrderRequest {
    mailOrder?: MailOrder;
}

export interface SendMailByIdRequest {
    id: number;
    subject?: string;
    body?: string;
    to?: string;
    from?: string;
}

export interface ViewMailLogByIdRequest {
    id: number;
    searchString?: string;
    skip?: number;
    limit?: number;
}


/**
 * returns information about a mail order in the system with the given id.
 * Gets mail order information by id
 */
function getMailByIdRaw<T>(requestParameters: GetMailByIdRequest, requestConfig: runtime.TypedQueryConfig<T, MailOrder> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMailById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MailOrderFromJSON(body), text);
    }

    return config;
}

/**
* returns information about a mail order in the system with the given id.
* Gets mail order information by id
*/
export function getMailById<T>(requestParameters: GetMailByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, MailOrder>): QueryConfig<T> {
    return getMailByIdRaw(requestParameters, requestConfig);
}

/**
 * displays a list of mail service orders
 */
function getMailOrdersRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<MailOrder>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(MailOrderFromJSON), text);
    }

    return config;
}

/**
* displays a list of mail service orders
*/
export function getMailOrders<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<MailOrder>>): QueryConfig<T> {
    return getMailOrdersRaw( requestConfig);
}

/**
 * Checks if the server is running
 */
function pingServerRaw<T>( requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ping`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Checks if the server is running
*/
export function pingServer<T>( requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return pingServerRaw( requestConfig);
}

/**
 * Adds an item to the system
 * places a mail order
 */
function placeMailOrderRaw<T>(requestParameters: PlaceMailOrderRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/order`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || MailOrderToJSON(requestParameters.mailOrder),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Adds an item to the system
* places a mail order
*/
export function placeMailOrder<T>(requestParameters: PlaceMailOrderRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return placeMailOrderRaw(requestParameters, requestConfig);
}

/**
 * Sends An email through one of your mail orders.
 * Sends an Email
 */
function sendMailByIdRaw<T>(requestParameters: SendMailByIdRequest, requestConfig: runtime.TypedQueryConfig<T, GenericResponse> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling sendMailById.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.subject !== undefined) {
        queryParameters['subject'] = requestParameters.subject;
    }


    if (requestParameters.body !== undefined) {
        queryParameters['body'] = requestParameters.body;
    }


    if (requestParameters.to !== undefined) {
        queryParameters['to'] = requestParameters.to;
    }


    if (requestParameters.from !== undefined) {
        queryParameters['from'] = requestParameters.from;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/{id}/send`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GenericResponseFromJSON(body), text);
    }

    return config;
}

/**
* Sends An email through one of your mail orders.
* Sends an Email
*/
export function sendMailById<T>(requestParameters: SendMailByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, GenericResponse>): QueryConfig<T> {
    return sendMailByIdRaw(requestParameters, requestConfig);
}

/**
 * validatess order details before placing an order
 */
function validateMailOrderRaw<T>( requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/order`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* validatess order details before placing an order
*/
export function validateMailOrder<T>( requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return validateMailOrderRaw( requestConfig);
}

/**
 * By passing in the appropriate options, you can search for available inventory in the system 
 * displays the mail log
 */
function viewMailLogByIdRaw<T>(requestParameters: ViewMailLogByIdRequest, requestConfig: runtime.TypedQueryConfig<T, Array<MailLog>> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling viewMailLogById.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.searchString !== undefined) {
        queryParameters['searchString'] = requestParameters.searchString;
    }


    if (requestParameters.skip !== undefined) {
        queryParameters['skip'] = requestParameters.skip;
    }


    if (requestParameters.limit !== undefined) {
        queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mail/{id}/log`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(MailLogFromJSON), text);
    }

    return config;
}

/**
* By passing in the appropriate options, you can search for available inventory in the system 
* displays the mail log
*/
export function viewMailLogById<T>(requestParameters: ViewMailLogByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<MailLog>>): QueryConfig<T> {
    return viewMailLogByIdRaw(requestParameters, requestConfig);
}


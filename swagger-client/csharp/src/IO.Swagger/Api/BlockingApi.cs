/* 
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IBlockingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>GenericResponse</returns>
        GenericResponse AddRule (string user, string type, string data);

        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GenericResponse</returns>
        ApiResponse<GenericResponse> AddRuleWithHttpInfo (string user, string type, string data);
        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>GenericResponse</returns>
        GenericResponse AddRule (DenyRuleNew body);

        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>ApiResponse of GenericResponse</returns>
        ApiResponse<GenericResponse> AddRuleWithHttpInfo (DenyRuleNew body);
        /// <summary>
        /// Removes an deny mail rule.
        /// </summary>
        /// <remarks>
        /// Removes one of the configured deny mail rules from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>GenericResponse</returns>
        GenericResponse DeleteRule (int? ruleId);

        /// <summary>
        /// Removes an deny mail rule.
        /// </summary>
        /// <remarks>
        /// Removes one of the configured deny mail rules from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>ApiResponse of GenericResponse</returns>
        ApiResponse<GenericResponse> DeleteRuleWithHttpInfo (int? ruleId);
        /// <summary>
        /// Removes an email address from the blocked list
        /// </summary>
        /// <remarks>
        /// Removes an email address from the various block lists. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GenericResponse</returns>
        GenericResponse DelistBlock (string body);

        /// <summary>
        /// Removes an email address from the blocked list
        /// </summary>
        /// <remarks>
        /// Removes an email address from the various block lists. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GenericResponse</returns>
        ApiResponse<GenericResponse> DelistBlockWithHttpInfo (string body);
        /// <summary>
        /// displays a list of blocked email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MailBlocks</returns>
        MailBlocks GetMailBlocks ();

        /// <summary>
        /// displays a list of blocked email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MailBlocks</returns>
        ApiResponse<MailBlocks> GetMailBlocksWithHttpInfo ();
        /// <summary>
        /// Displays a listing of deny email rules.
        /// </summary>
        /// <remarks>
        /// Returns a listing of all the deny block rules you have configured.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DenyRuleRecord&gt;</returns>
        List<DenyRuleRecord> GetRules ();

        /// <summary>
        /// Displays a listing of deny email rules.
        /// </summary>
        /// <remarks>
        /// Returns a listing of all the deny block rules you have configured.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DenyRuleRecord&gt;</returns>
        ApiResponse<List<DenyRuleRecord>> GetRulesWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>Task of GenericResponse</returns>
        System.Threading.Tasks.Task<GenericResponse> AddRuleAsync (string user, string type, string data);

        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericResponse>> AddRuleAsyncWithHttpInfo (string user, string type, string data);
        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>Task of GenericResponse</returns>
        System.Threading.Tasks.Task<GenericResponse> AddRuleAsync (DenyRuleNew body);

        /// <summary>
        /// Creates a new email deny rule.
        /// </summary>
        /// <remarks>
        /// Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericResponse>> AddRuleAsyncWithHttpInfo (DenyRuleNew body);
        /// <summary>
        /// Removes an deny mail rule.
        /// </summary>
        /// <remarks>
        /// Removes one of the configured deny mail rules from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>Task of GenericResponse</returns>
        System.Threading.Tasks.Task<GenericResponse> DeleteRuleAsync (int? ruleId);

        /// <summary>
        /// Removes an deny mail rule.
        /// </summary>
        /// <remarks>
        /// Removes one of the configured deny mail rules from the system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericResponse>> DeleteRuleAsyncWithHttpInfo (int? ruleId);
        /// <summary>
        /// Removes an email address from the blocked list
        /// </summary>
        /// <remarks>
        /// Removes an email address from the various block lists. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GenericResponse</returns>
        System.Threading.Tasks.Task<GenericResponse> DelistBlockAsync (string body);

        /// <summary>
        /// Removes an email address from the blocked list
        /// </summary>
        /// <remarks>
        /// Removes an email address from the various block lists. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericResponse>> DelistBlockAsyncWithHttpInfo (string body);
        /// <summary>
        /// displays a list of blocked email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MailBlocks</returns>
        System.Threading.Tasks.Task<MailBlocks> GetMailBlocksAsync ();

        /// <summary>
        /// displays a list of blocked email addresses
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MailBlocks)</returns>
        System.Threading.Tasks.Task<ApiResponse<MailBlocks>> GetMailBlocksAsyncWithHttpInfo ();
        /// <summary>
        /// Displays a listing of deny email rules.
        /// </summary>
        /// <remarks>
        /// Returns a listing of all the deny block rules you have configured.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DenyRuleRecord&gt;</returns>
        System.Threading.Tasks.Task<List<DenyRuleRecord>> GetRulesAsync ();

        /// <summary>
        /// Displays a listing of deny email rules.
        /// </summary>
        /// <remarks>
        /// Returns a listing of all the deny block rules you have configured.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DenyRuleRecord&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DenyRuleRecord>>> GetRulesAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class BlockingApi : IBlockingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlockingApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockingApi"/> class
        /// </summary>
        /// <returns></returns>
        public BlockingApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlockingApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>GenericResponse</returns>
        public GenericResponse AddRule (string user, string type, string data)
        {
             ApiResponse<GenericResponse> localVarResponse = AddRuleWithHttpInfo(user, type, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GenericResponse</returns>
        public ApiResponse< GenericResponse > AddRuleWithHttpInfo (string user, string type, string data)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlockingApi->AddRule");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BlockingApi->AddRule");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling BlockingApi->AddRule");

            var localVarPath = "/mail/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (data != null) localVarFormParams.Add("data", this.Configuration.ApiClient.ParameterToString(data)); // form parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>Task of GenericResponse</returns>
        public async System.Threading.Tasks.Task<GenericResponse> AddRuleAsync (string user, string type, string data)
        {
             ApiResponse<GenericResponse> localVarResponse = await AddRuleAsyncWithHttpInfo(user, type, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <param name="type"></param>
        /// <param name="data"></param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericResponse>> AddRuleAsyncWithHttpInfo (string user, string type, string data)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlockingApi->AddRule");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BlockingApi->AddRule");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling BlockingApi->AddRule");

            var localVarPath = "/mail/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (user != null) localVarFormParams.Add("user", this.Configuration.ApiClient.ParameterToString(user)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (data != null) localVarFormParams.Add("data", this.Configuration.ApiClient.ParameterToString(data)); // form parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>GenericResponse</returns>
        public GenericResponse AddRule (DenyRuleNew body)
        {
             ApiResponse<GenericResponse> localVarResponse = AddRuleWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>ApiResponse of GenericResponse</returns>
        public ApiResponse< GenericResponse > AddRuleWithHttpInfo (DenyRuleNew body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BlockingApi->AddRule");

            var localVarPath = "/mail/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>Task of GenericResponse</returns>
        public async System.Threading.Tasks.Task<GenericResponse> AddRuleAsync (DenyRuleNew body)
        {
             ApiResponse<GenericResponse> localVarResponse = await AddRuleAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new email deny rule. Adds a new email deny rule into the system to block new emails that match the given criteria
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">These are the fields needed to create a new email deny rule.</param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericResponse>> AddRuleAsyncWithHttpInfo (DenyRuleNew body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BlockingApi->AddRule");

            var localVarPath = "/mail/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// Removes an deny mail rule. Removes one of the configured deny mail rules from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>GenericResponse</returns>
        public GenericResponse DeleteRule (int? ruleId)
        {
             ApiResponse<GenericResponse> localVarResponse = DeleteRuleWithHttpInfo(ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes an deny mail rule. Removes one of the configured deny mail rules from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>ApiResponse of GenericResponse</returns>
        public ApiResponse< GenericResponse > DeleteRuleWithHttpInfo (int? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling BlockingApi->DeleteRule");

            var localVarPath = "/mail/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// Removes an deny mail rule. Removes one of the configured deny mail rules from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>Task of GenericResponse</returns>
        public async System.Threading.Tasks.Task<GenericResponse> DeleteRuleAsync (int? ruleId)
        {
             ApiResponse<GenericResponse> localVarResponse = await DeleteRuleAsyncWithHttpInfo(ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes an deny mail rule. Removes one of the configured deny mail rules from the system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The ID of the Rules entry.</param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericResponse>> DeleteRuleAsyncWithHttpInfo (int? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling BlockingApi->DeleteRule");

            var localVarPath = "/mail/rules/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// Removes an email address from the blocked list Removes an email address from the various block lists. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>GenericResponse</returns>
        public GenericResponse DelistBlock (string body)
        {
             ApiResponse<GenericResponse> localVarResponse = DelistBlockWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes an email address from the blocked list Removes an email address from the various block lists. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of GenericResponse</returns>
        public ApiResponse< GenericResponse > DelistBlockWithHttpInfo (string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BlockingApi->DelistBlock");

            var localVarPath = "/mail/blocks/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DelistBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// Removes an email address from the blocked list Removes an email address from the various block lists. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of GenericResponse</returns>
        public async System.Threading.Tasks.Task<GenericResponse> DelistBlockAsync (string body)
        {
             ApiResponse<GenericResponse> localVarResponse = await DelistBlockAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes an email address from the blocked list Removes an email address from the various block lists. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (GenericResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericResponse>> DelistBlockAsyncWithHttpInfo (string body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BlockingApi->DelistBlock");

            var localVarPath = "/mail/blocks/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DelistBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GenericResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericResponse)));
        }

        /// <summary>
        /// displays a list of blocked email addresses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MailBlocks</returns>
        public MailBlocks GetMailBlocks ()
        {
             ApiResponse<MailBlocks> localVarResponse = GetMailBlocksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// displays a list of blocked email addresses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MailBlocks</returns>
        public ApiResponse< MailBlocks > GetMailBlocksWithHttpInfo ()
        {

            var localVarPath = "/mail/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMailBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailBlocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailBlocks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailBlocks)));
        }

        /// <summary>
        /// displays a list of blocked email addresses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MailBlocks</returns>
        public async System.Threading.Tasks.Task<MailBlocks> GetMailBlocksAsync ()
        {
             ApiResponse<MailBlocks> localVarResponse = await GetMailBlocksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// displays a list of blocked email addresses 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MailBlocks)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MailBlocks>> GetMailBlocksAsyncWithHttpInfo ()
        {

            var localVarPath = "/mail/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMailBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MailBlocks>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MailBlocks) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MailBlocks)));
        }

        /// <summary>
        /// Displays a listing of deny email rules. Returns a listing of all the deny block rules you have configured.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DenyRuleRecord&gt;</returns>
        public List<DenyRuleRecord> GetRules ()
        {
             ApiResponse<List<DenyRuleRecord>> localVarResponse = GetRulesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a listing of deny email rules. Returns a listing of all the deny block rules you have configured.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DenyRuleRecord&gt;</returns>
        public ApiResponse< List<DenyRuleRecord> > GetRulesWithHttpInfo ()
        {

            var localVarPath = "/mail/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DenyRuleRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DenyRuleRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DenyRuleRecord>)));
        }

        /// <summary>
        /// Displays a listing of deny email rules. Returns a listing of all the deny block rules you have configured.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DenyRuleRecord&gt;</returns>
        public async System.Threading.Tasks.Task<List<DenyRuleRecord>> GetRulesAsync ()
        {
             ApiResponse<List<DenyRuleRecord>> localVarResponse = await GetRulesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a listing of deny email rules. Returns a listing of all the deny block rules you have configured.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DenyRuleRecord&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DenyRuleRecord>>> GetRulesAsyncWithHttpInfo ()
        {

            var localVarPath = "/mail/rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (apiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DenyRuleRecord>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<DenyRuleRecord>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DenyRuleRecord>)));
        }

    }
}

# #MailBaby Email Delivery and Management Service API
#
##**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
#
#The version of the OpenAPI document: 1.1.0
#Contact: support@interserver.net
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require "uri"

module OpenAPIClient
  class HistoryApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # displays a list of blocked email addresses
    # @return [Array(GetStats200ResponseInner)]
    def get_stats()
      data, _status_code, _headers = get_stats_with_http_info()
      data
    end

    # displays a list of blocked email addresses
    # @return [Array<(Array(GetStats200ResponseInner), Integer, Hash)>] Array(GetStats200ResponseInner) data, response status code and response headers
    def get_stats_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: HistoryApi.get_stats ..."}
      end
      # resource path
      local_var_path = "/mail/stats"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(GetStats200ResponseInner)"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"HistoryApi.get_stats",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: HistoryApi#get_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(GetStats200ResponseInner).from_json(data), status_code, headers
    end

    # displays the mail log
    # Get a listing of the emails sent through this system 
    # @return [MailLog]
    def view_mail_log(id : Int64?, origin : String?, mx : String?, from : String?, to : String?, subject : String?, mailid : String?, skip : Int32?, limit : Int32?, start_date : Int64?, end_date : Int64?)
      data, _status_code, _headers = view_mail_log_with_http_info(id, origin, mx, from, to, subject, mailid, skip, limit, start_date, end_date)
      data
    end

    # displays the mail log
    # Get a listing of the emails sent through this system 
    # @return [Array<(MailLog, Integer, Hash)>] MailLog data, response status code and response headers
    def view_mail_log_with_http_info(id : Int64?, origin : String?, mx : String?, from : String?, to : String?, subject : String?, mailid : String?, skip : Int32?, limit : Int32?, start_date : Int64?, end_date : Int64?)
      if @api_client.config.debugging
        Log.debug {"Calling API: HistoryApi.view_mail_log ..."}
      end
      if @api_client.config.client_side_validation && !skip.nil? && skip < 0
        raise ArgumentError.new("invalid value for \"skip\" when calling HistoryApi.view_mail_log, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 10000
        raise ArgumentError.new("invalid value for \"limit\" when calling HistoryApi.view_mail_log, must be smaller than or equal to 10000.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 1
        raise ArgumentError.new("invalid value for \"limit\" when calling HistoryApi.view_mail_log, must be greater than or equal to 1.")
      end

      if @api_client.config.client_side_validation && !start_date.nil? && start_date > 9999999999
        raise ArgumentError.new("invalid value for \"start_date\" when calling HistoryApi.view_mail_log, must be smaller than or equal to 9999999999.")
      end

      if @api_client.config.client_side_validation && !start_date.nil? && start_date < 0
        raise ArgumentError.new("invalid value for \"start_date\" when calling HistoryApi.view_mail_log, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !end_date.nil? && end_date > 9999999999
        raise ArgumentError.new("invalid value for \"end_date\" when calling HistoryApi.view_mail_log, must be smaller than or equal to 9999999999.")
      end

      if @api_client.config.client_side_validation && !end_date.nil? && end_date < 0
        raise ArgumentError.new("invalid value for \"end_date\" when calling HistoryApi.view_mail_log, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/mail/log"

      # query parameters
      query_params = Hash(String, String).new
      query_params["id"] = id.to_s unless id.nil?
      query_params["origin"] = origin.to_s unless origin.nil?
      query_params["mx"] = mx.to_s unless mx.nil?
      query_params["from"] = from.to_s unless from.nil?
      query_params["to"] = to.to_s unless to.nil?
      query_params["subject"] = subject.to_s unless subject.nil?
      query_params["mailid"] = mailid.to_s unless mailid.nil?
      query_params["skip"] = skip.to_s unless skip.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["startDate"] = start_date.to_s unless start_date.nil?
      query_params["endDate"] = end_date.to_s unless end_date.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MailLog"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"HistoryApi.view_mail_log",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: HistoryApi#view_mail_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MailLog.from_json(data), status_code, headers
    end
  end
end

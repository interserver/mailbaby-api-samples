//
// SendingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SendingAPI {

    /**
     Sends an Email with Advanced Options
     
     - parameter subject: (form) The subject or title of the email 
     - parameter body: (form) The main email contents. 
     - parameter from: (form)  
     - parameter to: (form) A list of destionation email addresses to send this to 
     - parameter replyto: (form) (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address. (optional)
     - parameter cc: (form) (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well. (optional)
     - parameter bcc: (form) (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list. (optional)
     - parameter attachments: (form) (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
     - parameter id: (form) (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sendAdvMail(subject: String, body: String, from: EmailAddressName, to: [EmailAddressName], replyto: [EmailAddressName]? = nil, cc: [EmailAddressName]? = nil, bcc: [EmailAddressName]? = nil, attachments: [MailAttachment]? = nil, id: Int64? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenericResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return sendAdvMailWithRequestBuilder(subject: subject, body: body, from: from, to: to, replyto: replyto, cc: cc, bcc: bcc, attachments: attachments, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sends an Email with Advanced Options
     - POST /mail/advsend
     - Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: apiKeyAuth
     - parameter subject: (form) The subject or title of the email 
     - parameter body: (form) The main email contents. 
     - parameter from: (form)  
     - parameter to: (form) A list of destionation email addresses to send this to 
     - parameter replyto: (form) (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address. (optional)
     - parameter cc: (form) (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well. (optional)
     - parameter bcc: (form) (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list. (optional)
     - parameter attachments: (form) (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
     - parameter id: (form) (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendAdvMailWithRequestBuilder(subject: String, body: String, from: EmailAddressName, to: [EmailAddressName], replyto: [EmailAddressName]? = nil, cc: [EmailAddressName]? = nil, bcc: [EmailAddressName]? = nil, attachments: [MailAttachment]? = nil, id: Int64? = nil) -> RequestBuilder<GenericResponse> {
        let localVariablePath = "/mail/advsend"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "subject": subject.encodeToJSON(),
            "body": body.encodeToJSON(),
            "from": from.encodeToJSON(),
            "to": to.encodeToJSON(),
            "replyto": replyto?.encodeToJSON(),
            "cc": cc?.encodeToJSON(),
            "bcc": bcc?.encodeToJSON(),
            "attachments": attachments?.encodeToJSON(),
            "id": id?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sends an Email
     
     - parameter to: (form) The Contact whom is the primary recipient of this email. 
     - parameter from: (form) The contact whom is the this email is from. 
     - parameter subject: (form) The subject or title of the email 
     - parameter body: (form) The main email contents. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func sendMail(to: String, from: String, subject: String, body: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenericResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return sendMailWithRequestBuilder(to: to, from: from, subject: subject, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sends an Email
     - POST /mail/send
     - Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     - API Key:
       - type: apiKey X-API-KEY (HEADER)
       - name: apiKeyAuth
     - parameter to: (form) The Contact whom is the primary recipient of this email. 
     - parameter from: (form) The contact whom is the this email is from. 
     - parameter subject: (form) The subject or title of the email 
     - parameter body: (form) The main email contents. 
     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendMailWithRequestBuilder(to: String, from: String, subject: String, body: String) -> RequestBuilder<GenericResponse> {
        let localVariablePath = "/mail/send"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "to": to.encodeToJSON(),
            "from": from.encodeToJSON(),
            "subject": subject.encodeToJSON(),
            "body": body.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

extends Resource
class_name MailStatsType

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# MailStatsType Model
# Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost.


# Required: False
# isArray: false
# Allowed values: "all", "billing", "month", "7d", "24h", "today", "1h"
@export var some_timenull: String = "1h":
	set(value):
		if str(value) != "" and not (str(value) in __some_timenull__allowable__values):
			push_error("MailStatsType: tried to set property `some_timenull` to a value that is not allowed." +
				"  Allowed values: `all`, `billing`, `month`, `7d`, `24h`, `today`, `1h`")
			return
		__some_timenull__was__set = true
		some_timenull = value
var __some_timenull__was__set := false
var __some_timenull__allowable__values := ["all", "billing", "month", "7d", "24h", "today", "1h"]

# Required: False
# isArray: false
@export var usage: int:
	set(value):
		__usage__was__set = true
		usage = value
var __usage__was__set := false

# Required: False
# isArray: false
@export var currency: String = "":
	set(value):
		__currency__was__set = true
		currency = value
var __currency__was__set := false

# Required: False
# isArray: false
@export var currencySymbol: String = "":
	set(value):
		__currencySymbol__was__set = true
		currencySymbol = value
var __currencySymbol__was__set := false

# Required: False
# isArray: false
@export var cost: int:
	set(value):
		__cost__was__set = true
		cost = value
var __cost__was__set := false

# Required: False
# isArray: false
@export var received: int:
	set(value):
		__received__was__set = true
		received = value
var __received__was__set := false

# Required: False
# isArray: false
@export var sent: int:
	set(value):
		__sent__was__set = true
		sent = value
var __sent__was__set := false

# Required: False
# isArray: false
@export var volume: MailStatsTypeVolume:
	set(value):
		__volume__was__set = true
		volume = value
var __volume__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__some_timenull__was__set:
		bzz_dictionary["some_timenull"] = self.some_timenull
	if self.__usage__was__set:
		bzz_dictionary["usage"] = self.usage
	if self.__currency__was__set:
		bzz_dictionary["currency"] = self.currency
	if self.__currencySymbol__was__set:
		bzz_dictionary["currencySymbol"] = self.currencySymbol
	if self.__cost__was__set:
		bzz_dictionary["cost"] = self.cost
	if self.__received__was__set:
		bzz_dictionary["received"] = self.received
	if self.__sent__was__set:
		bzz_dictionary["sent"] = self.sent
	if self.__volume__was__set:
		bzz_dictionary["volume"] = self.volume
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("some_timenull"):
		me.some_timenull = from_dict["some_timenull"]
	if from_dict.has("usage"):
		me.usage = from_dict["usage"]
	if from_dict.has("currency"):
		me.currency = from_dict["currency"]
	if from_dict.has("currencySymbol"):
		me.currencySymbol = from_dict["currencySymbol"]
	if from_dict.has("cost"):
		me.cost = from_dict["cost"]
	if from_dict.has("received"):
		me.received = from_dict["received"]
	if from_dict.has("sent"):
		me.sent = from_dict["sent"]
	if from_dict.has("volume"):
		me.volume = MailStatsType_volume.bzz_denormalize_single(from_dict["volume"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


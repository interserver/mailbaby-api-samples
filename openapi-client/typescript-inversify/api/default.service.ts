/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ErrorResponse } from '../model/errorResponse';
import { GenericResponse } from '../model/genericResponse';
import { MailLog } from '../model/mailLog';
import { MailOrder } from '../model/mailOrder';
import { SendMail } from '../model/sendMail';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DefaultService {
    private basePath: string = 'https://api.mailbaby.net';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * displays a list of mail service orders
     * 
     * @param id The ID of your mail order this will be sent through.
     
     */
    public getMailOrders(id?: number, observe?: 'body', headers?: Headers): Observable<Array<MailOrder>>;
    public getMailOrders(id?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<MailOrder>>>;
    public getMailOrders(id?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (id !== undefined) {
            queryParameters.push('id='+encodeURIComponent(String(id)));
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json, application/xml, text/plain';

        const response: Observable<HttpResponse<Array<MailOrder>>> = this.httpClient.get(`${this.basePath}/mail?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<MailOrder>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Checks if the server is running
     * 
     
     */
    public pingServer(observe?: 'body', headers?: Headers): Observable<any>;
    public pingServer(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public pingServer(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/ping`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * places a mail order
     * Adds an item to the system
     * @param mailOrder Inventory item to add
     
     */
    public placeMailOrder(mailOrder?: MailOrder, observe?: 'body', headers?: Headers): Observable<any>;
    public placeMailOrder(mailOrder?: MailOrder, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public placeMailOrder(mailOrder?: MailOrder, observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/mail/order`, mailOrder , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param sendMail 
     
     */
    public sendAdvMailById(sendMail: SendMail, observe?: 'body', headers?: Headers): Observable<GenericResponse>;
    public sendAdvMailById(sendMail: SendMail, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenericResponse>>;
    public sendAdvMailById(sendMail: SendMail, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (sendMail === null || sendMail === undefined){
            throw new Error('Required parameter sendMail was null or undefined when calling sendAdvMailById.');
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenericResponse>> = this.httpClient.post(`${this.basePath}/mail/advsend`, sendMail , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenericResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param sendMail 
     
     */
    public sendMailById(sendMail: SendMail, observe?: 'body', headers?: Headers): Observable<GenericResponse>;
    public sendMailById(sendMail: SendMail, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenericResponse>>;
    public sendMailById(sendMail: SendMail, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (sendMail === null || sendMail === undefined){
            throw new Error('Required parameter sendMail was null or undefined when calling sendMailById.');
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenericResponse>> = this.httpClient.post(`${this.basePath}/mail/send`, sendMail , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenericResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * validatess order details before placing an order
     * 
     
     */
    public validateMailOrder(observe?: 'body', headers?: Headers): Observable<any>;
    public validateMailOrder(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public validateMailOrder(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/mail/order`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through.
     * @param searchString pass an optional search string for looking up inventory
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     
     */
    public viewMailLogById(id?: number, searchString?: string, skip?: number, limit?: number, observe?: 'body', headers?: Headers): Observable<Array<MailLog>>;
    public viewMailLogById(id?: number, searchString?: string, skip?: number, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<MailLog>>>;
    public viewMailLogById(id?: number, searchString?: string, skip?: number, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (id !== undefined) {
            queryParameters.push('id='+encodeURIComponent(String(id)));
        }
        if (searchString !== undefined) {
            queryParameters.push('searchString='+encodeURIComponent(String(searchString)));
        }
        if (skip !== undefined) {
            queryParameters.push('skip='+encodeURIComponent(String(skip)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<MailLog>>> = this.httpClient.get(`${this.basePath}/mail/log?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<MailLog>>(httpResponse.response))
               );
        }
        return response;
    }

}

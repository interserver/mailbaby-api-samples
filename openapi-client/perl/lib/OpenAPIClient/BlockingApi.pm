=begin comment

MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

The version of the OpenAPI document: 1.1.0
Contact: support@interserver.net
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package OpenAPIClient::BlockingApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_rule
#
# Creates a new email deny rule.
#
# @param string $type The type of deny rule. (required)
# @param string $data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com. (required)
# @param string $user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used. (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The type of deny rule.',
        required => '1',
    },
    'data' => {
        data_type => 'string',
        description => 'The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_rule' } = {
        summary => 'Creates a new email deny rule.',
        params => $params,
        returns => 'GenericResponse',
        };
}
# @return GenericResponse
#
sub add_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling add_rule");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling add_rule");
    }

    # parse inputs
    my $_resource_path = '/mail/rules';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/x-www-form-urlencoded', 'application/json');

    # form params
    if ( exists $args{'user'} ) {
                $form_params->{'user'} = $self->{api_client}->to_form_value($args{'user'});
    }

    # form params
    if ( exists $args{'type'} ) {
                $form_params->{'type'} = $self->{api_client}->to_form_value($args{'type'});
    }

    # form params
    if ( exists $args{'data'} ) {
                $form_params->{'data'} = $self->{api_client}->to_form_value($args{'data'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenericResponse', $response);
    return $_response_object;
}

#
# delete_rule
#
# Removes an deny mail rule.
#
# @param int $rule_id The ID of the Rules entry. (required)
{
    my $params = {
    'rule_id' => {
        data_type => 'int',
        description => 'The ID of the Rules entry.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_rule' } = {
        summary => 'Removes an deny mail rule.',
        params => $params,
        returns => 'GenericResponse',
        };
}
# @return GenericResponse
#
sub delete_rule {
    my ($self, %args) = @_;

    # verify the required parameter 'rule_id' is set
    unless (exists $args{'rule_id'}) {
      croak("Missing the required parameter 'rule_id' when calling delete_rule");
    }

    # parse inputs
    my $_resource_path = '/mail/rules/{ruleId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'rule_id'}) {
        my $_base_variable = "{" . "ruleId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'rule_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenericResponse', $response);
    return $_response_object;
}

#
# delist_block
#
# Removes an email address from the blocked list
#
# @param EmailAddress $email_address  (required)
{
    my $params = {
    'email_address' => {
        data_type => 'EmailAddress',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delist_block' } = {
        summary => 'Removes an email address from the blocked list',
        params => $params,
        returns => 'GenericResponse',
        };
}
# @return GenericResponse
#
sub delist_block {
    my ($self, %args) = @_;

    # verify the required parameter 'email_address' is set
    unless (exists $args{'email_address'}) {
      croak("Missing the required parameter 'email_address' when calling delist_block");
    }

    # parse inputs
    my $_resource_path = '/mail/blocks/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'multipart/form-data');

    my $_body_data;
    # body params
    if ( exists $args{'email_address'}) {
        $_body_data = $args{'email_address'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GenericResponse', $response);
    return $_response_object;
}

#
# get_mail_blocks
#
# displays a list of blocked email addresses
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_mail_blocks' } = {
        summary => 'displays a list of blocked email addresses',
        params => $params,
        returns => 'MailBlocks',
        };
}
# @return MailBlocks
#
sub get_mail_blocks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mail/blocks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MailBlocks', $response);
    return $_response_object;
}

#
# get_rules
#
# Displays a listing of deny email rules.
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_rules' } = {
        summary => 'Displays a listing of deny email rules.',
        params => $params,
        returns => 'ARRAY[DenyRuleRecord]',
        };
}
# @return ARRAY[DenyRuleRecord]
#
sub get_rules {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mail/rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DenyRuleRecord]', $response);
    return $_response_object;
}

1;

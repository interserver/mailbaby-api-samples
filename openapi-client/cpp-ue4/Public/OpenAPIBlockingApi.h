/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIBlockingApi
{
public:
	OpenAPIBlockingApi();
	~OpenAPIBlockingApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AddRuleRequest;
	class AddRuleResponse;
	class DeleteRuleRequest;
	class DeleteRuleResponse;
	class DelistBlockRequest;
	class DelistBlockResponse;
	class GetMailBlocksRequest;
	class GetMailBlocksResponse;
	class GetRulesRequest;
	class GetRulesResponse;
	
    DECLARE_DELEGATE_OneParam(FAddRuleDelegate, const AddRuleResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteRuleDelegate, const DeleteRuleResponse&);
    DECLARE_DELEGATE_OneParam(FDelistBlockDelegate, const DelistBlockResponse&);
    DECLARE_DELEGATE_OneParam(FGetMailBlocksDelegate, const GetMailBlocksResponse&);
    DECLARE_DELEGATE_OneParam(FGetRulesDelegate, const GetRulesResponse&);
    
    FHttpRequestPtr AddRule(const AddRuleRequest& Request, const FAddRuleDelegate& Delegate = FAddRuleDelegate()) const;
    FHttpRequestPtr DeleteRule(const DeleteRuleRequest& Request, const FDeleteRuleDelegate& Delegate = FDeleteRuleDelegate()) const;
    FHttpRequestPtr DelistBlock(const DelistBlockRequest& Request, const FDelistBlockDelegate& Delegate = FDelistBlockDelegate()) const;
    FHttpRequestPtr GetMailBlocks(const GetMailBlocksRequest& Request, const FGetMailBlocksDelegate& Delegate = FGetMailBlocksDelegate()) const;
    FHttpRequestPtr GetRules(const GetRulesRequest& Request, const FGetRulesDelegate& Delegate = FGetRulesDelegate()) const;
    
private:
    void OnAddRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddRuleDelegate Delegate) const;
    void OnDeleteRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteRuleDelegate Delegate) const;
    void OnDelistBlockResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelistBlockDelegate Delegate) const;
    void OnGetMailBlocksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetMailBlocksDelegate Delegate) const;
    void OnGetRulesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetRulesDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}

// tslint:disable
/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    ErrorResponse,
    GenericResponse,
    MailLog,
    MailOrder,
    SendMail,
} from '../models';

export interface GetMailOrdersRequest {
    id?: number;
}

export interface PlaceMailOrderRequest {
    mailOrder?: MailOrder;
}

export interface SendAdvMailByIdRequest {
    sendMail: SendMail;
}

export interface SendMailByIdRequest {
    subject?: string;
    body?: string;
    to?: string;
    from?: string;
    id?: number;
    toName?: string;
    fromName?: string;
}

export interface ViewMailLogByIdRequest {
    id?: number;
    searchString?: string;
    skip?: number;
    limit?: number;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * displays a list of mail service orders
     */
    getMailOrders({ id }: GetMailOrdersRequest): Observable<Array<MailOrder>>
    getMailOrders({ id }: GetMailOrdersRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MailOrder>>>
    getMailOrders({ id }: GetMailOrdersRequest, opts?: OperationOpts): Observable<Array<MailOrder> | RawAjaxResponse<Array<MailOrder>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }

        return this.request<Array<MailOrder>>({
            url: '/mail',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Checks if the server is running
     */
    pingServer(): Observable<void>
    pingServer(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    pingServer(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        return this.request<void>({
            url: '/ping',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Adds an item to the system
     * places a mail order
     */
    placeMailOrder({ mailOrder }: PlaceMailOrderRequest): Observable<void>
    placeMailOrder({ mailOrder }: PlaceMailOrderRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    placeMailOrder({ mailOrder }: PlaceMailOrderRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        return this.request<void>({
            url: '/mail/order',
            method: 'POST',
            headers,
            body: mailOrder,
        }, opts?.responseOpts);
    };

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * Sends an Email with Advanced Options
     */
    sendAdvMailById({ sendMail }: SendAdvMailByIdRequest): Observable<GenericResponse>
    sendAdvMailById({ sendMail }: SendAdvMailByIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GenericResponse>>
    sendAdvMailById({ sendMail }: SendAdvMailByIdRequest, opts?: OperationOpts): Observable<GenericResponse | RawAjaxResponse<GenericResponse>> {
        throwIfNullOrUndefined(sendMail, 'sendMail', 'sendAdvMailById');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        return this.request<GenericResponse>({
            url: '/mail/advsend',
            method: 'POST',
            headers,
            body: sendMail,
        }, opts?.responseOpts);
    };

    /**
     * Sends An email through one of your mail orders.
     * Sends an Email
     */
    sendMailById({ subject, body, to, from, id, toName, fromName }: SendMailByIdRequest): Observable<GenericResponse>
    sendMailById({ subject, body, to, from, id, toName, fromName }: SendMailByIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<GenericResponse>>
    sendMailById({ subject, body, to, from, id, toName, fromName }: SendMailByIdRequest, opts?: OperationOpts): Observable<GenericResponse | RawAjaxResponse<GenericResponse>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (subject != null) { query['subject'] = subject; }
        if (body != null) { query['body'] = body; }
        if (to != null) { query['to'] = to; }
        if (from != null) { query['from'] = from; }
        if (id != null) { query['id'] = id; }
        if (toName != null) { query['toName'] = toName; }
        if (fromName != null) { query['fromName'] = fromName; }

        return this.request<GenericResponse>({
            url: '/mail/send',
            method: 'POST',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * validatess order details before placing an order
     */
    validateMailOrder(): Observable<void>
    validateMailOrder(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    validateMailOrder(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        return this.request<void>({
            url: '/mail/order',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * displays the mail log
     */
    viewMailLogById({ id, searchString, skip, limit }: ViewMailLogByIdRequest): Observable<Array<MailLog>>
    viewMailLogById({ id, searchString, skip, limit }: ViewMailLogByIdRequest, opts?: OperationOpts): Observable<RawAjaxResponse<Array<MailLog>>>
    viewMailLogById({ id, searchString, skip, limit }: ViewMailLogByIdRequest, opts?: OperationOpts): Observable<Array<MailLog> | RawAjaxResponse<Array<MailLog>>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }
        if (searchString != null) { query['searchString'] = searchString; }
        if (skip != null) { query['skip'] = skip; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<Array<MailLog>>({
            url: '/mail/log',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

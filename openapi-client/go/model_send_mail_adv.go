/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendMailAdv type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendMailAdv{}

// SendMailAdv Details for an Email
type SendMailAdv struct {
	// The subject or title of the email
	Subject string `json:"subject"`
	// The main email contents.
	Body string `json:"body"`
	From EmailAddressTypes `json:"from"`
	To EmailAddressesTypes `json:"to"`
	Replyto *EmailAddressesTypes `json:"replyto,omitempty"`
	Cc *EmailAddressesTypes `json:"cc,omitempty"`
	Bcc *EmailAddressesTypes `json:"bcc,omitempty"`
	// (optional) File attachments to include in the email.  The file contents must be base64 encoded!
	Attachments []MailAttachment `json:"attachments,omitempty"`
	// (optional)  ID of the Mail order within our system to use as the Mail Account.
	Id *int64 `json:"id,omitempty"`
}

type _SendMailAdv SendMailAdv

// NewSendMailAdv instantiates a new SendMailAdv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendMailAdv(subject string, body string, from EmailAddressTypes, to EmailAddressesTypes) *SendMailAdv {
	this := SendMailAdv{}
	this.Subject = subject
	this.Body = body
	this.From = from
	this.To = to
	return &this
}

// NewSendMailAdvWithDefaults instantiates a new SendMailAdv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendMailAdvWithDefaults() *SendMailAdv {
	this := SendMailAdv{}
	return &this
}

// GetSubject returns the Subject field value
func (o *SendMailAdv) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *SendMailAdv) SetSubject(v string) {
	o.Subject = v
}

// GetBody returns the Body field value
func (o *SendMailAdv) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *SendMailAdv) SetBody(v string) {
	o.Body = v
}

// GetFrom returns the From field value
func (o *SendMailAdv) GetFrom() EmailAddressTypes {
	if o == nil {
		var ret EmailAddressTypes
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetFromOk() (*EmailAddressTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *SendMailAdv) SetFrom(v EmailAddressTypes) {
	o.From = v
}

// GetTo returns the To field value
func (o *SendMailAdv) GetTo() EmailAddressesTypes {
	if o == nil {
		var ret EmailAddressesTypes
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetToOk() (*EmailAddressesTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *SendMailAdv) SetTo(v EmailAddressesTypes) {
	o.To = v
}

// GetReplyto returns the Replyto field value if set, zero value otherwise.
func (o *SendMailAdv) GetReplyto() EmailAddressesTypes {
	if o == nil || IsNil(o.Replyto) {
		var ret EmailAddressesTypes
		return ret
	}
	return *o.Replyto
}

// GetReplytoOk returns a tuple with the Replyto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetReplytoOk() (*EmailAddressesTypes, bool) {
	if o == nil || IsNil(o.Replyto) {
		return nil, false
	}
	return o.Replyto, true
}

// HasReplyto returns a boolean if a field has been set.
func (o *SendMailAdv) HasReplyto() bool {
	if o != nil && !IsNil(o.Replyto) {
		return true
	}

	return false
}

// SetReplyto gets a reference to the given EmailAddressesTypes and assigns it to the Replyto field.
func (o *SendMailAdv) SetReplyto(v EmailAddressesTypes) {
	o.Replyto = &v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *SendMailAdv) GetCc() EmailAddressesTypes {
	if o == nil || IsNil(o.Cc) {
		var ret EmailAddressesTypes
		return ret
	}
	return *o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetCcOk() (*EmailAddressesTypes, bool) {
	if o == nil || IsNil(o.Cc) {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *SendMailAdv) HasCc() bool {
	if o != nil && !IsNil(o.Cc) {
		return true
	}

	return false
}

// SetCc gets a reference to the given EmailAddressesTypes and assigns it to the Cc field.
func (o *SendMailAdv) SetCc(v EmailAddressesTypes) {
	o.Cc = &v
}

// GetBcc returns the Bcc field value if set, zero value otherwise.
func (o *SendMailAdv) GetBcc() EmailAddressesTypes {
	if o == nil || IsNil(o.Bcc) {
		var ret EmailAddressesTypes
		return ret
	}
	return *o.Bcc
}

// GetBccOk returns a tuple with the Bcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetBccOk() (*EmailAddressesTypes, bool) {
	if o == nil || IsNil(o.Bcc) {
		return nil, false
	}
	return o.Bcc, true
}

// HasBcc returns a boolean if a field has been set.
func (o *SendMailAdv) HasBcc() bool {
	if o != nil && !IsNil(o.Bcc) {
		return true
	}

	return false
}

// SetBcc gets a reference to the given EmailAddressesTypes and assigns it to the Bcc field.
func (o *SendMailAdv) SetBcc(v EmailAddressesTypes) {
	o.Bcc = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *SendMailAdv) GetAttachments() []MailAttachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []MailAttachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetAttachmentsOk() ([]MailAttachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *SendMailAdv) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []MailAttachment and assigns it to the Attachments field.
func (o *SendMailAdv) SetAttachments(v []MailAttachment) {
	o.Attachments = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SendMailAdv) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMailAdv) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SendMailAdv) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SendMailAdv) SetId(v int64) {
	o.Id = &v
}

func (o SendMailAdv) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendMailAdv) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subject"] = o.Subject
	toSerialize["body"] = o.Body
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if !IsNil(o.Replyto) {
		toSerialize["replyto"] = o.Replyto
	}
	if !IsNil(o.Cc) {
		toSerialize["cc"] = o.Cc
	}
	if !IsNil(o.Bcc) {
		toSerialize["bcc"] = o.Bcc
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *SendMailAdv) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subject",
		"body",
		"from",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendMailAdv := _SendMailAdv{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendMailAdv)

	if err != nil {
		return err
	}

	*o = SendMailAdv(varSendMailAdv)

	return err
}

type NullableSendMailAdv struct {
	value *SendMailAdv
	isSet bool
}

func (v NullableSendMailAdv) Get() *SendMailAdv {
	return v.value
}

func (v *NullableSendMailAdv) Set(val *SendMailAdv) {
	v.value = val
	v.isSet = true
}

func (v NullableSendMailAdv) IsSet() bool {
	return v.isSet
}

func (v *NullableSendMailAdv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendMailAdv(val *SendMailAdv) *NullableSendMailAdv {
	return &NullableSendMailAdv{value: val, isSet: true}
}

func (v NullableSendMailAdv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendMailAdv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



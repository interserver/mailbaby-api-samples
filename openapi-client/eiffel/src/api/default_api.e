note
 description:"[
		MailBaby Email Delivery API
 		**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  		The version of the OpenAPI document: 1.1.0
 	    Contact: support@interserver.net

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	DEFAULT_API

inherit

    API_I


feature -- API Access


	mail_orders : detachable LIST [GET_MAIL_ORDERS_200_RESPONSE_INNER]
			-- displays a list of mail service orders
			-- 
			-- 
			-- 
			-- Result LIST [GET_MAIL_ORDERS_200_RESPONSE_INNER]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mail"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [GET_MAIL_ORDERS_200_RESPONSE_INNER] } l_response.data ({ LIST [GET_MAIL_ORDERS_200_RESPONSE_INNER] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	ping_server 
			-- Checks if the server is running
			-- 
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/ping"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	send_adv_mail (send_mail_adv: SEND_MAIL_ADV): detachable GENERIC_RESPONSE
			-- Sends an Email with Advanced Options
			-- Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
			-- 
			-- argument: send_mail_adv  (required)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(send_mail_adv)
			l_path := "/mail/advsend"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json", "application/x-www-form-urlencoded">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	send_mail (to: STRING_32; var_from: STRING_32; subject: STRING_32; body: STRING_32): detachable GENERIC_RESPONSE
			-- Sends an Email
			-- Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
			-- 
			-- argument: to The Contact whom is the primary recipient of this email. (required)
			-- 
			-- argument: var_from The contact whom is the this email is from. (required)
			-- 
			-- argument: subject The subject or title of the email (required)
			-- 
			-- argument: body The main email contents. (required)
			-- 
			-- 
			-- Result GENERIC_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mail/send"

			if attached to as l_to then
				l_request.add_form(l_to,"to");
			end
			if attached var_from as l_var_from then
				l_request.add_form(l_var_from,"from");
			end
			if attached subject as l_subject then
				l_request.add_form(l_subject,"subject");
			end
			if attached body as l_body then
				l_request.add_form(l_body,"body");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GENERIC_RESPONSE } l_response.data ({ GENERIC_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	view_mail_log (id: INTEGER_64; origin: STRING_32; mx: STRING_32; var_from: STRING_32; to: STRING_32; subject: STRING_32; mailid: STRING_32; skip: INTEGER_32; limit: INTEGER_32; start_date: INTEGER_64; end_date: INTEGER_64): detachable MAIL_LOG
			-- displays the mail log
			-- Get a listing of the emails sent through this system 
			-- 
			-- argument: id The ID of your mail order this will be sent through. (optional, default to null)
			-- 
			-- argument: origin originating ip address sending mail (optional, default to null)
			-- 
			-- argument: mx mx record mail was sent to (optional, default to null)
			-- 
			-- argument: var_from from email address (optional, default to null)
			-- 
			-- argument: to to/destination email address (optional, default to null)
			-- 
			-- argument: subject subject containing this string (optional, default to null)
			-- 
			-- argument: mailid mail id (optional, default to null)
			-- 
			-- argument: skip number of records to skip for pagination (optional, default to 0)
			-- 
			-- argument: limit maximum number of records to return (optional, default to 100)
			-- 
			-- argument: start_date earliest date to get emails in unix timestamp format (optional, default to null)
			-- 
			-- argument: end_date earliest date to get emails in unix timestamp format (optional, default to null)
			-- 
			-- 
			-- Result MAIL_LOG
		require
     		skip_is_greater_or_equal_than: skip >= 0
			limit_is_less_or_equal_than: limit <= 10000
     		limit_is_greater_or_equal_than: limit >= 1
			start_date_is_less_or_equal_than: start_date <= 9999999999
     		start_date_is_greater_or_equal_than: start_date >= 0
			end_date_is_less_or_equal_than: end_date <= 9999999999
     		end_date_is_greater_or_equal_than: end_date >= 0
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mail/log"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "origin", origin));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "mx", mx));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from", var_from));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to", to));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "subject", subject));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "mailid", mailid));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "skip", skip));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { MAIL_LOG } l_response.data ({ MAIL_LOG }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mail_attachment import MailAttachment  # noqa: F401,E501
from swagger_server.models.mail_contact import MailContact  # noqa: F401,E501
from swagger_server.models.send_mail_adv_from import SendMailAdvFrom  # noqa: F401,E501
from swagger_server import util


class SendMailAdv(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, subject: str=None, body: str=None, _from: List[SendMailAdvFrom]=None, to: List[MailContact]=None, id: int=None, replyto: List[MailContact]=None, cc: List[MailContact]=None, bcc: List[MailContact]=None, attachments: List[MailAttachment]=None):  # noqa: E501
        """SendMailAdv - a model defined in Swagger

        :param subject: The subject of this SendMailAdv.  # noqa: E501
        :type subject: str
        :param body: The body of this SendMailAdv.  # noqa: E501
        :type body: str
        :param _from: The _from of this SendMailAdv.  # noqa: E501
        :type _from: List[SendMailAdvFrom]
        :param to: The to of this SendMailAdv.  # noqa: E501
        :type to: List[MailContact]
        :param id: The id of this SendMailAdv.  # noqa: E501
        :type id: int
        :param replyto: The replyto of this SendMailAdv.  # noqa: E501
        :type replyto: List[MailContact]
        :param cc: The cc of this SendMailAdv.  # noqa: E501
        :type cc: List[MailContact]
        :param bcc: The bcc of this SendMailAdv.  # noqa: E501
        :type bcc: List[MailContact]
        :param attachments: The attachments of this SendMailAdv.  # noqa: E501
        :type attachments: List[MailAttachment]
        """
        self.swagger_types = {
            'subject': str,
            'body': str,
            '_from': List[SendMailAdvFrom],
            'to': List[MailContact],
            'id': int,
            'replyto': List[MailContact],
            'cc': List[MailContact],
            'bcc': List[MailContact],
            'attachments': List[MailAttachment]
        }

        self.attribute_map = {
            'subject': 'subject',
            'body': 'body',
            '_from': 'from',
            'to': 'to',
            'id': 'id',
            'replyto': 'replyto',
            'cc': 'cc',
            'bcc': 'bcc',
            'attachments': 'attachments'
        }
        self._subject = subject
        self._body = body
        self.__from = _from
        self._to = to
        self._id = id
        self._replyto = replyto
        self._cc = cc
        self._bcc = bcc
        self._attachments = attachments

    @classmethod
    def from_dict(cls, dikt) -> 'SendMailAdv':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SendMailAdv of this SendMailAdv.  # noqa: E501
        :rtype: SendMailAdv
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self) -> str:
        """Gets the subject of this SendMailAdv.

        The subject or title of the email  # noqa: E501

        :return: The subject of this SendMailAdv.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this SendMailAdv.

        The subject or title of the email  # noqa: E501

        :param subject: The subject of this SendMailAdv.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self) -> str:
        """Gets the body of this SendMailAdv.

        The main email contents.  # noqa: E501

        :return: The body of this SendMailAdv.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this SendMailAdv.

        The main email contents.  # noqa: E501

        :param body: The body of this SendMailAdv.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def _from(self) -> List[SendMailAdvFrom]:
        """Gets the _from of this SendMailAdv.

        The contact whom is the this email is from.  # noqa: E501

        :return: The _from of this SendMailAdv.
        :rtype: List[SendMailAdvFrom]
        """
        return self.__from

    @_from.setter
    def _from(self, _from: List[SendMailAdvFrom]):
        """Sets the _from of this SendMailAdv.

        The contact whom is the this email is from.  # noqa: E501

        :param _from: The _from of this SendMailAdv.
        :type _from: List[SendMailAdvFrom]
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> List[MailContact]:
        """Gets the to of this SendMailAdv.

        The Contact whom is the primary recipient of this email.  # noqa: E501

        :return: The to of this SendMailAdv.
        :rtype: List[MailContact]
        """
        return self._to

    @to.setter
    def to(self, to: List[MailContact]):
        """Sets the to of this SendMailAdv.

        The Contact whom is the primary recipient of this email.  # noqa: E501

        :param to: The to of this SendMailAdv.
        :type to: List[MailContact]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def id(self) -> int:
        """Gets the id of this SendMailAdv.

        The ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :return: The id of this SendMailAdv.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this SendMailAdv.

        The ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :param id: The id of this SendMailAdv.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def replyto(self) -> List[MailContact]:
        """Gets the replyto of this SendMailAdv.

        Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.  # noqa: E501

        :return: The replyto of this SendMailAdv.
        :rtype: List[MailContact]
        """
        return self._replyto

    @replyto.setter
    def replyto(self, replyto: List[MailContact]):
        """Sets the replyto of this SendMailAdv.

        Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.  # noqa: E501

        :param replyto: The replyto of this SendMailAdv.
        :type replyto: List[MailContact]
        """

        self._replyto = replyto

    @property
    def cc(self) -> List[MailContact]:
        """Gets the cc of this SendMailAdv.

        Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.  # noqa: E501

        :return: The cc of this SendMailAdv.
        :rtype: List[MailContact]
        """
        return self._cc

    @cc.setter
    def cc(self, cc: List[MailContact]):
        """Sets the cc of this SendMailAdv.

        Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.  # noqa: E501

        :param cc: The cc of this SendMailAdv.
        :type cc: List[MailContact]
        """

        self._cc = cc

    @property
    def bcc(self) -> List[MailContact]:
        """Gets the bcc of this SendMailAdv.

        Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.  # noqa: E501

        :return: The bcc of this SendMailAdv.
        :rtype: List[MailContact]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc: List[MailContact]):
        """Sets the bcc of this SendMailAdv.

        Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.  # noqa: E501

        :param bcc: The bcc of this SendMailAdv.
        :type bcc: List[MailContact]
        """

        self._bcc = bcc

    @property
    def attachments(self) -> List[MailAttachment]:
        """Gets the attachments of this SendMailAdv.

        Optional file attachments to include in the email  # noqa: E501

        :return: The attachments of this SendMailAdv.
        :rtype: List[MailAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments: List[MailAttachment]):
        """Sets the attachments of this SendMailAdv.

        Optional file attachments to include in the email  # noqa: E501

        :param attachments: The attachments of this SendMailAdv.
        :type attachments: List[MailAttachment]
        """

        self._attachments = attachments

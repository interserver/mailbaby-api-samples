extends Resource
class_name MailBlockClickHouse

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# MailBlockClickHouse Model
# A block entry from the clickhouse mailblocks server.


#       (but it's actually a Date ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var date: String:
	set(value):
		__date__was__set = true
		date = value
var __date__was__set := false

# Required: True
# isArray: false
@export var from: String = "":
	set(value):
		__from__was__set = true
		from = value
var __from__was__set := false

# Required: True
# isArray: false
@export var messageId: String = "":
	set(value):
		__messageId__was__set = true
		messageId = value
var __messageId__was__set := false

# Required: True
# isArray: false
@export var subject: String = "":
	set(value):
		__subject__was__set = true
		subject = value
var __subject__was__set := false

# Required: True
# isArray: false
@export var to: String = "":
	set(value):
		__to__was__set = true
		to = value
var __to__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__date__was__set:
		bzz_missing_properties.append("date")
	if not self.__from__was__set:
		bzz_missing_properties.append("from")
	if not self.__messageId__was__set:
		bzz_missing_properties.append("messageId")
	if not self.__subject__was__set:
		bzz_missing_properties.append("subject")
	if not self.__to__was__set:
		bzz_missing_properties.append("to")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__date__was__set:
		bzz_dictionary["date"] = self.date
	if self.__from__was__set:
		bzz_dictionary["from"] = self.from
	if self.__messageId__was__set:
		bzz_dictionary["messageId"] = self.messageId
	if self.__subject__was__set:
		bzz_dictionary["subject"] = self.subject
	if self.__to__was__set:
		bzz_dictionary["to"] = self.to
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("date"):
		me.date = from_dict["date"]
	if from_dict.has("from"):
		me.from = from_dict["from"]
	if from_dict.has("messageId"):
		me.messageId = from_dict["messageId"]
	if from_dict.has("subject"):
		me.subject = from_dict["subject"]
	if from_dict.has("to"):
		me.to = from_dict["to"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


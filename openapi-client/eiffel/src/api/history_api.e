note
 description:"[
		MailBaby Email Delivery and Management Service API
 		**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  		The version of the OpenAPI document: 1.1.0
 	    Contact: support@interserver.net

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	HISTORY_API

inherit

    API_I


feature -- API Access


	stats : detachable LIST [GET_STATS_200_RESPONSE_INNER]
			-- Account usage statistics.
			-- Returns information about the usage on your mail accounts.
			-- 
			-- 
			-- Result LIST [GET_STATS_200_RESPONSE_INNER]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mail/stats"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [GET_STATS_200_RESPONSE_INNER] } l_response.data ({ LIST [GET_STATS_200_RESPONSE_INNER] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	view_mail_log (id: INTEGER_64; origin: STRING_32; mx: STRING_32; var_from: STRING_32; to: STRING_32; subject: STRING_32; mailid: STRING_32; skip: INTEGER_32; limit: INTEGER_32; start_date: INTEGER_64; end_date: INTEGER_64; replyto: STRING_32; headerfrom: STRING_32): detachable MAIL_LOG
			-- displays the mail log
			-- Get a listing of the emails sent through this system 
			-- 
			-- argument: id The ID of your mail order this will be sent through. (optional, default to null)
			-- 
			-- argument: origin originating ip address sending mail (optional, default to null)
			-- 
			-- argument: mx mx record mail was sent to (optional, default to null)
			-- 
			-- argument: var_from from email address (optional, default to null)
			-- 
			-- argument: to to/destination email address (optional, default to null)
			-- 
			-- argument: subject subject containing this string (optional, default to null)
			-- 
			-- argument: mailid mail id (optional, default to null)
			-- 
			-- argument: skip number of records to skip for pagination (optional, default to 0)
			-- 
			-- argument: limit maximum number of records to return (optional, default to 100)
			-- 
			-- argument: start_date earliest date to get emails in unix timestamp format (optional, default to null)
			-- 
			-- argument: end_date earliest date to get emails in unix timestamp format (optional, default to null)
			-- 
			-- argument: replyto Reply-To Email Address (optional, default to null)
			-- 
			-- argument: headerfrom Header From Email Address (optional, default to null)
			-- 
			-- 
			-- Result MAIL_LOG
		require
     		skip_is_greater_or_equal_than: skip >= 0
			limit_is_less_or_equal_than: limit <= 10000
     		limit_is_greater_or_equal_than: limit >= 1
			start_date_is_less_or_equal_than: start_date <= 9999999999
     		start_date_is_greater_or_equal_than: start_date >= 0
			end_date_is_less_or_equal_than: end_date <= 9999999999
     		end_date_is_greater_or_equal_than: end_date >= 0
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mail/log"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "origin", origin));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "mx", mx));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from", var_from));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to", to));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "subject", subject));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "mailid", mailid));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "skip", skip));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "replyto", replyto));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "headerfrom", headerfrom));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { MAIL_LOG } l_response.data ({ MAIL_LOG }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

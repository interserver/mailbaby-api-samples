/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EmailAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailAddress{}

// EmailAddress an email address
type EmailAddress struct {
	// an email address
	Email *string `json:"email,omitempty"`
}

// NewEmailAddress instantiates a new EmailAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailAddress() *EmailAddress {
	this := EmailAddress{}
	return &this
}

// NewEmailAddressWithDefaults instantiates a new EmailAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailAddressWithDefaults() *EmailAddress {
	this := EmailAddress{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmailAddress) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailAddress) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmailAddress) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmailAddress) SetEmail(v string) {
	o.Email = &v
}

func (o EmailAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableEmailAddress struct {
	value *EmailAddress
	isSet bool
}

func (v NullableEmailAddress) Get() *EmailAddress {
	return v.value
}

func (v *NullableEmailAddress) Set(val *EmailAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailAddress(val *EmailAddress) *NullableEmailAddress {
	return &NullableEmailAddress{value: val, isSet: true}
}

func (v NullableEmailAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailAddressTypes from './EmailAddressTypes';
import EmailAddressesTypes from './EmailAddressesTypes';
import MailAttachment from './MailAttachment';

/**
 * The SendMailAdv model module.
 * @module model/SendMailAdv
 * @version 1.1.0
 */
class SendMailAdv {
    /**
     * Constructs a new <code>SendMailAdv</code>.
     * Details for an Email
     * @alias module:model/SendMailAdv
     * @param subject {String} The subject or title of the email
     * @param body {String} The main email contents.
     * @param from {module:model/EmailAddressTypes} 
     * @param to {module:model/EmailAddressesTypes} 
     */
    constructor(subject, body, from, to) { 
        
        SendMailAdv.initialize(this, subject, body, from, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subject, body, from, to) { 
        obj['subject'] = subject;
        obj['body'] = body;
        obj['from'] = from;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>SendMailAdv</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendMailAdv} obj Optional instance to populate.
     * @return {module:model/SendMailAdv} The populated <code>SendMailAdv</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendMailAdv();

            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = EmailAddressTypes.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = EmailAddressesTypes.constructFromObject(data['to']);
            }
            if (data.hasOwnProperty('replyto')) {
                obj['replyto'] = EmailAddressesTypes.constructFromObject(data['replyto']);
            }
            if (data.hasOwnProperty('cc')) {
                obj['cc'] = EmailAddressesTypes.constructFromObject(data['cc']);
            }
            if (data.hasOwnProperty('bcc')) {
                obj['bcc'] = EmailAddressesTypes.constructFromObject(data['bcc']);
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [MailAttachment]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendMailAdv</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendMailAdv</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendMailAdv.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          EmailAddressTypes.validateJSON(data['from']);
        }
        // validate the optional field `to`
        if (data['to']) { // data not null
          EmailAddressesTypes.validateJSON(data['to']);
        }
        // validate the optional field `replyto`
        if (data['replyto']) { // data not null
          EmailAddressesTypes.validateJSON(data['replyto']);
        }
        // validate the optional field `cc`
        if (data['cc']) { // data not null
          EmailAddressesTypes.validateJSON(data['cc']);
        }
        // validate the optional field `bcc`
        if (data['bcc']) { // data not null
          EmailAddressesTypes.validateJSON(data['bcc']);
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                MailAttachment.validateJSON(item);
            };
        }

        return true;
    }


}

SendMailAdv.RequiredProperties = ["subject", "body", "from", "to"];

/**
 * The subject or title of the email
 * @member {String} subject
 */
SendMailAdv.prototype['subject'] = undefined;

/**
 * The main email contents.
 * @member {String} body
 */
SendMailAdv.prototype['body'] = undefined;

/**
 * @member {module:model/EmailAddressTypes} from
 */
SendMailAdv.prototype['from'] = undefined;

/**
 * @member {module:model/EmailAddressesTypes} to
 */
SendMailAdv.prototype['to'] = undefined;

/**
 * @member {module:model/EmailAddressesTypes} replyto
 */
SendMailAdv.prototype['replyto'] = undefined;

/**
 * @member {module:model/EmailAddressesTypes} cc
 */
SendMailAdv.prototype['cc'] = undefined;

/**
 * @member {module:model/EmailAddressesTypes} bcc
 */
SendMailAdv.prototype['bcc'] = undefined;

/**
 * (optional) File attachments to include in the email.  The file contents must be base64 encoded!
 * @member {Array.<module:model/MailAttachment>} attachments
 */
SendMailAdv.prototype['attachments'] = undefined;

/**
 * (optional)  ID of the Mail order within our system to use as the Mail Account.
 * @member {Number} id
 */
SendMailAdv.prototype['id'] = undefined;






export default SendMailAdv;


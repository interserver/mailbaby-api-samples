/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # 📌 Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # 🔐 Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMailLogEntry.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIMailLogEntry::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("_id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("from")); WriteJsonValue(Writer, From);
	Writer->WriteIdentifierPrefix(TEXT("to")); WriteJsonValue(Writer, To);
	Writer->WriteIdentifierPrefix(TEXT("subject")); WriteJsonValue(Writer, Subject);
	Writer->WriteIdentifierPrefix(TEXT("created")); WriteJsonValue(Writer, Created);
	Writer->WriteIdentifierPrefix(TEXT("time")); WriteJsonValue(Writer, Time);
	Writer->WriteIdentifierPrefix(TEXT("user")); WriteJsonValue(Writer, User);
	Writer->WriteIdentifierPrefix(TEXT("transtype")); WriteJsonValue(Writer, Transtype);
	Writer->WriteIdentifierPrefix(TEXT("origin")); WriteJsonValue(Writer, Origin);
	Writer->WriteIdentifierPrefix(TEXT("interface")); WriteJsonValue(Writer, Interface);
	Writer->WriteIdentifierPrefix(TEXT("sendingZone")); WriteJsonValue(Writer, SendingZone);
	Writer->WriteIdentifierPrefix(TEXT("bodySize")); WriteJsonValue(Writer, BodySize);
	Writer->WriteIdentifierPrefix(TEXT("seq")); WriteJsonValue(Writer, Seq);
	Writer->WriteIdentifierPrefix(TEXT("recipient")); WriteJsonValue(Writer, Recipient);
	Writer->WriteIdentifierPrefix(TEXT("domain")); WriteJsonValue(Writer, Domain);
	Writer->WriteIdentifierPrefix(TEXT("locked")); WriteJsonValue(Writer, Locked);
	Writer->WriteIdentifierPrefix(TEXT("lockTime")); WriteJsonValue(Writer, LockTime);
	Writer->WriteIdentifierPrefix(TEXT("assigned")); WriteJsonValue(Writer, Assigned);
	Writer->WriteIdentifierPrefix(TEXT("queued")); WriteJsonValue(Writer, Queued);
	Writer->WriteIdentifierPrefix(TEXT("mxHostname")); WriteJsonValue(Writer, MxHostname);
	Writer->WriteIdentifierPrefix(TEXT("response")); WriteJsonValue(Writer, Response);
	if (MessageId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("messageId")); WriteJsonValue(Writer, MessageId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIMailLogEntry::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("from"), From);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("to"), To);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subject"), Subject);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created"), Created);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("time"), Time);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("user"), User);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("transtype"), Transtype);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("origin"), Origin);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("interface"), Interface);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sendingZone"), SendingZone);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bodySize"), BodySize);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("seq"), Seq);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("recipient"), Recipient);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("domain"), Domain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("locked"), Locked);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lockTime"), LockTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assigned"), Assigned);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("queued"), Queued);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("mxHostname"), MxHostname);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("response"), Response);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("messageId"), MessageId);

	return ParseSuccess;
}

}

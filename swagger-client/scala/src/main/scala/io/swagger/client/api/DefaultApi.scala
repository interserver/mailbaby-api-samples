/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # 📌 Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # 🔐 Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.GenericResponse
import io.swagger.client.model.MailLog
import io.swagger.client.model.SendMail
import io.swagger.client.model.SendMailAdv
import io.swagger.client.model.SendMailAdv_attachments
import io.swagger.client.model.SendMailAdv_bcc
import io.swagger.client.model.SendMailAdv_cc
import io.swagger.client.model.SendMailAdv_from
import io.swagger.client.model.SendMailAdv_replyto
import io.swagger.client.model.SendMailAdv_to
import io.swagger.client.model.inline_response_200
import io.swagger.client.model.inline_response_401
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DefaultApi(
  val defBasePath: String = "https://api.mailbaby.net",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DefaultApiAsyncHelper(client, config)

  /**
   * displays a list of mail service orders
   * 
   *
   * @return List[inline_response_200]
   */
  def getMailOrders(): Option[List[inline_response_200]] = {
    val await = Try(Await.result(getMailOrdersAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * displays a list of mail service orders asynchronously
   * 
   *
   * @return Future(List[inline_response_200])
   */
  def getMailOrdersAsync(): Future[List[inline_response_200]] = {
      helper.getMailOrders()
  }

  /**
   * Checks if the server is running
   * 
   *
   * @return void
   */
  def pingServer() = {
    val await = Try(Await.result(pingServerAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Checks if the server is running asynchronously
   * 
   *
   * @return Future(void)
   */
  def pingServerAsync() = {
      helper.pingServer()
  }

  /**
   * Sends an Email with Advanced Options
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   *
   * @param body  
   * @param subject  
   * @param body  
   * @param from  
   * @param to  
   * @param replyto  
   * @param cc  
   * @param bcc  
   * @param attachments  
   * @param id  
   * @return GenericResponse
   */
  def sendAdvMail(body: SendMailAdv, subject: String, body: String, from: SendMailAdv_from, to: List[SendMailAdv_to], replyto: List[SendMailAdv_replyto], cc: List[SendMailAdv_cc], bcc: List[SendMailAdv_bcc], attachments: List[SendMailAdv_attachments], id: Long): Option[GenericResponse] = {
    val await = Try(Await.result(sendAdvMailAsync(body, subject, body, from, to, replyto, cc, bcc, attachments, id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sends an Email with Advanced Options asynchronously
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   *
   * @param body  
   * @param subject  
   * @param body  
   * @param from  
   * @param to  
   * @param replyto  
   * @param cc  
   * @param bcc  
   * @param attachments  
   * @param id  
   * @return Future(GenericResponse)
   */
  def sendAdvMailAsync(body: SendMailAdv, subject: String, body: String, from: SendMailAdv_from, to: List[SendMailAdv_to], replyto: List[SendMailAdv_replyto], cc: List[SendMailAdv_cc], bcc: List[SendMailAdv_bcc], attachments: List[SendMailAdv_attachments], id: Long): Future[GenericResponse] = {
      helper.sendAdvMail(body, subject, body, from, to, replyto, cc, bcc, attachments, id)
  }

  /**
   * Sends an Email
   * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
   *
   * @param to  
   * @param from  
   * @param subject  
   * @param body  
   * @param body  
   * @return GenericResponse
   */
  def sendMail(to: String, from: String, subject: String, body: String, body: SendMail): Option[GenericResponse] = {
    val await = Try(Await.result(sendMailAsync(to, from, subject, body, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sends an Email asynchronously
   * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
   *
   * @param to  
   * @param from  
   * @param subject  
   * @param body  
   * @param body  
   * @return Future(GenericResponse)
   */
  def sendMailAsync(to: String, from: String, subject: String, body: String, body: SendMail): Future[GenericResponse] = {
      helper.sendMail(to, from, subject, body, body)
  }

  /**
   * displays the mail log
   * Get a listing of the emails sent through this system 
   *
   * @param id The ID of your mail order this will be sent through. (optional)
   * @param origin originating ip address sending mail (optional)
   * @param mx mx record mail was sent to (optional)
   * @param from from email address (optional)
   * @param to to/destination email address (optional)
   * @param subject subject containing this string (optional)
   * @param mailid mail id (optional)
   * @param skip number of records to skip for pagination (optional, default to 0)
   * @param limit maximum number of records to return (optional, default to 100)
   * @param startDate earliest date to get emails in unix timestamp format (optional)
   * @param endDate earliest date to get emails in unix timestamp format (optional)
   * @return MailLog
   */
  def viewMailLog(id: Option[Long] = None, origin: Option[String] = None, mx: Option[String] = None, from: Option[String] = None, to: Option[String] = None, subject: Option[String] = None, mailid: Option[String] = None, skip: Option[Integer] = Option(0), limit: Option[Integer] = Option(100), startDate: Option[Long] = None, endDate: Option[Long] = None): Option[MailLog] = {
    val await = Try(Await.result(viewMailLogAsync(id, origin, mx, from, to, subject, mailid, skip, limit, startDate, endDate), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * displays the mail log asynchronously
   * Get a listing of the emails sent through this system 
   *
   * @param id The ID of your mail order this will be sent through. (optional)
   * @param origin originating ip address sending mail (optional)
   * @param mx mx record mail was sent to (optional)
   * @param from from email address (optional)
   * @param to to/destination email address (optional)
   * @param subject subject containing this string (optional)
   * @param mailid mail id (optional)
   * @param skip number of records to skip for pagination (optional, default to 0)
   * @param limit maximum number of records to return (optional, default to 100)
   * @param startDate earliest date to get emails in unix timestamp format (optional)
   * @param endDate earliest date to get emails in unix timestamp format (optional)
   * @return Future(MailLog)
   */
  def viewMailLogAsync(id: Option[Long] = None, origin: Option[String] = None, mx: Option[String] = None, from: Option[String] = None, to: Option[String] = None, subject: Option[String] = None, mailid: Option[String] = None, skip: Option[Integer] = Option(0), limit: Option[Integer] = Option(100), startDate: Option[Long] = None, endDate: Option[Long] = None): Future[MailLog] = {
      helper.viewMailLog(id, origin, mx, from, to, subject, mailid, skip, limit, startDate, endDate)
  }

}

class DefaultApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getMailOrders()(implicit reader: ClientResponseReader[List[inline_response_200]]): Future[List[inline_response_200]] = {
    // create path and map variables
    val path = (addFmt("/mail"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def pingServer()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/ping"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendAdvMail(body: SendMailAdv,
    subject: String,
    body: String,
    from: SendMailAdv_from,
    to: List[SendMailAdv_to],
    replyto: List[SendMailAdv_replyto],
    cc: List[SendMailAdv_cc],
    bcc: List[SendMailAdv_bcc],
    attachments: List[SendMailAdv_attachments],
    id: Long)(implicit reader: ClientResponseReader[GenericResponse], writer: RequestWriter[SendMailAdv]): Future[GenericResponse] = {
    // create path and map variables
    val path = (addFmt("/mail/advsend"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendAdvMail")
    if (subject == null) throw new Exception("Missing required parameter 'subject' when calling DefaultApi->sendAdvMail")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendAdvMail")

    if (from == null) throw new Exception("Missing required parameter 'from' when calling DefaultApi->sendAdvMail")
    if (to == null) throw new Exception("Missing required parameter 'to' when calling DefaultApi->sendAdvMail")
    if (replyto == null) throw new Exception("Missing required parameter 'replyto' when calling DefaultApi->sendAdvMail")
    if (cc == null) throw new Exception("Missing required parameter 'cc' when calling DefaultApi->sendAdvMail")
    if (bcc == null) throw new Exception("Missing required parameter 'bcc' when calling DefaultApi->sendAdvMail")
    if (attachments == null) throw new Exception("Missing required parameter 'attachments' when calling DefaultApi->sendAdvMail")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendMail(to: String,
    from: String,
    subject: String,
    body: String,
    body: SendMail)(implicit reader: ClientResponseReader[GenericResponse], writer: RequestWriter[SendMail]): Future[GenericResponse] = {
    // create path and map variables
    val path = (addFmt("/mail/send"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (to == null) throw new Exception("Missing required parameter 'to' when calling DefaultApi->sendMail")

    if (from == null) throw new Exception("Missing required parameter 'from' when calling DefaultApi->sendMail")

    if (subject == null) throw new Exception("Missing required parameter 'subject' when calling DefaultApi->sendMail")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendMail")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendMail")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def viewMailLog(id: Option[Long] = None,
    origin: Option[String] = None,
    mx: Option[String] = None,
    from: Option[String] = None,
    to: Option[String] = None,
    subject: Option[String] = None,
    mailid: Option[String] = None,
    skip: Option[Integer] = Option(0),
    limit: Option[Integer] = Option(100),
    startDate: Option[Long] = None,
    endDate: Option[Long] = None
    )(implicit reader: ClientResponseReader[MailLog]): Future[MailLog] = {
    // create path and map variables
    val path = (addFmt("/mail/log"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    id match {
      case Some(param) => queryParams += "id" -> param.toString
      case _ => queryParams
    }
    origin match {
      case Some(param) => queryParams += "origin" -> param.toString
      case _ => queryParams
    }
    mx match {
      case Some(param) => queryParams += "mx" -> param.toString
      case _ => queryParams
    }
    from match {
      case Some(param) => queryParams += "from" -> param.toString
      case _ => queryParams
    }
    to match {
      case Some(param) => queryParams += "to" -> param.toString
      case _ => queryParams
    }
    subject match {
      case Some(param) => queryParams += "subject" -> param.toString
      case _ => queryParams
    }
    mailid match {
      case Some(param) => queryParams += "mailid" -> param.toString
      case _ => queryParams
    }
    skip match {
      case Some(param) => queryParams += "skip" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    startDate match {
      case Some(param) => queryParams += "startDate" -> param.toString
      case _ => queryParams
    }
    endDate match {
      case Some(param) => queryParams += "endDate" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}

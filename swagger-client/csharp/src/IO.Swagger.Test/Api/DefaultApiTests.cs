/* 
 * Mail Baby API
 *
 * This is an API for accesssing the mail services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test GetMailById
        /// </summary>
        [Test]
        public void GetMailByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetMailById(id);
            //Assert.IsInstanceOf<MailOrder> (response, "response is MailOrder");
        }
        /// <summary>
        /// Test GetMailOrders
        /// </summary>
        [Test]
        public void GetMailOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMailOrders();
            //Assert.IsInstanceOf<MailOrders> (response, "response is MailOrders");
        }
        /// <summary>
        /// Test PingServer
        /// </summary>
        [Test]
        public void PingServerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.PingServer();
            
        }
        /// <summary>
        /// Test PlaceMailOrder
        /// </summary>
        [Test]
        public void PlaceMailOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MailOrder body = null;
            //instance.PlaceMailOrder(body);
            
        }
        /// <summary>
        /// Test SendMailById
        /// </summary>
        [Test]
        public void SendMailByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string subject = null;
            //string body = null;
            //string to = null;
            //string from = null;
            //var response = instance.SendMailById(id, subject, body, to, from);
            //Assert.IsInstanceOf<GenericResponse> (response, "response is GenericResponse");
        }
        /// <summary>
        /// Test ValidateMailOrder
        /// </summary>
        [Test]
        public void ValidateMailOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ValidateMailOrder();
            
        }
        /// <summary>
        /// Test ViewMailLogById
        /// </summary>
        [Test]
        public void ViewMailLogByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //string searchString = null;
            //int? skip = null;
            //int? limit = null;
            //var response = instance.ViewMailLogById(id, searchString, skip, limit);
            //Assert.IsInstanceOf<List<MailLog>> (response, "response is List<MailLog>");
        }
    }

}

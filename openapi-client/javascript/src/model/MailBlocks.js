/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MailBlockClickHouse from './MailBlockClickHouse';
import MailBlockRspamd from './MailBlockRspamd';

/**
 * The MailBlocks model module.
 * @module model/MailBlocks
 * @version 1.1.0
 */
class MailBlocks {
    /**
     * Constructs a new <code>MailBlocks</code>.
     * The listing of blocked emails.
     * @alias module:model/MailBlocks
     * @param local {Array.<module:model/MailBlockClickHouse>} 
     * @param mbtrap {Array.<module:model/MailBlockClickHouse>} 
     * @param subject {Array.<module:model/MailBlockRspamd>} 
     */
    constructor(local, mbtrap, subject) { 
        
        MailBlocks.initialize(this, local, mbtrap, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, local, mbtrap, subject) { 
        obj['local'] = local;
        obj['mbtrap'] = mbtrap;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>MailBlocks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MailBlocks} obj Optional instance to populate.
     * @return {module:model/MailBlocks} The populated <code>MailBlocks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MailBlocks();

            if (data.hasOwnProperty('local')) {
                obj['local'] = ApiClient.convertToType(data['local'], [MailBlockClickHouse]);
            }
            if (data.hasOwnProperty('mbtrap')) {
                obj['mbtrap'] = ApiClient.convertToType(data['mbtrap'], [MailBlockClickHouse]);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], [MailBlockRspamd]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MailBlocks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MailBlocks</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MailBlocks.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['local']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['local'])) {
                throw new Error("Expected the field `local` to be an array in the JSON data but got " + data['local']);
            }
            // validate the optional field `local` (array)
            for (const item of data['local']) {
                MailBlockClickHouse.validateJSON(item);
            };
        }
        if (data['mbtrap']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mbtrap'])) {
                throw new Error("Expected the field `mbtrap` to be an array in the JSON data but got " + data['mbtrap']);
            }
            // validate the optional field `mbtrap` (array)
            for (const item of data['mbtrap']) {
                MailBlockClickHouse.validateJSON(item);
            };
        }
        if (data['subject']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subject'])) {
                throw new Error("Expected the field `subject` to be an array in the JSON data but got " + data['subject']);
            }
            // validate the optional field `subject` (array)
            for (const item of data['subject']) {
                MailBlockRspamd.validateJSON(item);
            };
        }

        return true;
    }


}

MailBlocks.RequiredProperties = ["local", "mbtrap", "subject"];

/**
 * @member {Array.<module:model/MailBlockClickHouse>} local
 */
MailBlocks.prototype['local'] = undefined;

/**
 * @member {Array.<module:model/MailBlockClickHouse>} mbtrap
 */
MailBlocks.prototype['mbtrap'] = undefined;

/**
 * @member {Array.<module:model/MailBlockRspamd>} subject
 */
MailBlocks.prototype['subject'] = undefined;






export default MailBlocks;


# NOTE: This file is auto generated by OpenAPI Generator 8.0.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MailBabyEmailDeliveryAndManagementServiceAPI.Api.Blocking do
  @moduledoc """
  API calls for all endpoints tagged `Blocking`.
  """

  alias MailBabyEmailDeliveryAndManagementServiceAPI.Connection
  import MailBabyEmailDeliveryAndManagementServiceAPI.RequestBuilder

  @doc """
  Creates a new email deny rule.
  Adds a new email deny rule into the system to block new emails that match the given criteria

  ### Parameters

  - `connection` (MailBabyEmailDeliveryAndManagementServiceAPI.Connection): Connection to server
  - `type` (String.t): The type of deny rule.
  - `data` (String.t): The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
  - `opts` (keyword): Optional parameters
    - `:user` (String.t): Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.

  ### Returns

  - `{:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_rule(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse.t} | {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage.t} | {:error, Tesla.Env.t}
  def add_rule(connection, type, data, opts \\ []) do
    optional_params = %{
      :user => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/mail/rules")
      |> add_param(:form, :type, type)
      |> add_param(:form, :data, data)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse},
      {400, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {401, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {404, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage}
    ])
  end

  @doc """
  Removes an deny mail rule.
  Removes one of the configured deny mail rules from the system.

  ### Parameters

  - `connection` (MailBabyEmailDeliveryAndManagementServiceAPI.Connection): Connection to server
  - `rule_id` (integer()): The ID of the Rules entry.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_rule(Tesla.Env.client, integer(), keyword()) :: {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse.t} | {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage.t} | {:error, Tesla.Env.t}
  def delete_rule(connection, rule_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/mail/rules/#{rule_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse},
      {400, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {401, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {404, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage}
    ])
  end

  @doc """
  Removes an email address from the blocked list
  Removes an email address from the various block lists. 

  ### Parameters

  - `connection` (MailBabyEmailDeliveryAndManagementServiceAPI.Connection): Connection to server
  - `body` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delist_block(Tesla.Env.client, String.t, keyword()) :: {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse.t} | {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage.t} | {:error, Tesla.Env.t}
  def delist_block(connection, body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/mail/blocks/delete")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MailBabyEmailDeliveryAndManagementServiceAPI.Model.GenericResponse},
      {400, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {401, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {404, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage}
    ])
  end

  @doc """
  displays a list of blocked email addresses

  ### Parameters

  - `connection` (MailBabyEmailDeliveryAndManagementServiceAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.MailBlocks.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_mail_blocks(Tesla.Env.client, keyword()) :: {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage.t} | {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.MailBlocks.t} | {:error, Tesla.Env.t}
  def get_mail_blocks(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mail/blocks")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MailBabyEmailDeliveryAndManagementServiceAPI.Model.MailBlocks},
      {401, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {404, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage}
    ])
  end

  @doc """
  Displays a listing of deny email rules.
  Returns a listing of all the deny block rules you have configured.

  ### Parameters

  - `connection` (MailBabyEmailDeliveryAndManagementServiceAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DenyRuleRecord{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_rules(Tesla.Env.client, keyword()) :: {:ok, list(MailBabyEmailDeliveryAndManagementServiceAPI.Model.DenyRuleRecord.t)} | {:ok, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage.t} | {:error, Tesla.Env.t}
  def get_rules(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mail/rules")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, MailBabyEmailDeliveryAndManagementServiceAPI.Model.DenyRuleRecord},
      {401, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage},
      {404, MailBabyEmailDeliveryAndManagementServiceAPI.Model.ErrorMessage}
    ])
  end
end

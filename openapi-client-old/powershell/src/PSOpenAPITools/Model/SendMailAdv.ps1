#
# Mail Baby API
# This is an API defintion for accesssing the Mail.Baby mail service.
# Version: 1.0.0
# Contact: detain@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details for an Email

.PARAMETER Subject
The subject or title of the email
.PARAMETER Body
The main email contents.
.PARAMETER VarFrom
The contact whom is the this email is from.
.PARAMETER To
The Contact whom is the primary recipient of this email.
.PARAMETER Id
The ID of the Mail order within our system to use as the Mail Account.
.PARAMETER Replyto
Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
.PARAMETER Cc
Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
.PARAMETER Bcc
Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
.PARAMETER Attachments
Optional file attachments to include in the email
.OUTPUTS

SendMailAdv<PSCustomObject>
#>

function Initialize-SendMailAdv {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${VarFrom},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${To},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Replyto},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Cc},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Bcc},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Attachments}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SendMailAdv' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Subject -eq $null) {
            throw "invalid value for 'Subject', 'Subject' cannot be null."
        }

        if ($Body -eq $null) {
            throw "invalid value for 'Body', 'Body' cannot be null."
        }

        if ($VarFrom -eq $null) {
            throw "invalid value for 'VarFrom', 'VarFrom' cannot be null."
        }

        if ($To -eq $null) {
            throw "invalid value for 'To', 'To' cannot be null."
        }

        if ($Id -eq $null) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "subject" = ${Subject}
            "body" = ${Body}
            "from" = ${VarFrom}
            "to" = ${To}
            "id" = ${Id}
            "replyto" = ${Replyto}
            "cc" = ${Cc}
            "bcc" = ${Bcc}
            "attachments" = ${Attachments}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SendMailAdv<PSCustomObject>

.DESCRIPTION

Convert from JSON to SendMailAdv<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SendMailAdv<PSCustomObject>
#>
function ConvertFrom-JsonToSendMailAdv {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SendMailAdv' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SendMailAdv
        $AllProperties = ("subject", "body", "from", "to", "id", "replyto", "cc", "bcc", "attachments")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'subject' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subject' missing."
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) {
            throw "Error! JSON cannot be serialized due to the required property 'body' missing."
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) {
            throw "Error! JSON cannot be serialized due to the required property 'from' missing."
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) {
            throw "Error! JSON cannot be serialized due to the required property 'to' missing."
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "replyto"))) { #optional property not found
            $Replyto = $null
        } else {
            $Replyto = $JsonParameters.PSobject.Properties["replyto"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cc"))) { #optional property not found
            $Cc = $null
        } else {
            $Cc = $JsonParameters.PSobject.Properties["cc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bcc"))) { #optional property not found
            $Bcc = $null
        } else {
            $Bcc = $JsonParameters.PSobject.Properties["bcc"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attachments"))) { #optional property not found
            $Attachments = $null
        } else {
            $Attachments = $JsonParameters.PSobject.Properties["attachments"].value
        }

        $PSO = [PSCustomObject]@{
            "subject" = ${Subject}
            "body" = ${Body}
            "from" = ${VarFrom}
            "to" = ${To}
            "id" = ${Id}
            "replyto" = ${Replyto}
            "cc" = ${Cc}
            "bcc" = ${Bcc}
            "attachments" = ${Attachments}
        }

        return $PSO
    }

}


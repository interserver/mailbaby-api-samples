#
# MailBaby Email Delivery API
# **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
# Version: 1.0.1
# Contact: support@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Mail log records

.PARAMETER Total
total number of mail log entries
.PARAMETER Skip
number of emails skipped in listing
.PARAMETER Limit
number of emails to return
.PARAMETER Emails
No description available.
.OUTPUTS

MailLog<PSCustomObject>
#>

function Initialize-MailLog {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Total},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Skip},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Limit},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Emails}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MailLog' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Total) {
            throw "invalid value for 'Total', 'Total' cannot be null."
        }

        if ($null -eq $Skip) {
            throw "invalid value for 'Skip', 'Skip' cannot be null."
        }

        if ($null -eq $Limit) {
            throw "invalid value for 'Limit', 'Limit' cannot be null."
        }

        if ($null -eq $Emails) {
            throw "invalid value for 'Emails', 'Emails' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "total" = ${Total}
            "skip" = ${Skip}
            "limit" = ${Limit}
            "emails" = ${Emails}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MailLog<PSCustomObject>

.DESCRIPTION

Convert from JSON to MailLog<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MailLog<PSCustomObject>
#>
function ConvertFrom-JsonToMailLog {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MailLog' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MailLog
        $AllProperties = ("total", "skip", "limit", "emails")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'total' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total"))) {
            throw "Error! JSON cannot be serialized due to the required property 'total' missing."
        } else {
            $Total = $JsonParameters.PSobject.Properties["total"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "skip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'skip' missing."
        } else {
            $Skip = $JsonParameters.PSobject.Properties["skip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "limit"))) {
            throw "Error! JSON cannot be serialized due to the required property 'limit' missing."
        } else {
            $Limit = $JsonParameters.PSobject.Properties["limit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emails"))) {
            throw "Error! JSON cannot be serialized due to the required property 'emails' missing."
        } else {
            $Emails = $JsonParameters.PSobject.Properties["emails"].value
        }

        $PSO = [PSCustomObject]@{
            "total" = ${Total}
            "skip" = ${Skip}
            "limit" = ${Limit}
            "emails" = ${Emails}
        }

        return $PSO
    }

}


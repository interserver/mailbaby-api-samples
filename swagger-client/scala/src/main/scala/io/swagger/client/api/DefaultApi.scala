/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.ErrorResponse
import io.swagger.client.model.GenericResponse
import io.swagger.client.model.MailAttachment
import io.swagger.client.model.MailContact
import io.swagger.client.model.MailLog
import io.swagger.client.model.MailOrder
import io.swagger.client.model.MailOrders
import io.swagger.client.model.SendMail
import io.swagger.client.model.SendMail_from
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DefaultApi(
  val defBasePath: String = "https://api.mailbaby.net",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DefaultApiAsyncHelper(client, config)

  /**
   * displays a list of mail service orders
   * 
   *
   * @param id The ID of your mail order this will be sent through. (optional)
   * @return MailOrders
   */
  def getMailOrders(id: Option[Long] = None): Option[MailOrders] = {
    val await = Try(Await.result(getMailOrdersAsync(id), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * displays a list of mail service orders asynchronously
   * 
   *
   * @param id The ID of your mail order this will be sent through. (optional)
   * @return Future(MailOrders)
   */
  def getMailOrdersAsync(id: Option[Long] = None): Future[MailOrders] = {
      helper.getMailOrders(id)
  }

  /**
   * Checks if the server is running
   * 
   *
   * @return void
   */
  def pingServer() = {
    val await = Try(Await.result(pingServerAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Checks if the server is running asynchronously
   * 
   *
   * @return Future(void)
   */
  def pingServerAsync() = {
      helper.pingServer()
  }

  /**
   * places a mail order
   * Adds an item to the system
   *
   * @param body Inventory item to add (optional)
   * @return void
   */
  def placeMailOrder(body: Option[MailOrder] = None) = {
    val await = Try(Await.result(placeMailOrderAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * places a mail order asynchronously
   * Adds an item to the system
   *
   * @param body Inventory item to add (optional)
   * @return Future(void)
   */
  def placeMailOrderAsync(body: Option[MailOrder] = None) = {
      helper.placeMailOrder(body)
  }

  /**
   * Sends an Email with Advanced Options
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   *
   * @param body  
   * @return GenericResponse
   */
  def sendAdvMailById(body: SendMail): Option[GenericResponse] = {
    val await = Try(Await.result(sendAdvMailByIdAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sends an Email with Advanced Options asynchronously
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   *
   * @param body  
   * @return Future(GenericResponse)
   */
  def sendAdvMailByIdAsync(body: SendMail): Future[GenericResponse] = {
      helper.sendAdvMailById(body)
  }

  /**
   * Sends an Email
   * Sends An email through one of your mail orders.
   *
   * @param body  
   * @param subject  
   * @param body  
   * @param from  
   * @param to  
   * @param id  
   * @param replyto  
   * @param cc  
   * @param bcc  
   * @param attachments  
   * @return GenericResponse
   */
  def sendMailById(body: SendMail, subject: String, body: String, from: List[SendMail_from], to: List[MailContact], id: Long, replyto: List[MailContact], cc: List[MailContact], bcc: List[MailContact], attachments: List[MailAttachment]): Option[GenericResponse] = {
    val await = Try(Await.result(sendMailByIdAsync(body, subject, body, from, to, id, replyto, cc, bcc, attachments), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sends an Email asynchronously
   * Sends An email through one of your mail orders.
   *
   * @param body  
   * @param subject  
   * @param body  
   * @param from  
   * @param to  
   * @param id  
   * @param replyto  
   * @param cc  
   * @param bcc  
   * @param attachments  
   * @return Future(GenericResponse)
   */
  def sendMailByIdAsync(body: SendMail, subject: String, body: String, from: List[SendMail_from], to: List[MailContact], id: Long, replyto: List[MailContact], cc: List[MailContact], bcc: List[MailContact], attachments: List[MailAttachment]): Future[GenericResponse] = {
      helper.sendMailById(body, subject, body, from, to, id, replyto, cc, bcc, attachments)
  }

  /**
   * validatess order details before placing an order
   * 
   *
   * @return void
   */
  def validateMailOrder() = {
    val await = Try(Await.result(validateMailOrderAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * validatess order details before placing an order asynchronously
   * 
   *
   * @return Future(void)
   */
  def validateMailOrderAsync() = {
      helper.validateMailOrder()
  }

  /**
   * displays the mail log
   * By passing in the appropriate options, you can search for available inventory in the system 
   *
   * @param id The ID of your mail order this will be sent through. (optional)
   * @param searchString pass an optional search string for looking up inventory (optional)
   * @param skip number of records to skip for pagination (optional)
   * @param limit maximum number of records to return (optional)
   * @return List[MailLog]
   */
  def viewMailLogById(id: Option[Long] = None, searchString: Option[String] = None, skip: Option[Integer] = None, limit: Option[Integer] = None): Option[List[MailLog]] = {
    val await = Try(Await.result(viewMailLogByIdAsync(id, searchString, skip, limit), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * displays the mail log asynchronously
   * By passing in the appropriate options, you can search for available inventory in the system 
   *
   * @param id The ID of your mail order this will be sent through. (optional)
   * @param searchString pass an optional search string for looking up inventory (optional)
   * @param skip number of records to skip for pagination (optional)
   * @param limit maximum number of records to return (optional)
   * @return Future(List[MailLog])
   */
  def viewMailLogByIdAsync(id: Option[Long] = None, searchString: Option[String] = None, skip: Option[Integer] = None, limit: Option[Integer] = None): Future[List[MailLog]] = {
      helper.viewMailLogById(id, searchString, skip, limit)
  }

}

class DefaultApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def getMailOrders(id: Option[Long] = None
    )(implicit reader: ClientResponseReader[MailOrders]): Future[MailOrders] = {
    // create path and map variables
    val path = (addFmt("/mail"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    id match {
      case Some(param) => queryParams += "id" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def pingServer()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/ping"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def placeMailOrder(body: Option[MailOrder] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Option[MailOrder]]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/mail/order"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendAdvMailById(body: SendMail)(implicit reader: ClientResponseReader[GenericResponse], writer: RequestWriter[SendMail]): Future[GenericResponse] = {
    // create path and map variables
    val path = (addFmt("/mail/advsend"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendAdvMailById")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sendMailById(body: SendMail,
    subject: String,
    body: String,
    from: List[SendMail_from],
    to: List[MailContact],
    id: Long,
    replyto: List[MailContact],
    cc: List[MailContact],
    bcc: List[MailContact],
    attachments: List[MailAttachment])(implicit reader: ClientResponseReader[GenericResponse], writer: RequestWriter[SendMail]): Future[GenericResponse] = {
    // create path and map variables
    val path = (addFmt("/mail/send"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendMailById")
    if (subject == null) throw new Exception("Missing required parameter 'subject' when calling DefaultApi->sendMailById")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sendMailById")

    if (from == null) throw new Exception("Missing required parameter 'from' when calling DefaultApi->sendMailById")
    if (to == null) throw new Exception("Missing required parameter 'to' when calling DefaultApi->sendMailById")
    if (replyto == null) throw new Exception("Missing required parameter 'replyto' when calling DefaultApi->sendMailById")
    if (cc == null) throw new Exception("Missing required parameter 'cc' when calling DefaultApi->sendMailById")
    if (bcc == null) throw new Exception("Missing required parameter 'bcc' when calling DefaultApi->sendMailById")
    if (attachments == null) throw new Exception("Missing required parameter 'attachments' when calling DefaultApi->sendMailById")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def validateMailOrder()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/mail/order"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def viewMailLogById(id: Option[Long] = None,
    searchString: Option[String] = None,
    skip: Option[Integer] = None,
    limit: Option[Integer] = None
    )(implicit reader: ClientResponseReader[List[MailLog]]): Future[List[MailLog]] = {
    // create path and map variables
    val path = (addFmt("/mail/log"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    id match {
      case Some(param) => queryParams += "id" -> param.toString
      case _ => queryParams
    }
    searchString match {
      case Some(param) => queryParams += "searchString" -> param.toString
      case _ => queryParams
    }
    skip match {
      case Some(param) => queryParams += "skip" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}

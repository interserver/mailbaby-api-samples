# #MailBaby Email Delivery and Management Service API
#
##**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
#
#The version of the OpenAPI document: 1.1.0
#Contact: support@interserver.net
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 6.6.0
#

require "uri"

module OpenAPIClient
  class SendingApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Sends an Email with Advanced Options
    # Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    # @param subject [String] The subject or title of the email
    # @param body [String] The main email contents.
    # @param from [EmailAddressName] 
    # @param to [Array(EmailAddressName)] A list of destionation email addresses to send this to
    # @return [GenericResponse]
    def send_adv_mail(subject : String, body : String, from : EmailAddressName, to : Array(EmailAddressName), replyto : Array(EmailAddressName)?, cc : Array(EmailAddressName)?, bcc : Array(EmailAddressName)?, attachments : Array(MailAttachment)?, id : Int64?)
      data, _status_code, _headers = send_adv_mail_with_http_info(subject, body, from, to, replyto, cc, bcc, attachments, id)
      data
    end

    # Sends an Email with Advanced Options
    # Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    # @param subject [String] The subject or title of the email
    # @param body [String] The main email contents.
    # @param from [EmailAddressName] 
    # @param to [Array(EmailAddressName)] A list of destionation email addresses to send this to
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def send_adv_mail_with_http_info(subject : String, body : String, from : EmailAddressName, to : Array(EmailAddressName), replyto : Array(EmailAddressName)?, cc : Array(EmailAddressName)?, bcc : Array(EmailAddressName)?, attachments : Array(MailAttachment)?, id : Int64?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SendingApi.send_adv_mail ..."}
      end
      # verify the required parameter "subject" is set
      if @api_client.config.client_side_validation && subject.nil?
        raise ArgumentError.new("Missing the required parameter 'subject' when calling SendingApi.send_adv_mail")
      end
      # verify the required parameter "body" is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError.new("Missing the required parameter 'body' when calling SendingApi.send_adv_mail")
      end
      # verify the required parameter "from" is set
      if @api_client.config.client_side_validation && from.nil?
        raise ArgumentError.new("Missing the required parameter 'from' when calling SendingApi.send_adv_mail")
      end
      # verify the required parameter "to" is set
      if @api_client.config.client_side_validation && to.nil?
        raise ArgumentError.new("Missing the required parameter 'to' when calling SendingApi.send_adv_mail")
      end
      # resource path
      local_var_path = "/mail/advsend"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded", "application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"subject"] = subject unless subject.nil?
      form_params[:"body"] = body unless body.nil?
      form_params[:"from"] = from unless from.nil?
      form_params[:"to"] = @api_client.build_collection_param(to, :csv)
      form_params[:"replyto"] = @api_client.build_collection_param(replyto, :csv)
      form_params[:"cc"] = @api_client.build_collection_param(cc, :csv)
      form_params[:"bcc"] = @api_client.build_collection_param(bcc, :csv)
      form_params[:"attachments"] = @api_client.build_collection_param(attachments, :csv)
      form_params[:"id"] = id unless id.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GenericResponse"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"SendingApi.send_adv_mail",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SendingApi#send_adv_mail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenericResponse.from_json(data), status_code, headers
    end

    # Sends an Email
    # Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
    # @param to [String] The Contact whom is the primary recipient of this email.
    # @param from [String] The contact whom is the this email is from.
    # @param subject [String] The subject or title of the email
    # @param body [String] The main email contents.
    # @return [GenericResponse]
    def send_mail(to : String, from : String, subject : String, body : String)
      data, _status_code, _headers = send_mail_with_http_info(to, from, subject, body)
      data
    end

    # Sends an Email
    # Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
    # @param to [String] The Contact whom is the primary recipient of this email.
    # @param from [String] The contact whom is the this email is from.
    # @param subject [String] The subject or title of the email
    # @param body [String] The main email contents.
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def send_mail_with_http_info(to : String, from : String, subject : String, body : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SendingApi.send_mail ..."}
      end
      # verify the required parameter "to" is set
      if @api_client.config.client_side_validation && to.nil?
        raise ArgumentError.new("Missing the required parameter 'to' when calling SendingApi.send_mail")
      end
      # verify the required parameter "from" is set
      if @api_client.config.client_side_validation && from.nil?
        raise ArgumentError.new("Missing the required parameter 'from' when calling SendingApi.send_mail")
      end
      # verify the required parameter "subject" is set
      if @api_client.config.client_side_validation && subject.nil?
        raise ArgumentError.new("Missing the required parameter 'subject' when calling SendingApi.send_mail")
      end
      # verify the required parameter "body" is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError.new("Missing the required parameter 'body' when calling SendingApi.send_mail")
      end
      # resource path
      local_var_path = "/mail/send"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded", "application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"to"] = to unless to.nil?
      form_params[:"from"] = from unless from.nil?
      form_params[:"subject"] = subject unless subject.nil?
      form_params[:"body"] = body unless body.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GenericResponse"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"SendingApi.send_mail",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SendingApi#send_mail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenericResponse.from_json(data), status_code, headers
    end
  end
end

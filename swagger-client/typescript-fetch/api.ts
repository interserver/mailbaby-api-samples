/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.mailbaby.net/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    statusText?: string;
}
/**
 * Mail Order Details
 * @export
 * @interface MailLog
 */
export interface MailLog {
    /**
     * 
     * @type {number}
     * @memberof MailLog
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface MailOrder
 */
export interface MailOrder {
    /**
     * 
     * @type {number}
     * @memberof MailOrder
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    comment?: string;
}
/**
 * 
 * @export
 * @interface MailOrders
 */
export interface MailOrders extends Array<MailOrder> {
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailById(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMailById.');
            }
            const localVarPath = `/mail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(options: any = {}): FetchArgs {
            const localVarPath = `/mail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options: any = {}): FetchArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [body] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder(body?: MailOrder, options: any = {}): FetchArgs {
            const localVarPath = `/mail/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MailOrder" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {number} id User ID
         * @param {string} [subject] 
         * @param {string} [body] 
         * @param {string} [to] 
         * @param {string} [from] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling sendMailById.');
            }
            const localVarPath = `/mail/{id}/send`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (body !== undefined) {
                localVarQueryParameter['body'] = body;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder(options: any = {}): FetchArgs {
            const localVarPath = `/mail/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} id User ID
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling viewMailLogById.');
            }
            const localVarPath = `/mail/{id}/log`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-KEY")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            // authentication apiLoginAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-LOGIN")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-LOGIN"] = localVarApiKeyValue;
            }

            // authentication apiPasswordAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-API-PASS")
					: configuration.apiKey;
                localVarHeaderParameter["X-API-PASS"] = localVarApiKeyValue;
            }

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailById(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MailOrder> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getMailById(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MailOrders> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getMailOrders(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).pingServer(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [body] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder(body?: MailOrder, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).placeMailOrder(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {number} id User ID
         * @param {string} [subject] 
         * @param {string} [body] 
         * @param {string} [to] 
         * @param {string} [from] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GenericResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).sendMailById(id, subject, body, to, from, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).validateMailOrder(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} id User ID
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MailLog>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).viewMailLogById(id, searchString, skip, limit, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailById(id: number, options?: any) {
            return DefaultApiFp(configuration).getMailById(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(options?: any) {
            return DefaultApiFp(configuration).getMailOrders(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options?: any) {
            return DefaultApiFp(configuration).pingServer(options)(fetch, basePath);
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [body] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder(body?: MailOrder, options?: any) {
            return DefaultApiFp(configuration).placeMailOrder(body, options)(fetch, basePath);
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {number} id User ID
         * @param {string} [subject] 
         * @param {string} [body] 
         * @param {string} [to] 
         * @param {string} [from] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, options?: any) {
            return DefaultApiFp(configuration).sendMailById(id, subject, body, to, from, options)(fetch, basePath);
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder(options?: any) {
            return DefaultApiFp(configuration).validateMailOrder(options)(fetch, basePath);
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} id User ID
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: any) {
            return DefaultApiFp(configuration).viewMailLogById(id, searchString, skip, limit, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * returns information about a mail order in the system with the given id.
     * @summary Gets mail order information by id
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMailById(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMailById(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary displays a list of mail service orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMailOrders(options?: any) {
        return DefaultApiFp(this.configuration).getMailOrders(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Checks if the server is running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingServer(options?: any) {
        return DefaultApiFp(this.configuration).pingServer(options)(this.fetch, this.basePath);
    }

    /**
     * Adds an item to the system
     * @summary places a mail order
     * @param {MailOrder} [body] Inventory item to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public placeMailOrder(body?: MailOrder, options?: any) {
        return DefaultApiFp(this.configuration).placeMailOrder(body, options)(this.fetch, this.basePath);
    }

    /**
     * Sends An email through one of your mail orders.
     * @summary Sends an Email
     * @param {number} id User ID
     * @param {string} [subject] 
     * @param {string} [body] 
     * @param {string} [to] 
     * @param {string} [from] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, options?: any) {
        return DefaultApiFp(this.configuration).sendMailById(id, subject, body, to, from, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary validatess order details before placing an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public validateMailOrder(options?: any) {
        return DefaultApiFp(this.configuration).validateMailOrder(options)(this.fetch, this.basePath);
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @summary displays the mail log
     * @param {number} id User ID
     * @param {string} [searchString] pass an optional search string for looking up inventory
     * @param {number} [skip] number of records to skip for pagination
     * @param {number} [limit] maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).viewMailLogById(id, searchString, skip, limit, options)(this.fetch, this.basePath);
    }

}

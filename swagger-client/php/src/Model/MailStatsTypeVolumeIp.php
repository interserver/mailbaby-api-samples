<?php
/**
 * MailStatsTypeVolumeIp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Interserver\Mailbaby
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.73
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Interserver\Mailbaby\Model;

use \ArrayAccess;
use \Interserver\Mailbaby\ObjectSerializer;

/**
 * MailStatsTypeVolumeIp Class Doc Comment
 *
 * @category Class
 * @package  Interserver\Mailbaby
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailStatsTypeVolumeIp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MailStatsType_volume_ip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_1111' => 'int',
        '_2222' => 'int',
        '_3333' => 'int',
        '_4444' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_1111' => 'int32',
        '_2222' => 'int32',
        '_3333' => 'int32',
        '_4444' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_1111' => '1.1.1.1',
        '_2222' => '2.2.2.2',
        '_3333' => '3.3.3.3',
        '_4444' => '4.4.4.4'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_1111' => 'set1111',
        '_2222' => 'set2222',
        '_3333' => 'set3333',
        '_4444' => 'set4444'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_1111' => 'get1111',
        '_2222' => 'get2222',
        '_3333' => 'get3333',
        '_4444' => 'get4444'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_1111'] = isset($data['_1111']) ? $data['_1111'] : null;
        $this->container['_2222'] = isset($data['_2222']) ? $data['_2222'] : null;
        $this->container['_3333'] = isset($data['_3333']) ? $data['_3333'] : null;
        $this->container['_4444'] = isset($data['_4444']) ? $data['_4444'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _1111
     *
     * @return int
     */
    public function get1111()
    {
        return $this->container['_1111'];
    }

    /**
     * Sets _1111
     *
     * @param int $_1111 _1111
     *
     * @return $this
     */
    public function set1111($_1111)
    {
        $this->container['_1111'] = $_1111;

        return $this;
    }

    /**
     * Gets _2222
     *
     * @return int
     */
    public function get2222()
    {
        return $this->container['_2222'];
    }

    /**
     * Sets _2222
     *
     * @param int $_2222 _2222
     *
     * @return $this
     */
    public function set2222($_2222)
    {
        $this->container['_2222'] = $_2222;

        return $this;
    }

    /**
     * Gets _3333
     *
     * @return int
     */
    public function get3333()
    {
        return $this->container['_3333'];
    }

    /**
     * Sets _3333
     *
     * @param int $_3333 _3333
     *
     * @return $this
     */
    public function set3333($_3333)
    {
        $this->container['_3333'] = $_3333;

        return $this;
    }

    /**
     * Gets _4444
     *
     * @return int
     */
    public function get4444()
    {
        return $this->container['_4444'];
    }

    /**
     * Sets _4444
     *
     * @param int $_4444 _4444
     *
     * @return $this
     */
    public function set4444($_4444)
    {
        $this->container['_4444'] = $_4444;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

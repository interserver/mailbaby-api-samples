/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { GenericResponse } from '../model/genericResponse';
import { GetMailOrders200ResponseInner } from '../model/getMailOrders200ResponseInner';
import { GetMailOrders401Response } from '../model/getMailOrders401Response';
import { MailLog } from '../model/mailLog';
import { SendMailAdv } from '../model/sendMailAdv';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DefaultService {
    private basePath: string = 'https://api.mailbaby.net';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * displays a list of mail service orders
     * 
     
     */
    public getMailOrders(observe?: 'body', headers?: Headers): Observable<Array<GetMailOrders200ResponseInner>>;
    public getMailOrders(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<GetMailOrders200ResponseInner>>>;
    public getMailOrders(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<GetMailOrders200ResponseInner>>> = this.httpClient.get(`${this.basePath}/mail`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<GetMailOrders200ResponseInner>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Checks if the server is running
     * 
     
     */
    public pingServer(observe?: 'body', headers?: Headers): Observable<any>;
    public pingServer(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public pingServer(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/ping`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param sendMailAdv 
     
     */
    public sendAdvMail(sendMailAdv: SendMailAdv, observe?: 'body', headers?: Headers): Observable<GenericResponse>;
    public sendAdvMail(sendMailAdv: SendMailAdv, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenericResponse>>;
    public sendAdvMail(sendMailAdv: SendMailAdv, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (sendMailAdv === null || sendMailAdv === undefined){
            throw new Error('Required parameter sendMailAdv was null or undefined when calling sendAdvMail.');
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<GenericResponse>> = this.httpClient.post(`${this.basePath}/mail/advsend`, sendMailAdv , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenericResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Sends an Email
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * @param to The Contact whom is the primary recipient of this email.
     * @param from The contact whom is the this email is from.
     * @param subject The subject or title of the email
     * @param body The main email contents.
     
     */
    public sendMail(to: string, from: string, subject: string, body: string, observe?: 'body', headers?: Headers): Observable<GenericResponse>;
    public sendMail(to: string, from: string, subject: string, body: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GenericResponse>>;
    public sendMail(to: string, from: string, subject: string, body: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (to === null || to === undefined){
            throw new Error('Required parameter to was null or undefined when calling sendMail.');
        }

        if (from === null || from === undefined){
            throw new Error('Required parameter from was null or undefined when calling sendMail.');
        }

        if (subject === null || subject === undefined){
            throw new Error('Required parameter subject was null or undefined when calling sendMail.');
        }

        if (body === null || body === undefined){
            throw new Error('Required parameter body was null or undefined when calling sendMail.');
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        if (to !== undefined) {
            formData.append('to', <any>to);
        }
        if (from !== undefined) {
            formData.append('from', <any>from);
        }
        if (subject !== undefined) {
            formData.append('subject', <any>subject);
        }
        if (body !== undefined) {
            formData.append('body', <any>body);
        }

        const response: Observable<HttpResponse<GenericResponse>> = this.httpClient.post(`${this.basePath}/mail/send`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GenericResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through.
     * @param search pass an optional search string for looking up inventory
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     
     */
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, observe?: 'body', headers?: Headers): Observable<MailLog>;
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<MailLog>>;
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (id !== undefined) {
            queryParameters.push('id='+encodeURIComponent(String(id)));
        }
        if (search !== undefined) {
            queryParameters.push('search='+encodeURIComponent(String(search)));
        }
        if (skip !== undefined) {
            queryParameters.push('skip='+encodeURIComponent(String(skip)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['X-API-KEY']) {
            headers['X-API-KEY'] = this.APIConfiguration.apiKeys['X-API-KEY'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<MailLog>> = this.httpClient.get(`${this.basePath}/mail/log?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <MailLog>(httpResponse.response))
               );
        }
        return response;
    }

}

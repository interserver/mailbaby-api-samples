/*
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import org.openapitools.client.JSON;

/**
 * An email record
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-28T16:25:36.113785640-04:00[America/New_York]", comments = "Generator version: 7.16.0")
public class MailLogEntry {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private Integer id;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nonnull
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nonnull
  private String to;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nonnull
  private String subject;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nonnull
  private String created;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  @javax.annotation.Nonnull
  private Integer time;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nonnull
  private String user;

  public static final String SERIALIZED_NAME_TRANSTYPE = "transtype";
  @SerializedName(SERIALIZED_NAME_TRANSTYPE)
  @javax.annotation.Nonnull
  private String transtype;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  @javax.annotation.Nonnull
  private String origin;

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  @javax.annotation.Nonnull
  private String _interface;

  public static final String SERIALIZED_NAME_SENDING_ZONE = "sendingZone";
  @SerializedName(SERIALIZED_NAME_SENDING_ZONE)
  @javax.annotation.Nonnull
  private String sendingZone;

  public static final String SERIALIZED_NAME_BODY_SIZE = "bodySize";
  @SerializedName(SERIALIZED_NAME_BODY_SIZE)
  @javax.annotation.Nonnull
  private Integer bodySize;

  public static final String SERIALIZED_NAME_SEQ = "seq";
  @SerializedName(SERIALIZED_NAME_SEQ)
  @javax.annotation.Nonnull
  private Integer seq;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  @javax.annotation.Nonnull
  private String recipient;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  @javax.annotation.Nonnull
  private String domain;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  @javax.annotation.Nonnull
  private Integer locked;

  public static final String SERIALIZED_NAME_LOCK_TIME = "lockTime";
  @SerializedName(SERIALIZED_NAME_LOCK_TIME)
  @javax.annotation.Nonnull
  private String lockTime;

  public static final String SERIALIZED_NAME_ASSIGNED = "assigned";
  @SerializedName(SERIALIZED_NAME_ASSIGNED)
  @javax.annotation.Nonnull
  private String assigned;

  public static final String SERIALIZED_NAME_QUEUED = "queued";
  @SerializedName(SERIALIZED_NAME_QUEUED)
  @javax.annotation.Nonnull
  private String queued;

  public static final String SERIALIZED_NAME_MX_HOSTNAME = "mxHostname";
  @SerializedName(SERIALIZED_NAME_MX_HOSTNAME)
  @javax.annotation.Nonnull
  private String mxHostname;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  @javax.annotation.Nonnull
  private String response;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nullable
  private String messageId;

  public MailLogEntry() {
  }

  public MailLogEntry id(@javax.annotation.Nonnull Integer id) {
    this.id = id;
    return this;
  }

  /**
   * internal db id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull Integer id) {
    this.id = id;
  }


  public MailLogEntry id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * mail id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public MailLogEntry from(@javax.annotation.Nonnull String from) {
    this.from = from;
    return this;
  }

  /**
   * from address
   * @return from
   */
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nonnull String from) {
    this.from = from;
  }


  public MailLogEntry to(@javax.annotation.Nonnull String to) {
    this.to = to;
    return this;
  }

  /**
   * to address
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nonnull String to) {
    this.to = to;
  }


  public MailLogEntry subject(@javax.annotation.Nonnull String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * email subject
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nonnull String subject) {
    this.subject = subject;
  }


  public MailLogEntry created(@javax.annotation.Nonnull String created) {
    this.created = created;
    return this;
  }

  /**
   * creation date
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(@javax.annotation.Nonnull String created) {
    this.created = created;
  }


  public MailLogEntry time(@javax.annotation.Nonnull Integer time) {
    this.time = time;
    return this;
  }

  /**
   * creation timestamp
   * @return time
   */
  @javax.annotation.Nonnull
  public Integer getTime() {
    return time;
  }

  public void setTime(@javax.annotation.Nonnull Integer time) {
    this.time = time;
  }


  public MailLogEntry user(@javax.annotation.Nonnull String user) {
    this.user = user;
    return this;
  }

  /**
   * user account
   * @return user
   */
  @javax.annotation.Nonnull
  public String getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nonnull String user) {
    this.user = user;
  }


  public MailLogEntry transtype(@javax.annotation.Nonnull String transtype) {
    this.transtype = transtype;
    return this;
  }

  /**
   * transaction type
   * @return transtype
   */
  @javax.annotation.Nonnull
  public String getTranstype() {
    return transtype;
  }

  public void setTranstype(@javax.annotation.Nonnull String transtype) {
    this.transtype = transtype;
  }


  public MailLogEntry origin(@javax.annotation.Nonnull String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * origin ip
   * @return origin
   */
  @javax.annotation.Nonnull
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(@javax.annotation.Nonnull String origin) {
    this.origin = origin;
  }


  public MailLogEntry _interface(@javax.annotation.Nonnull String _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * interface name
   * @return _interface
   */
  @javax.annotation.Nonnull
  public String getInterface() {
    return _interface;
  }

  public void setInterface(@javax.annotation.Nonnull String _interface) {
    this._interface = _interface;
  }


  public MailLogEntry sendingZone(@javax.annotation.Nonnull String sendingZone) {
    this.sendingZone = sendingZone;
    return this;
  }

  /**
   * sending zone
   * @return sendingZone
   */
  @javax.annotation.Nonnull
  public String getSendingZone() {
    return sendingZone;
  }

  public void setSendingZone(@javax.annotation.Nonnull String sendingZone) {
    this.sendingZone = sendingZone;
  }


  public MailLogEntry bodySize(@javax.annotation.Nonnull Integer bodySize) {
    this.bodySize = bodySize;
    return this;
  }

  /**
   * email body size in bytes
   * @return bodySize
   */
  @javax.annotation.Nonnull
  public Integer getBodySize() {
    return bodySize;
  }

  public void setBodySize(@javax.annotation.Nonnull Integer bodySize) {
    this.bodySize = bodySize;
  }


  public MailLogEntry seq(@javax.annotation.Nonnull Integer seq) {
    this.seq = seq;
    return this;
  }

  /**
   * index of email in the to adderess list
   * @return seq
   */
  @javax.annotation.Nonnull
  public Integer getSeq() {
    return seq;
  }

  public void setSeq(@javax.annotation.Nonnull Integer seq) {
    this.seq = seq;
  }


  public MailLogEntry recipient(@javax.annotation.Nonnull String recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * to address this email is being sent to
   * @return recipient
   */
  @javax.annotation.Nonnull
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(@javax.annotation.Nonnull String recipient) {
    this.recipient = recipient;
  }


  public MailLogEntry domain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * to address domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
  }


  public MailLogEntry locked(@javax.annotation.Nonnull Integer locked) {
    this.locked = locked;
    return this;
  }

  /**
   * locked status
   * @return locked
   */
  @javax.annotation.Nonnull
  public Integer getLocked() {
    return locked;
  }

  public void setLocked(@javax.annotation.Nonnull Integer locked) {
    this.locked = locked;
  }


  public MailLogEntry lockTime(@javax.annotation.Nonnull String lockTime) {
    this.lockTime = lockTime;
    return this;
  }

  /**
   * lock timestamp
   * @return lockTime
   */
  @javax.annotation.Nonnull
  public String getLockTime() {
    return lockTime;
  }

  public void setLockTime(@javax.annotation.Nonnull String lockTime) {
    this.lockTime = lockTime;
  }


  public MailLogEntry assigned(@javax.annotation.Nonnull String assigned) {
    this.assigned = assigned;
    return this;
  }

  /**
   * assigned server
   * @return assigned
   */
  @javax.annotation.Nonnull
  public String getAssigned() {
    return assigned;
  }

  public void setAssigned(@javax.annotation.Nonnull String assigned) {
    this.assigned = assigned;
  }


  public MailLogEntry queued(@javax.annotation.Nonnull String queued) {
    this.queued = queued;
    return this;
  }

  /**
   * queued timestamp
   * @return queued
   */
  @javax.annotation.Nonnull
  public String getQueued() {
    return queued;
  }

  public void setQueued(@javax.annotation.Nonnull String queued) {
    this.queued = queued;
  }


  public MailLogEntry mxHostname(@javax.annotation.Nonnull String mxHostname) {
    this.mxHostname = mxHostname;
    return this;
  }

  /**
   * mx hostname
   * @return mxHostname
   */
  @javax.annotation.Nonnull
  public String getMxHostname() {
    return mxHostname;
  }

  public void setMxHostname(@javax.annotation.Nonnull String mxHostname) {
    this.mxHostname = mxHostname;
  }


  public MailLogEntry response(@javax.annotation.Nonnull String response) {
    this.response = response;
    return this;
  }

  /**
   * mail delivery response
   * @return response
   */
  @javax.annotation.Nonnull
  public String getResponse() {
    return response;
  }

  public void setResponse(@javax.annotation.Nonnull String response) {
    this.response = response;
  }


  public MailLogEntry messageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * message id
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailLogEntry mailLogEntry = (MailLogEntry) o;
    return Objects.equals(this.id, mailLogEntry.id) &&
        Objects.equals(this.id, mailLogEntry.id) &&
        Objects.equals(this.from, mailLogEntry.from) &&
        Objects.equals(this.to, mailLogEntry.to) &&
        Objects.equals(this.subject, mailLogEntry.subject) &&
        Objects.equals(this.created, mailLogEntry.created) &&
        Objects.equals(this.time, mailLogEntry.time) &&
        Objects.equals(this.user, mailLogEntry.user) &&
        Objects.equals(this.transtype, mailLogEntry.transtype) &&
        Objects.equals(this.origin, mailLogEntry.origin) &&
        Objects.equals(this._interface, mailLogEntry._interface) &&
        Objects.equals(this.sendingZone, mailLogEntry.sendingZone) &&
        Objects.equals(this.bodySize, mailLogEntry.bodySize) &&
        Objects.equals(this.seq, mailLogEntry.seq) &&
        Objects.equals(this.recipient, mailLogEntry.recipient) &&
        Objects.equals(this.domain, mailLogEntry.domain) &&
        Objects.equals(this.locked, mailLogEntry.locked) &&
        Objects.equals(this.lockTime, mailLogEntry.lockTime) &&
        Objects.equals(this.assigned, mailLogEntry.assigned) &&
        Objects.equals(this.queued, mailLogEntry.queued) &&
        Objects.equals(this.mxHostname, mailLogEntry.mxHostname) &&
        Objects.equals(this.response, mailLogEntry.response) &&
        Objects.equals(this.messageId, mailLogEntry.messageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, id, from, to, subject, created, time, user, transtype, origin, _interface, sendingZone, bodySize, seq, recipient, domain, locked, lockTime, assigned, queued, mxHostname, response, messageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailLogEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    transtype: ").append(toIndentedString(transtype)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    sendingZone: ").append(toIndentedString(sendingZone)).append("\n");
    sb.append("    bodySize: ").append(toIndentedString(bodySize)).append("\n");
    sb.append("    seq: ").append(toIndentedString(seq)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    lockTime: ").append(toIndentedString(lockTime)).append("\n");
    sb.append("    assigned: ").append(toIndentedString(assigned)).append("\n");
    sb.append("    queued: ").append(toIndentedString(queued)).append("\n");
    sb.append("    mxHostname: ").append(toIndentedString(mxHostname)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("_id", "id", "from", "to", "subject", "created", "time", "user", "transtype", "origin", "interface", "sendingZone", "bodySize", "seq", "recipient", "domain", "locked", "lockTime", "assigned", "queued", "mxHostname", "response", "messageId"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("_id", "id", "from", "to", "subject", "created", "time", "user", "transtype", "origin", "interface", "sendingZone", "bodySize", "seq", "recipient", "domain", "locked", "lockTime", "assigned", "queued", "mxHostname", "response"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MailLogEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MailLogEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in MailLogEntry is not found in the empty JSON string", MailLogEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MailLogEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `MailLogEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MailLogEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if (!jsonObj.get("transtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `transtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transtype").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if (!jsonObj.get("interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface").toString()));
      }
      if (!jsonObj.get("sendingZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `sendingZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendingZone").toString()));
      }
      if (!jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("lockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `lockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockTime").toString()));
      }
      if (!jsonObj.get("assigned").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `assigned` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned").toString()));
      }
      if (!jsonObj.get("queued").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `queued` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queued").toString()));
      }
      if (!jsonObj.get("mxHostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `mxHostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mxHostname").toString()));
      }
      if (!jsonObj.get("response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MailLogEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MailLogEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MailLogEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MailLogEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<MailLogEntry>() {
           @Override
           public void write(JsonWriter out, MailLogEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MailLogEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MailLogEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MailLogEntry
   * @throws IOException if the JSON string is invalid with respect to MailLogEntry
   */
  public static MailLogEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MailLogEntry.class);
  }

  /**
   * Convert an instance of MailLogEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  MailLog,
  GenericResponse,
  MailOrder,
  SendMailAdv,
} from './models';

/**
 * getMailOrders - parameters interface
 */
export interface IGetMailOrdersParams {
  id?: number;
}

/**
 * pingServer - parameters interface
 */
export interface IPingServerParams {
}

/**
 * placeMailOrder - parameters interface
 */
export interface IPlaceMailOrderParams {
  mailOrder?: MailOrder;
}

/**
 * sendAdvMail - parameters interface
 */
export interface ISendAdvMailParams {
  sendMailAdv: SendMailAdv;
}

/**
 * sendMail - parameters interface
 */
export interface ISendMailParams {
  to?: string;
  from?: string;
  subject?: string;
  body?: string;
}

/**
 * validateMailOrder - parameters interface
 */
export interface IValidateMailOrderParams {
}

/**
 * viewMailLogById - parameters interface
 */
export interface IViewMailLogByIdParams {
  id?: number;
  searchString?: string;
  skip?: number;
  limit?: number;
}

/**
 * DefaultApi - API class
 */
@autoinject()
export class DefaultApi extends Api {

  /**
   * Creates a new DefaultApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * displays a list of mail service orders
   * @param params.id The ID of your mail order this will be sent through.
   */
  async getMailOrders(params: IGetMailOrdersParams): Promise<Array<MailOrder>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'id': params['id'],
      })

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Checks if the server is running
   */
  async pingServer(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/ping`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * places a mail order
   * Adds an item to the system
   * @param params.mailOrder Inventory item to add
   */
  async placeMailOrder(params: IPlaceMailOrderParams): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/order`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['mailOrder'] || {}))

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Sends an Email with Advanced Options
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   * @param params.sendMailAdv 
   */
  async sendAdvMail(params: ISendAdvMailParams): Promise<GenericResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('sendAdvMail', params, 'sendMailAdv');

    // Create URL to call
    const url = `${this.basePath}/mail/advsend`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['sendMailAdv'] || {}))

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Sends an Email
   * Sends An email through one of your mail orders.
   * @param params.to The Contact whom is the primary recipient of this email.
   * @param params.from The contact whom is the this email is from.
   * @param params.subject The subject or title of the email
   * @param params.body The main email contents.
   */
  async sendMail(params: ISendMailParams): Promise<GenericResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/send`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'to': params['to'],
        'from': params['from'],
        'subject': params['subject'],
        'body': params['body'],
      }))

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * validatess order details before placing an order
   */
  async validateMailOrder(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/order`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * displays the mail log
   * By passing in the appropriate options, you can search for available inventory in the system 
   * @param params.id The ID of your mail order this will be sent through.
   * @param params.searchString pass an optional search string for looking up inventory
   * @param params.skip number of records to skip for pagination
   * @param params.limit maximum number of records to return
   */
  async viewMailLogById(params: IViewMailLogByIdParams): Promise<Array<MailLog>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/log`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'id': params['id'],
        'searchString': params['searchString'],
        'skip': params['skip'],
        'limit': params['limit'],
      })

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


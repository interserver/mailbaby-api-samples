/*
 * Mail Baby API
 *
 * This is an API for accesssing the mail services.
 *
 * API version: 1.0.0
 * Contact: detain@interserver.net
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MailOrder struct for MailOrder
type MailOrder struct {
	Id int32 `json:"id"`
	Status string `json:"status"`
	Username string `json:"username"`
	Password *string `json:"password,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// NewMailOrder instantiates a new MailOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailOrder(id int32, status string, username string) *MailOrder {
	this := MailOrder{}
	this.Id = id
	this.Status = status
	this.Username = username
	return &this
}

// NewMailOrderWithDefaults instantiates a new MailOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailOrderWithDefaults() *MailOrder {
	this := MailOrder{}
	return &this
}

// GetId returns the Id field value
func (o *MailOrder) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MailOrder) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MailOrder) SetId(v int32) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *MailOrder) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *MailOrder) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *MailOrder) SetStatus(v string) {
	o.Status = v
}

// GetUsername returns the Username field value
func (o *MailOrder) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *MailOrder) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *MailOrder) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *MailOrder) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailOrder) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *MailOrder) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *MailOrder) SetPassword(v string) {
	o.Password = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *MailOrder) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailOrder) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MailOrder) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MailOrder) SetComment(v string) {
	o.Comment = &v
}

func (o MailOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullableMailOrder struct {
	value *MailOrder
	isSet bool
}

func (v NullableMailOrder) Get() *MailOrder {
	return v.value
}

func (v *NullableMailOrder) Set(val *MailOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableMailOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableMailOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailOrder(val *MailOrder) *NullableMailOrder {
	return &NullableMailOrder{value: val, isSet: true}
}

func (v NullableMailOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



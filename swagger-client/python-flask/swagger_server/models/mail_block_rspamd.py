# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MailBlockRspamd(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _from: str=None, subject: str=None):  # noqa: E501
        """MailBlockRspamd - a model defined in Swagger

        :param _from: The _from of this MailBlockRspamd.  # noqa: E501
        :type _from: str
        :param subject: The subject of this MailBlockRspamd.  # noqa: E501
        :type subject: str
        """
        self.swagger_types = {
            '_from': str,
            'subject': str
        }

        self.attribute_map = {
            '_from': 'from',
            'subject': 'subject'
        }
        self.__from = _from
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt) -> 'MailBlockRspamd':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MailBlockRspamd of this MailBlockRspamd.  # noqa: E501
        :rtype: MailBlockRspamd
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self) -> str:
        """Gets the _from of this MailBlockRspamd.


        :return: The _from of this MailBlockRspamd.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this MailBlockRspamd.


        :param _from: The _from of this MailBlockRspamd.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def subject(self) -> str:
        """Gets the subject of this MailBlockRspamd.


        :return: The subject of this MailBlockRspamd.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this MailBlockRspamd.


        :param subject: The subject of this MailBlockRspamd.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

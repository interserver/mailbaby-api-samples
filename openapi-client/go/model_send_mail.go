/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SendMail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendMail{}

// SendMail Details for an Email
type SendMail struct {
	// The Contact whom is the primary recipient of this email.
	To string `json:"to"`
	// The contact whom is the this email is from.
	From string `json:"from"`
	// The subject or title of the email
	Subject string `json:"subject"`
	// The main email contents.
	Body string `json:"body"`
}

// NewSendMail instantiates a new SendMail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendMail(to string, from string, subject string, body string) *SendMail {
	this := SendMail{}
	this.To = to
	this.From = from
	this.Subject = subject
	this.Body = body
	return &this
}

// NewSendMailWithDefaults instantiates a new SendMail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendMailWithDefaults() *SendMail {
	this := SendMail{}
	return &this
}

// GetTo returns the To field value
func (o *SendMail) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SendMail) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *SendMail) SetTo(v string) {
	o.To = v
}

// GetFrom returns the From field value
func (o *SendMail) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *SendMail) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *SendMail) SetFrom(v string) {
	o.From = v
}

// GetSubject returns the Subject field value
func (o *SendMail) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *SendMail) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *SendMail) SetSubject(v string) {
	o.Subject = v
}

// GetBody returns the Body field value
func (o *SendMail) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *SendMail) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *SendMail) SetBody(v string) {
	o.Body = v
}

func (o SendMail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendMail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to"] = o.To
	toSerialize["from"] = o.From
	toSerialize["subject"] = o.Subject
	toSerialize["body"] = o.Body
	return toSerialize, nil
}

type NullableSendMail struct {
	value *SendMail
	isSet bool
}

func (v NullableSendMail) Get() *SendMail {
	return v.value
}

func (v *NullableSendMail) Set(val *SendMail) {
	v.value = val
	v.isSet = true
}

func (v NullableSendMail) IsSet() bool {
	return v.isSet
}

func (v *NullableSendMail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendMail(val *SendMail) *NullableSendMail {
	return &NullableSendMail{value: val, isSet: true}
}

func (v NullableSendMail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendMail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



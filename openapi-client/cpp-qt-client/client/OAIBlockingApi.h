/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBlockingApi_H
#define OAI_OAIBlockingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDenyRuleRecord.h"
#include "OAIErrorMessage.h"
#include "OAIGenericResponse.h"
#include "OAIMailBlocks.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBlockingApi : public QObject {
    Q_OBJECT

public:
    OAIBlockingApi(const int timeOut = 0);
    ~OAIBlockingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  data QString [required]
    * @param[in]  user QString [optional]
    */
    virtual void addRule(const QString &type, const QString &data, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_id qint32 [required]
    */
    virtual void deleteRule(const qint32 &rule_id);

    /**
    * @param[in]  body QString [required]
    */
    virtual void delistBlock(const QString &body);


    virtual void getMailBlocks();


    virtual void getRules();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addRuleCallback(OAIHttpRequestWorker *worker);
    void deleteRuleCallback(OAIHttpRequestWorker *worker);
    void delistBlockCallback(OAIHttpRequestWorker *worker);
    void getMailBlocksCallback(OAIHttpRequestWorker *worker);
    void getRulesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addRuleSignal(OAIGenericResponse summary);
    void deleteRuleSignal(OAIGenericResponse summary);
    void delistBlockSignal(OAIGenericResponse summary);
    void getMailBlocksSignal(OAIMailBlocks summary);
    void getRulesSignal(QList<OAIDenyRuleRecord> summary);


    void addRuleSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void deleteRuleSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void delistBlockSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void getMailBlocksSignalFull(OAIHttpRequestWorker *worker, OAIMailBlocks summary);
    void getRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDenyRuleRecord> summary);

    Q_DECL_DEPRECATED_X("Use addRuleSignalError() instead")
    void addRuleSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addRuleSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleSignalError() instead")
    void deleteRuleSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delistBlockSignalError() instead")
    void delistBlockSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void delistBlockSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMailBlocksSignalError() instead")
    void getMailBlocksSignalE(OAIMailBlocks summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMailBlocksSignalError(OAIMailBlocks summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesSignalError() instead")
    void getRulesSignalE(QList<OAIDenyRuleRecord> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesSignalError(QList<OAIDenyRuleRecord> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addRuleSignalErrorFull() instead")
    void addRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRuleSignalErrorFull() instead")
    void deleteRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delistBlockSignalErrorFull() instead")
    void delistBlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delistBlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMailBlocksSignalErrorFull() instead")
    void getMailBlocksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMailBlocksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRulesSignalErrorFull() instead")
    void getRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MailLogEntry from './MailLogEntry';

/**
 * The MailLog model module.
 * @module model/MailLog
 * @version 1.1.0
 */
class MailLog {
    /**
     * Constructs a new <code>MailLog</code>.
     * Mail log records
     * @alias module:model/MailLog
     * @param total {Number} total number of mail log entries
     * @param skip {Number} number of emails skipped in listing
     * @param limit {Number} number of emails to return
     * @param emails {Array.<module:model/MailLogEntry>} 
     */
    constructor(total, skip, limit, emails) { 
        
        MailLog.initialize(this, total, skip, limit, emails);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, total, skip, limit, emails) { 
        obj['total'] = total;
        obj['skip'] = skip;
        obj['limit'] = limit;
        obj['emails'] = emails;
    }

    /**
     * Constructs a <code>MailLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MailLog} obj Optional instance to populate.
     * @return {module:model/MailLog} The populated <code>MailLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MailLog();

            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('skip')) {
                obj['skip'] = ApiClient.convertToType(data['skip'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [MailLogEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MailLog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MailLog</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MailLog.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['emails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emails'])) {
                throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
            }
            // validate the optional field `emails` (array)
            for (const item of data['emails']) {
                MailLogEntry.validateJSON(item);
            };
        }

        return true;
    }


}

MailLog.RequiredProperties = ["total", "skip", "limit", "emails"];

/**
 * total number of mail log entries
 * @member {Number} total
 */
MailLog.prototype['total'] = undefined;

/**
 * number of emails skipped in listing
 * @member {Number} skip
 */
MailLog.prototype['skip'] = undefined;

/**
 * number of emails to return
 * @member {Number} limit
 */
MailLog.prototype['limit'] = undefined;

/**
 * @member {Array.<module:model/MailLogEntry>} emails
 */
MailLog.prototype['emails'] = undefined;






export default MailLog;


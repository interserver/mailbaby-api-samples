/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Inject, Injectable, Optional } from '@nestjs/common';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { GenericResponse } from '../model/genericResponse';
import { MailLog } from '../model/mailLog';
import { MailOrder } from '../model/mailOrder';
import { Configuration } from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://api.mailbaby.net';
    public defaultHeaders = new Map()
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Gets mail order information by id
     * returns information about a mail order in the system with the given id.
     * @param id User ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMailById(id: number, ): Observable<AxiosResponse<MailOrder>>;
    public getMailById(id: number, ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getMailById.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // authentication (apiLoginAuth) required
        if (this.configuration.apiKeys["X-API-LOGIN"]) {
            headers['X-API-LOGIN'] = this.configuration.apiKeys["X-API-LOGIN"];
        }

        // authentication (apiPasswordAuth) required
        if (this.configuration.apiKeys["X-API-PASS"]) {
            headers['X-API-PASS'] = this.configuration.apiKeys["X-API-PASS"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<MailOrder>(`${this.basePath}/mail/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * displays a list of mail service orders
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMailOrders(): Observable<AxiosResponse<Array<MailOrder>>>;
    public getMailOrders(): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // authentication (apiLoginAuth) required
        if (this.configuration.apiKeys["X-API-LOGIN"]) {
            headers['X-API-LOGIN'] = this.configuration.apiKeys["X-API-LOGIN"];
        }

        // authentication (apiPasswordAuth) required
        if (this.configuration.apiKeys["X-API-PASS"]) {
            headers['X-API-PASS'] = this.configuration.apiKeys["X-API-PASS"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<MailOrder>>(`${this.basePath}/mail`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Checks if the server is running
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingServer(): Observable<AxiosResponse<any>>;
    public pingServer(): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * places a mail order
     * Adds an item to the system
     * @param mailOrder Inventory item to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public placeMailOrder(mailOrder?: MailOrder, ): Observable<AxiosResponse<any>>;
    public placeMailOrder(mailOrder?: MailOrder, ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // authentication (apiLoginAuth) required
        if (this.configuration.apiKeys["X-API-LOGIN"]) {
            headers['X-API-LOGIN'] = this.configuration.apiKeys["X-API-LOGIN"];
        }

        // authentication (apiPasswordAuth) required
        if (this.configuration.apiKeys["X-API-PASS"]) {
            headers['X-API-PASS'] = this.configuration.apiKeys["X-API-PASS"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.post<any>(`${this.basePath}/mail/order`,
            mailOrder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param id User ID
     * @param subject 
     * @param body 
     * @param to 
     * @param from 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, ): Observable<AxiosResponse<GenericResponse>>;
    public sendMailById(id: number, subject?: string, body?: string, to?: string, from?: string, ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling sendMailById.');
        }





        let queryParameters = {};   
        if (subject !== undefined && subject !== null) {
            queryParameters['subject'] = <any>subject;
        }
        if (body !== undefined && body !== null) {
            queryParameters['body'] = <any>body;
        }
        if (to !== undefined && to !== null) {
            queryParameters['to'] = <any>to;
        }
        if (from !== undefined && from !== null) {
            queryParameters['from'] = <any>from;
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // authentication (apiLoginAuth) required
        if (this.configuration.apiKeys["X-API-LOGIN"]) {
            headers['X-API-LOGIN'] = this.configuration.apiKeys["X-API-LOGIN"];
        }

        // authentication (apiPasswordAuth) required
        if (this.configuration.apiKeys["X-API-PASS"]) {
            headers['X-API-PASS'] = this.configuration.apiKeys["X-API-PASS"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<GenericResponse>(`${this.basePath}/mail/${encodeURIComponent(String(id))}/send`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * validatess order details before placing an order
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateMailOrder(): Observable<AxiosResponse<any>>;
    public validateMailOrder(): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // authentication (apiLoginAuth) required
        if (this.configuration.apiKeys["X-API-LOGIN"]) {
            headers['X-API-LOGIN'] = this.configuration.apiKeys["X-API-LOGIN"];
        }

        // authentication (apiPasswordAuth) required
        if (this.configuration.apiKeys["X-API-PASS"]) {
            headers['X-API-PASS'] = this.configuration.apiKeys["X-API-PASS"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<any>(`${this.basePath}/mail/order`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id User ID
     * @param searchString pass an optional search string for looking up inventory
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, ): Observable<AxiosResponse<Array<MailLog>>>;
    public viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling viewMailLogById.');
        }




        let queryParameters = {};   
        if (searchString !== undefined && searchString !== null) {
            queryParameters['searchString'] = <any>searchString;
        }
        if (skip !== undefined && skip !== null) {
            queryParameters['skip'] = <any>skip;
        }
        if (limit !== undefined && limit !== null) {
            queryParameters['limit'] = <any>limit;
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys["X-API-KEY"]) {
            headers['X-API-KEY'] = this.configuration.apiKeys["X-API-KEY"];
        }

        // authentication (apiLoginAuth) required
        if (this.configuration.apiKeys["X-API-LOGIN"]) {
            headers['X-API-LOGIN'] = this.configuration.apiKeys["X-API-LOGIN"];
        }

        // authentication (apiPasswordAuth) required
        if (this.configuration.apiKeys["X-API-PASS"]) {
            headers['X-API-PASS'] = this.configuration.apiKeys["X-API-PASS"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<MailLog>>(`${this.basePath}/mail/${encodeURIComponent(String(id))}/log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}

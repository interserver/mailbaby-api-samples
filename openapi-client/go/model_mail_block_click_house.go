/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MailBlockClickHouse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailBlockClickHouse{}

// MailBlockClickHouse A block entry from the clickhouse mailblocks server.
type MailBlockClickHouse struct {
	Date string `json:"date"`
	From string `json:"from"`
	MessageId string `json:"messageId"`
	Subject string `json:"subject"`
	To string `json:"to"`
}

// NewMailBlockClickHouse instantiates a new MailBlockClickHouse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailBlockClickHouse(date string, from string, messageId string, subject string, to string) *MailBlockClickHouse {
	this := MailBlockClickHouse{}
	this.Date = date
	this.From = from
	this.MessageId = messageId
	this.Subject = subject
	this.To = to
	return &this
}

// NewMailBlockClickHouseWithDefaults instantiates a new MailBlockClickHouse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailBlockClickHouseWithDefaults() *MailBlockClickHouse {
	this := MailBlockClickHouse{}
	return &this
}

// GetDate returns the Date field value
func (o *MailBlockClickHouse) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *MailBlockClickHouse) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *MailBlockClickHouse) SetDate(v string) {
	o.Date = v
}

// GetFrom returns the From field value
func (o *MailBlockClickHouse) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *MailBlockClickHouse) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *MailBlockClickHouse) SetFrom(v string) {
	o.From = v
}

// GetMessageId returns the MessageId field value
func (o *MailBlockClickHouse) GetMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *MailBlockClickHouse) GetMessageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *MailBlockClickHouse) SetMessageId(v string) {
	o.MessageId = v
}

// GetSubject returns the Subject field value
func (o *MailBlockClickHouse) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *MailBlockClickHouse) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *MailBlockClickHouse) SetSubject(v string) {
	o.Subject = v
}

// GetTo returns the To field value
func (o *MailBlockClickHouse) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *MailBlockClickHouse) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *MailBlockClickHouse) SetTo(v string) {
	o.To = v
}

func (o MailBlockClickHouse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailBlockClickHouse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["from"] = o.From
	toSerialize["messageId"] = o.MessageId
	toSerialize["subject"] = o.Subject
	toSerialize["to"] = o.To
	return toSerialize, nil
}

type NullableMailBlockClickHouse struct {
	value *MailBlockClickHouse
	isSet bool
}

func (v NullableMailBlockClickHouse) Get() *MailBlockClickHouse {
	return v.value
}

func (v *NullableMailBlockClickHouse) Set(val *MailBlockClickHouse) {
	v.value = val
	v.isSet = true
}

func (v NullableMailBlockClickHouse) IsSet() bool {
	return v.isSet
}

func (v *NullableMailBlockClickHouse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailBlockClickHouse(val *MailBlockClickHouse) *NullableMailBlockClickHouse {
	return &NullableMailBlockClickHouse{value: val, isSet: true}
}

func (v NullableMailBlockClickHouse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailBlockClickHouse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



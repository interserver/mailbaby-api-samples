# coding: utf-8

"""
    MailBaby Email Delivery API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.   # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: support@interserver.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MailLogEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'id': 'str',
        '_from': 'str',
        'to': 'str',
        'subject': 'str',
        'message_id': 'str',
        'created': 'str',
        'time': 'int',
        'user': 'str',
        'transtype': 'str',
        'transhost': 'str',
        'originhost': 'str',
        'origin': 'str',
        'interface': 'str',
        '_date': 'str',
        'sending_zone': 'str',
        'body_size': 'int',
        'source_md5': 'str',
        'seq': 'int',
        'domain': 'str',
        'recipient': 'str',
        'locked': 'int',
        'lock_time': 'int',
        'assigned': 'str',
        'queued': 'str',
        'lock': 'str',
        'logger': 'str',
        'mx_port': 'int',
        'connection_key': 'str',
        'mx_hostname': 'str',
        'sent_body_hash': 'str',
        'sent_body_size': 'int',
        'md5_match': 'int'
    }

    attribute_map = {
        'id': '_id',
        'id': 'id',
        '_from': 'from',
        'to': 'to',
        'subject': 'subject',
        'message_id': 'messageId',
        'created': 'created',
        'time': 'time',
        'user': 'user',
        'transtype': 'transtype',
        'transhost': 'transhost',
        'originhost': 'originhost',
        'origin': 'origin',
        'interface': 'interface',
        '_date': 'date',
        'sending_zone': 'sendingZone',
        'body_size': 'bodySize',
        'source_md5': 'sourceMd5',
        'seq': 'seq',
        'domain': 'domain',
        'recipient': 'recipient',
        'locked': 'locked',
        'lock_time': 'lockTime',
        'assigned': 'assigned',
        'queued': 'queued',
        'lock': '_lock',
        'logger': 'logger',
        'mx_port': 'mxPort',
        'connection_key': 'connectionKey',
        'mx_hostname': 'mxHostname',
        'sent_body_hash': 'sentBodyHash',
        'sent_body_size': 'sentBodySize',
        'md5_match': 'md5Match'
    }

    def __init__(self, id=None, id=None, _from=None, to=None, subject=None, message_id=None, created=None, time=None, user=None, transtype=None, transhost=None, originhost=None, origin=None, interface=None, _date=None, sending_zone=None, body_size=None, source_md5=None, seq=None, domain=None, recipient=None, locked=None, lock_time=None, assigned=None, queued=None, lock=None, logger=None, mx_port=None, connection_key=None, mx_hostname=None, sent_body_hash=None, sent_body_size=None, md5_match=None):  # noqa: E501
        """MailLogEntry - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._id = None
        self.__from = None
        self._to = None
        self._subject = None
        self._message_id = None
        self._created = None
        self._time = None
        self._user = None
        self._transtype = None
        self._transhost = None
        self._originhost = None
        self._origin = None
        self._interface = None
        self.__date = None
        self._sending_zone = None
        self._body_size = None
        self._source_md5 = None
        self._seq = None
        self._domain = None
        self._recipient = None
        self._locked = None
        self._lock_time = None
        self._assigned = None
        self._queued = None
        self._lock = None
        self._logger = None
        self._mx_port = None
        self._connection_key = None
        self._mx_hostname = None
        self._sent_body_hash = None
        self._sent_body_size = None
        self._md5_match = None
        self.discriminator = None
        self.id = id
        self.id = id
        self._from = _from
        self.to = to
        self.subject = subject
        self.message_id = message_id
        self.created = created
        self.time = time
        self.user = user
        self.transtype = transtype
        self.transhost = transhost
        self.originhost = originhost
        self.origin = origin
        self.interface = interface
        self._date = _date
        self.sending_zone = sending_zone
        self.body_size = body_size
        self.source_md5 = source_md5
        self.seq = seq
        self.domain = domain
        self.recipient = recipient
        self.locked = locked
        self.lock_time = lock_time
        self.assigned = assigned
        self.queued = queued
        self.lock = lock
        self.logger = logger
        self.mx_port = mx_port
        self.connection_key = connection_key
        self.mx_hostname = mx_hostname
        self.sent_body_hash = sent_body_hash
        self.sent_body_size = sent_body_size
        self.md5_match = md5_match

    @property
    def id(self):
        """Gets the id of this MailLogEntry.  # noqa: E501

        internal db id  # noqa: E501

        :return: The id of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MailLogEntry.

        internal db id  # noqa: E501

        :param id: The id of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id(self):
        """Gets the id of this MailLogEntry.  # noqa: E501

        mail id  # noqa: E501

        :return: The id of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MailLogEntry.

        mail id  # noqa: E501

        :param id: The id of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _from(self):
        """Gets the _from of this MailLogEntry.  # noqa: E501

        from address  # noqa: E501

        :return: The _from of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this MailLogEntry.

        from address  # noqa: E501

        :param _from: The _from of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this MailLogEntry.  # noqa: E501

        to address  # noqa: E501

        :return: The to of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this MailLogEntry.

        to address  # noqa: E501

        :param to: The to of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def subject(self):
        """Gets the subject of this MailLogEntry.  # noqa: E501

        email subject  # noqa: E501

        :return: The subject of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MailLogEntry.

        email subject  # noqa: E501

        :param subject: The subject of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def message_id(self):
        """Gets the message_id of this MailLogEntry.  # noqa: E501

        message id  # noqa: E501

        :return: The message_id of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this MailLogEntry.

        message id  # noqa: E501

        :param message_id: The message_id of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def created(self):
        """Gets the created of this MailLogEntry.  # noqa: E501

        creation date  # noqa: E501

        :return: The created of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MailLogEntry.

        creation date  # noqa: E501

        :param created: The created of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def time(self):
        """Gets the time of this MailLogEntry.  # noqa: E501

        creation timestamp  # noqa: E501

        :return: The time of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MailLogEntry.

        creation timestamp  # noqa: E501

        :param time: The time of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def user(self):
        """Gets the user of this MailLogEntry.  # noqa: E501

        user account  # noqa: E501

        :return: The user of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MailLogEntry.

        user account  # noqa: E501

        :param user: The user of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def transtype(self):
        """Gets the transtype of this MailLogEntry.  # noqa: E501

        transaction type  # noqa: E501

        :return: The transtype of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._transtype

    @transtype.setter
    def transtype(self, transtype):
        """Sets the transtype of this MailLogEntry.

        transaction type  # noqa: E501

        :param transtype: The transtype of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if transtype is None:
            raise ValueError("Invalid value for `transtype`, must not be `None`")  # noqa: E501

        self._transtype = transtype

    @property
    def transhost(self):
        """Gets the transhost of this MailLogEntry.  # noqa: E501

        transaction host  # noqa: E501

        :return: The transhost of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._transhost

    @transhost.setter
    def transhost(self, transhost):
        """Sets the transhost of this MailLogEntry.

        transaction host  # noqa: E501

        :param transhost: The transhost of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if transhost is None:
            raise ValueError("Invalid value for `transhost`, must not be `None`")  # noqa: E501

        self._transhost = transhost

    @property
    def originhost(self):
        """Gets the originhost of this MailLogEntry.  # noqa: E501

        origin host  # noqa: E501

        :return: The originhost of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._originhost

    @originhost.setter
    def originhost(self, originhost):
        """Sets the originhost of this MailLogEntry.

        origin host  # noqa: E501

        :param originhost: The originhost of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if originhost is None:
            raise ValueError("Invalid value for `originhost`, must not be `None`")  # noqa: E501

        self._originhost = originhost

    @property
    def origin(self):
        """Gets the origin of this MailLogEntry.  # noqa: E501

        origin ip  # noqa: E501

        :return: The origin of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this MailLogEntry.

        origin ip  # noqa: E501

        :param origin: The origin of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def interface(self):
        """Gets the interface of this MailLogEntry.  # noqa: E501

        interface name  # noqa: E501

        :return: The interface of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this MailLogEntry.

        interface name  # noqa: E501

        :param interface: The interface of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def _date(self):
        """Gets the _date of this MailLogEntry.  # noqa: E501

        date processed  # noqa: E501

        :return: The _date of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MailLogEntry.

        date processed  # noqa: E501

        :param _date: The _date of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def sending_zone(self):
        """Gets the sending_zone of this MailLogEntry.  # noqa: E501

        sending zone  # noqa: E501

        :return: The sending_zone of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._sending_zone

    @sending_zone.setter
    def sending_zone(self, sending_zone):
        """Sets the sending_zone of this MailLogEntry.

        sending zone  # noqa: E501

        :param sending_zone: The sending_zone of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if sending_zone is None:
            raise ValueError("Invalid value for `sending_zone`, must not be `None`")  # noqa: E501

        self._sending_zone = sending_zone

    @property
    def body_size(self):
        """Gets the body_size of this MailLogEntry.  # noqa: E501

        email body size in bytes  # noqa: E501

        :return: The body_size of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._body_size

    @body_size.setter
    def body_size(self, body_size):
        """Sets the body_size of this MailLogEntry.

        email body size in bytes  # noqa: E501

        :param body_size: The body_size of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if body_size is None:
            raise ValueError("Invalid value for `body_size`, must not be `None`")  # noqa: E501

        self._body_size = body_size

    @property
    def source_md5(self):
        """Gets the source_md5 of this MailLogEntry.  # noqa: E501

        md5 sum of the email  # noqa: E501

        :return: The source_md5 of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._source_md5

    @source_md5.setter
    def source_md5(self, source_md5):
        """Sets the source_md5 of this MailLogEntry.

        md5 sum of the email  # noqa: E501

        :param source_md5: The source_md5 of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if source_md5 is None:
            raise ValueError("Invalid value for `source_md5`, must not be `None`")  # noqa: E501

        self._source_md5 = source_md5

    @property
    def seq(self):
        """Gets the seq of this MailLogEntry.  # noqa: E501

        delivery sequency  # noqa: E501

        :return: The seq of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq):
        """Sets the seq of this MailLogEntry.

        delivery sequency  # noqa: E501

        :param seq: The seq of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if seq is None:
            raise ValueError("Invalid value for `seq`, must not be `None`")  # noqa: E501

        self._seq = seq

    @property
    def domain(self):
        """Gets the domain of this MailLogEntry.  # noqa: E501

        to address domain  # noqa: E501

        :return: The domain of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this MailLogEntry.

        to address domain  # noqa: E501

        :param domain: The domain of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def recipient(self):
        """Gets the recipient of this MailLogEntry.  # noqa: E501

        email receiver address  # noqa: E501

        :return: The recipient of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this MailLogEntry.

        email receiver address  # noqa: E501

        :param recipient: The recipient of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def locked(self):
        """Gets the locked of this MailLogEntry.  # noqa: E501

        locked status  # noqa: E501

        :return: The locked of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this MailLogEntry.

        locked status  # noqa: E501

        :param locked: The locked of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    @property
    def lock_time(self):
        """Gets the lock_time of this MailLogEntry.  # noqa: E501

        lock timestamp  # noqa: E501

        :return: The lock_time of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._lock_time

    @lock_time.setter
    def lock_time(self, lock_time):
        """Sets the lock_time of this MailLogEntry.

        lock timestamp  # noqa: E501

        :param lock_time: The lock_time of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if lock_time is None:
            raise ValueError("Invalid value for `lock_time`, must not be `None`")  # noqa: E501

        self._lock_time = lock_time

    @property
    def assigned(self):
        """Gets the assigned of this MailLogEntry.  # noqa: E501

        assigned server  # noqa: E501

        :return: The assigned of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned):
        """Sets the assigned of this MailLogEntry.

        assigned server  # noqa: E501

        :param assigned: The assigned of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if assigned is None:
            raise ValueError("Invalid value for `assigned`, must not be `None`")  # noqa: E501

        self._assigned = assigned

    @property
    def queued(self):
        """Gets the queued of this MailLogEntry.  # noqa: E501

        queued timestamp  # noqa: E501

        :return: The queued of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this MailLogEntry.

        queued timestamp  # noqa: E501

        :param queued: The queued of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if queued is None:
            raise ValueError("Invalid value for `queued`, must not be `None`")  # noqa: E501

        self._queued = queued

    @property
    def lock(self):
        """Gets the lock of this MailLogEntry.  # noqa: E501

        lock id  # noqa: E501

        :return: The lock of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._lock

    @lock.setter
    def lock(self, lock):
        """Sets the lock of this MailLogEntry.

        lock id  # noqa: E501

        :param lock: The lock of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if lock is None:
            raise ValueError("Invalid value for `lock`, must not be `None`")  # noqa: E501

        self._lock = lock

    @property
    def logger(self):
        """Gets the logger of this MailLogEntry.  # noqa: E501

        logger  # noqa: E501

        :return: The logger of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._logger

    @logger.setter
    def logger(self, logger):
        """Sets the logger of this MailLogEntry.

        logger  # noqa: E501

        :param logger: The logger of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if logger is None:
            raise ValueError("Invalid value for `logger`, must not be `None`")  # noqa: E501

        self._logger = logger

    @property
    def mx_port(self):
        """Gets the mx_port of this MailLogEntry.  # noqa: E501

        mx port number  # noqa: E501

        :return: The mx_port of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._mx_port

    @mx_port.setter
    def mx_port(self, mx_port):
        """Sets the mx_port of this MailLogEntry.

        mx port number  # noqa: E501

        :param mx_port: The mx_port of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if mx_port is None:
            raise ValueError("Invalid value for `mx_port`, must not be `None`")  # noqa: E501

        self._mx_port = mx_port

    @property
    def connection_key(self):
        """Gets the connection_key of this MailLogEntry.  # noqa: E501

        connection key  # noqa: E501

        :return: The connection_key of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._connection_key

    @connection_key.setter
    def connection_key(self, connection_key):
        """Sets the connection_key of this MailLogEntry.

        connection key  # noqa: E501

        :param connection_key: The connection_key of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if connection_key is None:
            raise ValueError("Invalid value for `connection_key`, must not be `None`")  # noqa: E501

        self._connection_key = connection_key

    @property
    def mx_hostname(self):
        """Gets the mx_hostname of this MailLogEntry.  # noqa: E501

        mx hostname  # noqa: E501

        :return: The mx_hostname of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._mx_hostname

    @mx_hostname.setter
    def mx_hostname(self, mx_hostname):
        """Sets the mx_hostname of this MailLogEntry.

        mx hostname  # noqa: E501

        :param mx_hostname: The mx_hostname of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if mx_hostname is None:
            raise ValueError("Invalid value for `mx_hostname`, must not be `None`")  # noqa: E501

        self._mx_hostname = mx_hostname

    @property
    def sent_body_hash(self):
        """Gets the sent_body_hash of this MailLogEntry.  # noqa: E501

        body hash  # noqa: E501

        :return: The sent_body_hash of this MailLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._sent_body_hash

    @sent_body_hash.setter
    def sent_body_hash(self, sent_body_hash):
        """Sets the sent_body_hash of this MailLogEntry.

        body hash  # noqa: E501

        :param sent_body_hash: The sent_body_hash of this MailLogEntry.  # noqa: E501
        :type: str
        """
        if sent_body_hash is None:
            raise ValueError("Invalid value for `sent_body_hash`, must not be `None`")  # noqa: E501

        self._sent_body_hash = sent_body_hash

    @property
    def sent_body_size(self):
        """Gets the sent_body_size of this MailLogEntry.  # noqa: E501

        sent body size in bytes  # noqa: E501

        :return: The sent_body_size of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._sent_body_size

    @sent_body_size.setter
    def sent_body_size(self, sent_body_size):
        """Sets the sent_body_size of this MailLogEntry.

        sent body size in bytes  # noqa: E501

        :param sent_body_size: The sent_body_size of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if sent_body_size is None:
            raise ValueError("Invalid value for `sent_body_size`, must not be `None`")  # noqa: E501

        self._sent_body_size = sent_body_size

    @property
    def md5_match(self):
        """Gets the md5_match of this MailLogEntry.  # noqa: E501

        md5 checksum matching result  # noqa: E501

        :return: The md5_match of this MailLogEntry.  # noqa: E501
        :rtype: int
        """
        return self._md5_match

    @md5_match.setter
    def md5_match(self, md5_match):
        """Sets the md5_match of this MailLogEntry.

        md5 checksum matching result  # noqa: E501

        :param md5_match: The md5_match of this MailLogEntry.  # noqa: E501
        :type: int
        """
        if md5_match is None:
            raise ValueError("Invalid value for `md5_match`, must not be `None`")  # noqa: E501

        self._md5_match = md5_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailLogEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailLogEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

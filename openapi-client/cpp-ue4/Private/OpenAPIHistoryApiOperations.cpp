/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIHistoryApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIHistoryApi::GetStatsRequest::TimeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIHistoryApi::GetStatsRequest::TimeEnum::All:
		return TEXT("all");
	case OpenAPIHistoryApi::GetStatsRequest::TimeEnum::Billing:
		return TEXT("billing");
	case OpenAPIHistoryApi::GetStatsRequest::TimeEnum::Month:
		return TEXT("month");
	case OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_7d:
		return TEXT("7d");
	case OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_24h:
		return TEXT("24h");
	case OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_1d:
		return TEXT("1d");
	case OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_1h:
		return TEXT("1h");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIHistoryApi::GetStatsRequest::TimeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIHistoryApi::GetStatsRequest::EnumToString(const OpenAPIHistoryApi::GetStatsRequest::TimeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIHistoryApi::GetStatsRequest::TimeEnum& Value)
{
	static TMap<FString, OpenAPIHistoryApi::GetStatsRequest::TimeEnum> StringToEnum = { 
		{ TEXT("all"), OpenAPIHistoryApi::GetStatsRequest::TimeEnum::All },
		{ TEXT("billing"), OpenAPIHistoryApi::GetStatsRequest::TimeEnum::Billing },
		{ TEXT("month"), OpenAPIHistoryApi::GetStatsRequest::TimeEnum::Month },
		{ TEXT("7d"), OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_7d },
		{ TEXT("24h"), OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_24h },
		{ TEXT("1d"), OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_1d },
		{ TEXT("1h"), OpenAPIHistoryApi::GetStatsRequest::TimeEnum::_1h }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIHistoryApi::GetStatsRequest::EnumFromString(const FString& EnumAsString, OpenAPIHistoryApi::GetStatsRequest::TimeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIHistoryApi::GetStatsRequest::TimeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIHistoryApi::GetStatsRequest::TimeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIHistoryApi::GetStatsRequest::ComputePath() const
{
	FString Path(TEXT("/mail/stats"));
	TArray<FString> QueryParams;
	if(Time.IsSet())
	{
		QueryParams.Add(FString(TEXT("time=")) + ToUrlString(Time.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIHistoryApi::GetStatsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIHistoryApi::GetStatsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorized"));
		break;
	case 404:
		SetResponseString(TEXT("Unauthorized"));
		break;
	}
}

bool OpenAPIHistoryApi::GetStatsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum& Value)
{
	switch (Value)
	{
	case OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum::_0:
		return TEXT("0");
	case OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum::_1:
		return TEXT("1");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIHistoryApi::ViewMailLogRequest::EnumToString(const OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum& Value)
{
	static TMap<FString, OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum> StringToEnum = { 
		{ TEXT("0"), OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum::_0 },
		{ TEXT("1"), OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum::_1 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIHistoryApi::ViewMailLogRequest::EnumFromString(const FString& EnumAsString, OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIHistoryApi::ViewMailLogRequest::DeliveredEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIHistoryApi::ViewMailLogRequest::ComputePath() const
{
	FString Path(TEXT("/mail/log"));
	TArray<FString> QueryParams;
	if(Id.IsSet())
	{
		QueryParams.Add(FString(TEXT("id=")) + ToUrlString(Id.GetValue()));
	}
	if(Origin.IsSet())
	{
		QueryParams.Add(FString(TEXT("origin=")) + ToUrlString(Origin.GetValue()));
	}
	if(Mx.IsSet())
	{
		QueryParams.Add(FString(TEXT("mx=")) + ToUrlString(Mx.GetValue()));
	}
	if(From.IsSet())
	{
		QueryParams.Add(FString(TEXT("from=")) + ToUrlString(From.GetValue()));
	}
	if(To.IsSet())
	{
		QueryParams.Add(FString(TEXT("to=")) + ToUrlString(To.GetValue()));
	}
	if(Subject.IsSet())
	{
		QueryParams.Add(FString(TEXT("subject=")) + ToUrlString(Subject.GetValue()));
	}
	if(Mailid.IsSet())
	{
		QueryParams.Add(FString(TEXT("mailid=")) + ToUrlString(Mailid.GetValue()));
	}
	if(Skip.IsSet())
	{
		QueryParams.Add(FString(TEXT("skip=")) + ToUrlString(Skip.GetValue()));
	}
	if(Limit.IsSet())
	{
		QueryParams.Add(FString(TEXT("limit=")) + ToUrlString(Limit.GetValue()));
	}
	if(StartDate.IsSet())
	{
		QueryParams.Add(FString(TEXT("startDate=")) + ToUrlString(StartDate.GetValue()));
	}
	if(EndDate.IsSet())
	{
		QueryParams.Add(FString(TEXT("endDate=")) + ToUrlString(EndDate.GetValue()));
	}
	if(Replyto.IsSet())
	{
		QueryParams.Add(FString(TEXT("replyto=")) + ToUrlString(Replyto.GetValue()));
	}
	if(Headerfrom.IsSet())
	{
		QueryParams.Add(FString(TEXT("headerfrom=")) + ToUrlString(Headerfrom.GetValue()));
	}
	if(Delivered.IsSet())
	{
		QueryParams.Add(FString(TEXT("delivered=")) + ToUrlString(Delivered.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIHistoryApi::ViewMailLogRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIHistoryApi::ViewMailLogResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("search results matching criteria"));
		break;
	case 400:
		SetResponseString(TEXT("bad input parameter"));
		break;
	}
}

bool OpenAPIHistoryApi::ViewMailLogResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}

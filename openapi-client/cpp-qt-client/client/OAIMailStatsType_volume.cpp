/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMailStatsType_volume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMailStatsType_volume::OAIMailStatsType_volume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMailStatsType_volume::OAIMailStatsType_volume() {
    this->initializeModel();
}

OAIMailStatsType_volume::~OAIMailStatsType_volume() {}

void OAIMailStatsType_volume::initializeModel() {

    m_to_isSet = false;
    m_to_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;
}

void OAIMailStatsType_volume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMailStatsType_volume::fromJsonObject(QJsonObject json) {

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;
}

QString OAIMailStatsType_volume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMailStatsType_volume::asJsonObject() const {
    QJsonObject obj;
    if (m_to.isSet()) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_ip.isSet()) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    return obj;
}

OAIMailStatsType_volume_to OAIMailStatsType_volume::getTo() const {
    return m_to;
}
void OAIMailStatsType_volume::setTo(const OAIMailStatsType_volume_to &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIMailStatsType_volume::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMailStatsType_volume::is_to_Valid() const{
    return m_to_isValid;
}

OAIMailStatsType_volume_from OAIMailStatsType_volume::getFrom() const {
    return m_from;
}
void OAIMailStatsType_volume::setFrom(const OAIMailStatsType_volume_from &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIMailStatsType_volume::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMailStatsType_volume::is_from_Valid() const{
    return m_from_isValid;
}

OAIMailStatsType_volume_ip OAIMailStatsType_volume::getIp() const {
    return m_ip;
}
void OAIMailStatsType_volume::setIp(const OAIMailStatsType_volume_ip &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIMailStatsType_volume::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIMailStatsType_volume::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAIMailStatsType_volume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMailStatsType_volume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

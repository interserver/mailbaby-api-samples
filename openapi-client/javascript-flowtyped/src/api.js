// @flow
/* eslint-disable no-use-before-define */
/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://api.mailbaby.net".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type GenericResponse = {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    text?: string;
}

/**
 * 
 * @export
 */
export type GetMailOrders200ResponseInner = {
    /**
     * 
     * @type {number}
     * @memberof GetMailOrders200ResponseInner
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders200ResponseInner
     */
    comment?: string;
}

/**
 * 
 * @export
 */
export type GetMailOrders401Response = {
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders401Response
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof GetMailOrders401Response
     */
    message: string;
}

/**
 * Mail log records
 * @export
 */
export type MailLog = {
    /**
     * total number of mail log entries
     * @type {number}
     * @memberof MailLog
     */
    total: number;
    /**
     * number of emails skipped in listing
     * @type {number}
     * @memberof MailLog
     */
    skip: number;
    /**
     * number of emails to return
     * @type {number}
     * @memberof MailLog
     */
    limit: number;
    /**
     * 
     * @type {Array<MailLogEntry>}
     * @memberof MailLog
     */
    emails: Array<MailLogEntry>;
}

/**
 * An email record
 * @export
 */
export type MailLogEntry = {
    /**
     * internal db id
     * @type {number}
     * @memberof MailLogEntry
     */
    _id: number;
    /**
     * mail id
     * @type {string}
     * @memberof MailLogEntry
     */
    id: string;
    /**
     * from address
     * @type {string}
     * @memberof MailLogEntry
     */
    from: string;
    /**
     * to address
     * @type {string}
     * @memberof MailLogEntry
     */
    to: string;
    /**
     * email subject
     * @type {string}
     * @memberof MailLogEntry
     */
    subject: string;
    /**
     * message id
     * @type {string}
     * @memberof MailLogEntry
     */
    messageId: string;
    /**
     * creation date
     * @type {string}
     * @memberof MailLogEntry
     */
    created: string;
    /**
     * creation timestamp
     * @type {number}
     * @memberof MailLogEntry
     */
    time: number;
    /**
     * user account
     * @type {string}
     * @memberof MailLogEntry
     */
    user: string;
    /**
     * transaction type
     * @type {string}
     * @memberof MailLogEntry
     */
    transtype: string;
    /**
     * transaction host
     * @type {string}
     * @memberof MailLogEntry
     */
    transhost: string;
    /**
     * origin host
     * @type {string}
     * @memberof MailLogEntry
     */
    originhost: string;
    /**
     * origin ip
     * @type {string}
     * @memberof MailLogEntry
     */
    origin: string;
    /**
     * interface name
     * @type {string}
     * @memberof MailLogEntry
     */
    _interface: string;
    /**
     * date processed
     * @type {string}
     * @memberof MailLogEntry
     */
    _date: string;
    /**
     * sending zone
     * @type {string}
     * @memberof MailLogEntry
     */
    sendingZone: string;
    /**
     * email body size in bytes
     * @type {number}
     * @memberof MailLogEntry
     */
    bodySize: number;
    /**
     * md5 sum of the email
     * @type {string}
     * @memberof MailLogEntry
     */
    sourceMd5: string;
    /**
     * delivery sequency
     * @type {number}
     * @memberof MailLogEntry
     */
    seq: number;
    /**
     * to address domain
     * @type {string}
     * @memberof MailLogEntry
     */
    domain: string;
    /**
     * email receiver address
     * @type {string}
     * @memberof MailLogEntry
     */
    recipient: string;
    /**
     * locked status
     * @type {number}
     * @memberof MailLogEntry
     */
    locked: number;
    /**
     * lock timestamp
     * @type {number}
     * @memberof MailLogEntry
     */
    lockTime: number;
    /**
     * assigned server
     * @type {string}
     * @memberof MailLogEntry
     */
    assigned: string;
    /**
     * queued timestamp
     * @type {string}
     * @memberof MailLogEntry
     */
    queued: string;
    /**
     * lock id
     * @type {string}
     * @memberof MailLogEntry
     */
    _lock: string;
    /**
     * logger
     * @type {string}
     * @memberof MailLogEntry
     */
    logger: string;
    /**
     * mx port number
     * @type {number}
     * @memberof MailLogEntry
     */
    mxPort: number;
    /**
     * connection key
     * @type {string}
     * @memberof MailLogEntry
     */
    connectionKey: string;
    /**
     * mx hostname
     * @type {string}
     * @memberof MailLogEntry
     */
    mxHostname: string;
    /**
     * body hash
     * @type {string}
     * @memberof MailLogEntry
     */
    sentBodyHash: string;
    /**
     * sent body size in bytes
     * @type {number}
     * @memberof MailLogEntry
     */
    sentBodySize: number;
    /**
     * md5 checksum matching result
     * @type {number}
     * @memberof MailLogEntry
     */
    md5Match: number;
}

/**
 * Details for an Email
 * @export
 */
export type SendMail = {
    /**
     * The Contact whom is the primary recipient of this email.
     * @type {string}
     * @memberof SendMail
     */
    to: string;
    /**
     * The contact whom is the this email is from.
     * @type {string}
     * @memberof SendMail
     */
    from: string;
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMail
     */
    subject: string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMail
     */
    body: string;
}

/**
 * Details for an Email
 * @export
 */
export type SendMailAdv = {
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMailAdv
     */
    subject: string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMailAdv
     */
    body: string;
    /**
     * 
     * @type {SendMailAdvFrom}
     * @memberof SendMailAdv
     */
    from: SendMailAdvFrom;
    /**
     * A list of destionation email addresses to send this to
     * @type {Array<SendMailAdvToInner>}
     * @memberof SendMailAdv
     */
    to: Array<SendMailAdvToInner>;
    /**
     * (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
     * @type {Array<SendMailAdvReplytoInner>}
     * @memberof SendMailAdv
     */
    replyto?: Array<SendMailAdvReplytoInner>;
    /**
     * (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
     * @type {Array<SendMailAdvCcInner>}
     * @memberof SendMailAdv
     */
    cc?: Array<SendMailAdvCcInner>;
    /**
     * (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
     * @type {Array<SendMailAdvBccInner>}
     * @memberof SendMailAdv
     */
    bcc?: Array<SendMailAdvBccInner>;
    /**
     * (optional) File attachments to include in the email.  The file contents must be base64 encoded!
     * @type {Array<SendMailAdvAttachmentsInner>}
     * @memberof SendMailAdv
     */
    attachments?: Array<SendMailAdvAttachmentsInner>;
    /**
     * (optional)  ID of the Mail order within our system to use as the Mail Account.
     * @type {number}
     * @memberof SendMailAdv
     */
    id?: number;
}

/**
 * A File attachment for an email
 * @export
 */
export type SendMailAdvAttachmentsInner = {
    /**
     * Contents of the attached file (must be base64 encoded)
     * @type {any}
     * @memberof SendMailAdvAttachmentsInner
     */
    data: any;
    /**
     * (optional) Filename to specify for the attachment.
     * @type {string}
     * @memberof SendMailAdvAttachmentsInner
     */
    filename?: string;
}

/**
 * An Email Contact
 * @export
 */
export type SendMailAdvBccInner = {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvBccInner
     */
    email: string;
    /**
     * (optional) Name to use for the BCC contact.
     * @type {string}
     * @memberof SendMailAdvBccInner
     */
    name?: string;
}

/**
 * An Email Contact
 * @export
 */
export type SendMailAdvCcInner = {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvCcInner
     */
    email: string;
    /**
     * (optional) Name to use for the CC contact.
     * @type {string}
     * @memberof SendMailAdvCcInner
     */
    name?: string;
}

/**
 * The information to use for the From address in the email. from.
 * @export
 */
export type SendMailAdvFrom = {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvFrom
     */
    email: string;
    /**
     * (optional) Name to use for the sending contact.
     * @type {string}
     * @memberof SendMailAdvFrom
     */
    name?: string;
}

/**
 * An Email Contact
 * @export
 */
export type SendMailAdvReplytoInner = {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvReplytoInner
     */
    email: string;
    /**
     * (optional) Name to use for the sending contact.
     * @type {string}
     * @memberof SendMailAdvReplytoInner
     */
    name?: string;
}

/**
 * An Email Contact
 * @export
 */
export type SendMailAdvToInner = {
    /**
     * The email address
     * @type {string}
     * @memberof SendMailAdvToInner
     */
    email: string;
    /**
     * (optional) Name to use for the destination contact.
     * @type {string}
     * @memberof SendMailAdvToInner
     */
    name?: string;
}



/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @throws {RequiredError}
         */
        getMailOrders(options: RequestOptions): FetchArgs {
            const localVarPath = `/mail`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @throws {RequiredError}
         */
        pingServer(options: RequestOptions): FetchArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @throws {RequiredError}
         */
        sendAdvMail(sendMailAdv: SendMailAdv, options: RequestOptions): FetchArgs {
            // verify required parameter 'sendMailAdv' is not null or undefined
            if (sendMailAdv === null || sendMailAdv === undefined) {
                throw new RequiredError('sendMailAdv','Required parameter sendMailAdv was null or undefined when calling sendAdvMail.');
            }
            const localVarPath = `/mail/advsend`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof sendMailAdv !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(sendMailAdv != null ? sendMailAdv : {}) : (((sendMailAdv:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
         * @summary Sends an Email
         * @throws {RequiredError}
         */
        sendMail(to: string, from: string, subject: string, body: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to','Required parameter to was null or undefined when calling sendMail.');
            }
            // verify required parameter 'from' is not null or undefined
            if (from === null || from === undefined) {
                throw new RequiredError('from','Required parameter from was null or undefined when calling sendMail.');
            }
            // verify required parameter 'subject' is not null or undefined
            if (subject === null || subject === undefined) {
                throw new RequiredError('subject','Required parameter subject was null or undefined when calling sendMail.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling sendMail.');
            }
            const localVarPath = `/mail/send`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (to !== undefined) {
                localVarFormParams.set('to', ((to:any):string));
            }

            if (from !== undefined) {
                localVarFormParams.set('from', ((from:any):string));
            }

            if (subject !== undefined) {
                localVarFormParams.set('subject', ((subject:any):string));
            }

            if (body !== undefined) {
                localVarFormParams.set('body', ((body:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @throws {RequiredError}
         */
        viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/mail/log`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("X-API-KEY")
                    : configuration.apiKey;
                localVarHeaderParameter["X-API-KEY"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = ((id:any):string);
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = ((search:any):string);
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = ((skip:any):string);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = ((limit:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):string);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DefaultApiType = { 
    getMailOrders(options?: RequestOptions): Promise<Array<GetMailOrders200ResponseInner>>,

    pingServer(options?: RequestOptions): Promise<Response>,

    sendAdvMail(sendMailAdv: SendMailAdv, options?: RequestOptions): Promise<GenericResponse>,

    sendMail(to: string, from: string, subject: string, body: string, options?: RequestOptions): Promise<GenericResponse>,

    viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, options?: RequestOptions): Promise<MailLog>,
}

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export const DefaultApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DefaultApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @summary displays a list of mail service orders
         * @throws {RequiredError}
         */
        getMailOrders(options?: RequestOptions = {}): Promise<Array<GetMailOrders200ResponseInner>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getMailOrders(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary Checks if the server is running
         * @throws {RequiredError}
         */
        pingServer(options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).pingServer(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @throws {RequiredError}
         */
        sendAdvMail(sendMailAdv: SendMailAdv, options?: RequestOptions = {}): Promise<GenericResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).sendAdvMail(sendMailAdv, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
         * @summary Sends an Email
         * @throws {RequiredError}
         */
        sendMail(to: string, from: string, subject: string, body: string, options?: RequestOptions = {}): Promise<GenericResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).sendMail(to, from, subject, body, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @throws {RequiredError}
         */
        viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, options?: RequestOptions = {}): Promise<MailLog> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).viewMailLog(id, search, skip, limit, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    DefaultApi: DefaultApiType,
 }

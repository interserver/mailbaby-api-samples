/*
 * MailBaby Email Delivery API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// displays a list of mail service orders
        /// </summary>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Unauthorized</response>
        [HttpGet]
        [Route("/mail")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetMailOrders")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<InlineResponse200>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse401), description: "Unauthorized")]
        public virtual IActionResult GetMailOrders()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<InlineResponse200>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse401));
            string exampleJson = null;
            exampleJson = "[ {\n  \"password\" : \"guest123\",\n  \"comment\" : \"main mail account\",\n  \"id\" : 1234,\n  \"status\" : \"active\",\n  \"username\" : \"mb1234\"\n}, {\n  \"password\" : \"guest123\",\n  \"comment\" : \"main mail account\",\n  \"id\" : 1234,\n  \"status\" : \"active\",\n  \"username\" : \"mb1234\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<InlineResponse200>>(exampleJson)
                        : default(List<InlineResponse200>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Checks if the server is running
        /// </summary>
        /// <response code="200">Server is up and running</response>
        /// <response code="0">Something is wrong</response>
        [HttpGet]
        [Route("/ping")]
        [ValidateModelState]
        [SwaggerOperation("PingServer")]
        public virtual IActionResult PingServer()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sends an Email with Advanced Options
        /// </summary>
        /// <remarks>Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.</remarks>
        /// <param name="body"></param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">The specified resource was not found</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/mail/advsend")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SendAdvMail")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenericResponse), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse401), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse401), description: "The specified resource was not found")]
        public virtual IActionResult SendAdvMail([FromBody]SendMailAdv body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenericResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse401));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"The command completed successfully.\",\n  \"status\" : \"ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GenericResponse>(exampleJson)
                        : default(GenericResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sends an Email
        /// </summary>
        /// <remarks>Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. </remarks>
        /// <param name="body"></param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">The specified resource was not found</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/mail/send")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SendMail")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenericResponse), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 400, type: typeof(InlineResponse401), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 401, type: typeof(InlineResponse401), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(InlineResponse401), description: "The specified resource was not found")]
        public virtual IActionResult SendMail([FromBody]SendMail body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenericResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(InlineResponse401));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(InlineResponse401));
            string exampleJson = null;
            exampleJson = "{\n  \"text\" : \"The command completed successfully.\",\n  \"status\" : \"ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GenericResponse>(exampleJson)
                        : default(GenericResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// displays the mail log
        /// </summary>
        /// <remarks>Get a listing of the emails sent through this system </remarks>
        /// <param name="id">The ID of your mail order this will be sent through.</param>
        /// <param name="origin">originating ip address sending mail</param>
        /// <param name="mx">mx record mail was sent to</param>
        /// <param name="from">from email address</param>
        /// <param name="to">to/destination email address</param>
        /// <param name="subject">subject containing this string</param>
        /// <param name="mailid">mail id</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <param name="startDate">earliest date to get emails in unix timestamp format</param>
        /// <param name="endDate">earliest date to get emails in unix timestamp format</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/mail/log")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ViewMailLog")]
        [SwaggerResponse(statusCode: 200, type: typeof(MailLog), description: "search results matching criteria")]
        public virtual IActionResult ViewMailLog([FromQuery]long? id, [FromQuery]string origin, [FromQuery]string mx, [FromQuery]string from, [FromQuery]string to, [FromQuery]string subject, [FromQuery]string mailid, [FromQuery]int? skip, [FromQuery][Range(1, 10000)]int? limit, [FromQuery][Range(0, 9999999999)]long? startDate, [FromQuery][Range(0, 9999999999)]long? endDate)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MailLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"emails\" : [ {\n    \"subject\" : \"sell 0.005 shares\",\n    \"created\" : \"2021-10-14 08:50:10\",\n    \"transtype\" : \"ESMTPSA\",\n    \"origin\" : \"199.231.189.154\",\n    \"queued\" : \"2021-10-14T12:50:15.487Z\",\n    \"messageId\" : \"<vmiLEebsuCbSpUxD7oN3REpaN4VbN6BrdCAbNKIrdAo@relay0.mailbaby.net>\",\n    \"sendingZone\" : \"interserver\",\n    \"mxHostname\" : \"mx.j.is.cc\",\n    \"interface\" : \"feeder\",\n    \"lockTime\" : 1634215818533,\n    \"response\" : \"250 2.0.0 Ok queued as C91D83E128C\",\n    \"domain\" : \"interserver.net\",\n    \"bodySize\" : 63,\n    \"recipient\" : \"client@isp.com\",\n    \"from\" : \"person@mysite.com\",\n    \"assigned\" : \"relay1\",\n    \"_id\" : 103172,\n    \"id\" : \"17c7eda538e0005d03\",\n    \"to\" : \"client@isp.com\",\n    \"time\" : 1634215809,\n    \"locked\" : 1,\n    \"user\" : \"mb5658\",\n    \"seq\" : 1\n  }, {\n    \"subject\" : \"sell 0.005 shares\",\n    \"created\" : \"2021-10-14 08:50:10\",\n    \"transtype\" : \"ESMTPSA\",\n    \"origin\" : \"199.231.189.154\",\n    \"queued\" : \"2021-10-14T12:50:15.487Z\",\n    \"messageId\" : \"<vmiLEebsuCbSpUxD7oN3REpaN4VbN6BrdCAbNKIrdAo@relay0.mailbaby.net>\",\n    \"sendingZone\" : \"interserver\",\n    \"mxHostname\" : \"mx.j.is.cc\",\n    \"interface\" : \"feeder\",\n    \"lockTime\" : 1634215818533,\n    \"response\" : \"250 2.0.0 Ok queued as C91D83E128C\",\n    \"domain\" : \"interserver.net\",\n    \"bodySize\" : 63,\n    \"recipient\" : \"client@isp.com\",\n    \"from\" : \"person@mysite.com\",\n    \"assigned\" : \"relay1\",\n    \"_id\" : 103172,\n    \"id\" : \"17c7eda538e0005d03\",\n    \"to\" : \"client@isp.com\",\n    \"time\" : 1634215809,\n    \"locked\" : 1,\n    \"user\" : \"mb5658\",\n    \"seq\" : 1\n  } ],\n  \"total\" : 10234,\n  \"limit\" : 100,\n  \"skip\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MailLog>(exampleJson)
                        : default(MailLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

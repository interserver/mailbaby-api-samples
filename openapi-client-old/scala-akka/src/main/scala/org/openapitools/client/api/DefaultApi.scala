/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.GenericResponse
import org.openapitools.client.model.InlineResponse401
import org.openapitools.client.model.MailLog
import org.openapitools.client.model.MailOrder
import org.openapitools.client.model.SendMailAdv
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object DefaultApi {

  def apply(baseUrl: String = "https://api.mailbaby.net") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {
  
  /**
   * Expected answers:
   *   code 200 : Seq[MailOrder] (OK)
   *   code 401 : InlineResponse401 (Unauthorized)
   *   code 404 : InlineResponse401 (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getMailOrders()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[MailOrder]] =
    ApiRequest[Seq[MailOrder]](ApiMethods.GET, baseUrl, "/mail", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withSuccessResponse[Seq[MailOrder]](200)
      .withErrorResponse[InlineResponse401](401)
      .withErrorResponse[InlineResponse401](404)
      

  /**
   * Expected answers:
   *   code 200 :  (Server is up and running)
   *   code 0 :  (Something is wrong)
   */
  def pingServer(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/ping", "application/json")
      .withSuccessResponse[Unit](200)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Adds an item to the system
   * 
   * Expected answers:
   *   code 200 :  (list of mail orders)
   *   code 400 : InlineResponse401 (The specified resource was not found)
   *   code 409 : InlineResponse401 (The specified resource was not found)
   *   code 401 : InlineResponse401 (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param mailOrder Inventory item to add
   */
  def placeMailOrder(mailOrder: Option[MailOrder] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/mail/order", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withBody(mailOrder)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[InlineResponse401](400)
      .withErrorResponse[InlineResponse401](409)
      .withErrorResponse[InlineResponse401](401)
      

  /**
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : InlineResponse401 (The specified resource was not found)
   *   code 401 : InlineResponse401 (Unauthorized)
   *   code 404 : InlineResponse401 (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param sendMailAdv 
   */
  def sendAdvMail(sendMailAdv: SendMailAdv)(implicit apiKey: ApiKeyValue): ApiRequest[GenericResponse] =
    ApiRequest[GenericResponse](ApiMethods.POST, baseUrl, "/mail/advsend", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withBody(sendMailAdv)
      .withSuccessResponse[GenericResponse](200)
      .withErrorResponse[InlineResponse401](400)
      .withErrorResponse[InlineResponse401](401)
      .withErrorResponse[InlineResponse401](404)
      

  /**
   * Sends An email through one of your mail orders.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : InlineResponse401 (The specified resource was not found)
   *   code 401 : InlineResponse401 (Unauthorized)
   *   code 404 : InlineResponse401 (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param to The Contact whom is the primary recipient of this email.
   * @param from The contact whom is the this email is from.
   * @param subject The subject or title of the email
   * @param body The main email contents.
   */
  def sendMail(to: String, from: String, subject: String, body: String)(implicit apiKey: ApiKeyValue): ApiRequest[GenericResponse] =
    ApiRequest[GenericResponse](ApiMethods.POST, baseUrl, "/mail/send", "application/x-www-form-urlencoded")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withFormParam("to", to)
      .withFormParam("from", from)
      .withFormParam("subject", subject)
      .withFormParam("body", body)
      .withSuccessResponse[GenericResponse](200)
      .withErrorResponse[InlineResponse401](400)
      .withErrorResponse[InlineResponse401](401)
      .withErrorResponse[InlineResponse401](404)
      

  /**
   * Expected answers:
   *   code 200 :  (list of mail orders)
   *   code 401 : InlineResponse401 (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def validateMailOrder()(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/mail/order", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[InlineResponse401](401)
      

  /**
   * By passing in the appropriate options, you can search for available inventory in the system 
   * 
   * Expected answers:
   *   code 200 : Seq[MailLog] (search results matching criteria)
   *   code 400 :  (bad input parameter)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param id The ID of your mail order this will be sent through.
   * @param searchString pass an optional search string for looking up inventory
   * @param skip number of records to skip for pagination
   * @param limit maximum number of records to return
   */
  def viewMailLog(id: Option[Long] = None, searchString: Option[String] = None, skip: Option[Int] = None, limit: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[MailLog]] =
    ApiRequest[Seq[MailLog]](ApiMethods.GET, baseUrl, "/mail/log", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("searchString", searchString)
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withSuccessResponse[Seq[MailLog]](200)
      .withErrorResponse[Unit](400)
      



}


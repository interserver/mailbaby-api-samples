<?php
/**
 * HistoryApi
 * PHP version 5
 *
 * @category Class
 * @package  Interserver\Mailbaby
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.71
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Interserver\Mailbaby\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Interserver\Mailbaby\ApiException;
use Interserver\Mailbaby\Configuration;
use Interserver\Mailbaby\HeaderSelector;
use Interserver\Mailbaby\ObjectSerializer;

/**
 * HistoryApi Class Doc Comment
 *
 * @category Class
 * @package  Interserver\Mailbaby
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getStats
     *
     * Account usage statistics.
     *
     * @param  string $time The timeframe for the statistics. (optional)
     *
     * @throws \Interserver\Mailbaby\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Interserver\Mailbaby\Model\MailStatsType
     */
    public function getStats($time = null)
    {
        list($response) = $this->getStatsWithHttpInfo($time);
        return $response;
    }

    /**
     * Operation getStatsWithHttpInfo
     *
     * Account usage statistics.
     *
     * @param  string $time The timeframe for the statistics. (optional)
     *
     * @throws \Interserver\Mailbaby\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Interserver\Mailbaby\Model\MailStatsType, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatsWithHttpInfo($time = null)
    {
        $returnType = '\Interserver\Mailbaby\Model\MailStatsType';
        $request = $this->getStatsRequest($time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Interserver\Mailbaby\Model\MailStatsType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Interserver\Mailbaby\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Interserver\Mailbaby\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatsAsync
     *
     * Account usage statistics.
     *
     * @param  string $time The timeframe for the statistics. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsAsync($time = null)
    {
        return $this->getStatsAsyncWithHttpInfo($time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatsAsyncWithHttpInfo
     *
     * Account usage statistics.
     *
     * @param  string $time The timeframe for the statistics. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsAsyncWithHttpInfo($time = null)
    {
        $returnType = '\Interserver\Mailbaby\Model\MailStatsType';
        $request = $this->getStatsRequest($time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStats'
     *
     * @param  string $time The timeframe for the statistics. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatsRequest($time = null)
    {

        $resourcePath = '/mail/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($time !== null) {
            $queryParams['time'] = ObjectSerializer::toQueryValue($time, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewMailLog
     *
     * displays the mail log
     *
     * @param  int $id The ID of your mail order this will be sent through. (optional)
     * @param  string $origin originating ip address sending mail (optional)
     * @param  string $mx mx record mail was sent to (optional)
     * @param  string $from from email address (optional)
     * @param  string $to to/destination email address (optional)
     * @param  string $subject subject containing this string (optional)
     * @param  string $mailid mail id (optional)
     * @param  int $skip number of records to skip for pagination (optional, default to 0)
     * @param  int $limit maximum number of records to return (optional, default to 100)
     * @param  int $startDate earliest date to get emails in unix timestamp format (optional)
     * @param  int $endDate earliest date to get emails in unix timestamp format (optional)
     * @param  string $replyto Reply-To Email Address (optional)
     * @param  string $headerfrom Header From Email Address (optional)
     * @param  string $delivered Limiting the emails to wether or not they were delivered. (optional)
     *
     * @throws \Interserver\Mailbaby\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Interserver\Mailbaby\Model\MailLog
     */
    public function viewMailLog($id = null, $origin = null, $mx = null, $from = null, $to = null, $subject = null, $mailid = null, $skip = '0', $limit = '100', $startDate = null, $endDate = null, $replyto = null, $headerfrom = null, $delivered = null)
    {
        list($response) = $this->viewMailLogWithHttpInfo($id, $origin, $mx, $from, $to, $subject, $mailid, $skip, $limit, $startDate, $endDate, $replyto, $headerfrom, $delivered);
        return $response;
    }

    /**
     * Operation viewMailLogWithHttpInfo
     *
     * displays the mail log
     *
     * @param  int $id The ID of your mail order this will be sent through. (optional)
     * @param  string $origin originating ip address sending mail (optional)
     * @param  string $mx mx record mail was sent to (optional)
     * @param  string $from from email address (optional)
     * @param  string $to to/destination email address (optional)
     * @param  string $subject subject containing this string (optional)
     * @param  string $mailid mail id (optional)
     * @param  int $skip number of records to skip for pagination (optional, default to 0)
     * @param  int $limit maximum number of records to return (optional, default to 100)
     * @param  int $startDate earliest date to get emails in unix timestamp format (optional)
     * @param  int $endDate earliest date to get emails in unix timestamp format (optional)
     * @param  string $replyto Reply-To Email Address (optional)
     * @param  string $headerfrom Header From Email Address (optional)
     * @param  string $delivered Limiting the emails to wether or not they were delivered. (optional)
     *
     * @throws \Interserver\Mailbaby\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Interserver\Mailbaby\Model\MailLog, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewMailLogWithHttpInfo($id = null, $origin = null, $mx = null, $from = null, $to = null, $subject = null, $mailid = null, $skip = '0', $limit = '100', $startDate = null, $endDate = null, $replyto = null, $headerfrom = null, $delivered = null)
    {
        $returnType = '\Interserver\Mailbaby\Model\MailLog';
        $request = $this->viewMailLogRequest($id, $origin, $mx, $from, $to, $subject, $mailid, $skip, $limit, $startDate, $endDate, $replyto, $headerfrom, $delivered);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Interserver\Mailbaby\Model\MailLog',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewMailLogAsync
     *
     * displays the mail log
     *
     * @param  int $id The ID of your mail order this will be sent through. (optional)
     * @param  string $origin originating ip address sending mail (optional)
     * @param  string $mx mx record mail was sent to (optional)
     * @param  string $from from email address (optional)
     * @param  string $to to/destination email address (optional)
     * @param  string $subject subject containing this string (optional)
     * @param  string $mailid mail id (optional)
     * @param  int $skip number of records to skip for pagination (optional, default to 0)
     * @param  int $limit maximum number of records to return (optional, default to 100)
     * @param  int $startDate earliest date to get emails in unix timestamp format (optional)
     * @param  int $endDate earliest date to get emails in unix timestamp format (optional)
     * @param  string $replyto Reply-To Email Address (optional)
     * @param  string $headerfrom Header From Email Address (optional)
     * @param  string $delivered Limiting the emails to wether or not they were delivered. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewMailLogAsync($id = null, $origin = null, $mx = null, $from = null, $to = null, $subject = null, $mailid = null, $skip = '0', $limit = '100', $startDate = null, $endDate = null, $replyto = null, $headerfrom = null, $delivered = null)
    {
        return $this->viewMailLogAsyncWithHttpInfo($id, $origin, $mx, $from, $to, $subject, $mailid, $skip, $limit, $startDate, $endDate, $replyto, $headerfrom, $delivered)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewMailLogAsyncWithHttpInfo
     *
     * displays the mail log
     *
     * @param  int $id The ID of your mail order this will be sent through. (optional)
     * @param  string $origin originating ip address sending mail (optional)
     * @param  string $mx mx record mail was sent to (optional)
     * @param  string $from from email address (optional)
     * @param  string $to to/destination email address (optional)
     * @param  string $subject subject containing this string (optional)
     * @param  string $mailid mail id (optional)
     * @param  int $skip number of records to skip for pagination (optional, default to 0)
     * @param  int $limit maximum number of records to return (optional, default to 100)
     * @param  int $startDate earliest date to get emails in unix timestamp format (optional)
     * @param  int $endDate earliest date to get emails in unix timestamp format (optional)
     * @param  string $replyto Reply-To Email Address (optional)
     * @param  string $headerfrom Header From Email Address (optional)
     * @param  string $delivered Limiting the emails to wether or not they were delivered. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewMailLogAsyncWithHttpInfo($id = null, $origin = null, $mx = null, $from = null, $to = null, $subject = null, $mailid = null, $skip = '0', $limit = '100', $startDate = null, $endDate = null, $replyto = null, $headerfrom = null, $delivered = null)
    {
        $returnType = '\Interserver\Mailbaby\Model\MailLog';
        $request = $this->viewMailLogRequest($id, $origin, $mx, $from, $to, $subject, $mailid, $skip, $limit, $startDate, $endDate, $replyto, $headerfrom, $delivered);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewMailLog'
     *
     * @param  int $id The ID of your mail order this will be sent through. (optional)
     * @param  string $origin originating ip address sending mail (optional)
     * @param  string $mx mx record mail was sent to (optional)
     * @param  string $from from email address (optional)
     * @param  string $to to/destination email address (optional)
     * @param  string $subject subject containing this string (optional)
     * @param  string $mailid mail id (optional)
     * @param  int $skip number of records to skip for pagination (optional, default to 0)
     * @param  int $limit maximum number of records to return (optional, default to 100)
     * @param  int $startDate earliest date to get emails in unix timestamp format (optional)
     * @param  int $endDate earliest date to get emails in unix timestamp format (optional)
     * @param  string $replyto Reply-To Email Address (optional)
     * @param  string $headerfrom Header From Email Address (optional)
     * @param  string $delivered Limiting the emails to wether or not they were delivered. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function viewMailLogRequest($id = null, $origin = null, $mx = null, $from = null, $to = null, $subject = null, $mailid = null, $skip = '0', $limit = '100', $startDate = null, $endDate = null, $replyto = null, $headerfrom = null, $delivered = null)
    {

        $resourcePath = '/mail/log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, 'int64');
        }
        // query params
        if ($origin !== null) {
            $queryParams['origin'] = ObjectSerializer::toQueryValue($origin, null);
        }
        // query params
        if ($mx !== null) {
            $queryParams['mx'] = ObjectSerializer::toQueryValue($mx, null);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to, null);
        }
        // query params
        if ($subject !== null) {
            $queryParams['subject'] = ObjectSerializer::toQueryValue($subject, null);
        }
        // query params
        if ($mailid !== null) {
            $queryParams['mailid'] = ObjectSerializer::toQueryValue($mailid, null);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($startDate !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($startDate, 'int64');
        }
        // query params
        if ($endDate !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($endDate, 'int64');
        }
        // query params
        if ($replyto !== null) {
            $queryParams['replyto'] = ObjectSerializer::toQueryValue($replyto, null);
        }
        // query params
        if ($headerfrom !== null) {
            $queryParams['headerfrom'] = ObjectSerializer::toQueryValue($headerfrom, null);
        }
        // query params
        if ($delivered !== null) {
            $queryParams['delivered'] = ObjectSerializer::toQueryValue($delivered, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

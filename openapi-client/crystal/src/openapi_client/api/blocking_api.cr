# #MailBaby Email Delivery and Management Service API
#
##**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
#
#The version of the OpenAPI document: 1.1.0
#Contact: support@interserver.net
#Generated by: https://openapi-generator.tech
#Generator version: 7.17.0-SNAPSHOT
#

require "uri"

module OpenAPIClient
  class BlockingApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new email deny rule.
    # Adds a new email deny rule into the system to block new emails that match the given criteria
    # @param _type [String] The type of deny rule.
    # @param data [String] The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
    # @return [GenericResponse]
    def add_rule(_type : String, data : String, user : String? = nil)
      data, _status_code, _headers = add_rule_with_http_info(_type, data, user)
      data
    end

    # Creates a new email deny rule.
    # Adds a new email deny rule into the system to block new emails that match the given criteria
    # @param _type [String] The type of deny rule.
    # @param data [String] The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def add_rule_with_http_info(_type : String, data : String, user : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlockingApi.add_rule ..."}
      end
      # verify the required parameter "_type" is set
      if @api_client.config.client_side_validation && _type.nil?
        raise ArgumentError.new("Missing the required parameter '_type' when calling BlockingApi.add_rule")
      end
      # verify enum value
      allowable_values = ["domain", "email", "startswith", "destination"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(_type)
        raise ArgumentError.new("invalid value for \"_type\", must be one of #{allowable_values}")
      end
      # verify the required parameter "data" is set
      if @api_client.config.client_side_validation && data.nil?
        raise ArgumentError.new("Missing the required parameter 'data' when calling BlockingApi.add_rule")
      end
      # resource path
      local_var_path = "/mail/rules"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded", "application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"user"] = user unless user.nil?
      form_params[:"type"] = _type unless _type.nil?
      form_params[:"data"] = data unless data.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GenericResponse"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BlockingApi.add_rule",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlockingApi#add_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenericResponse.from_json(data), status_code, headers
    end

    # Removes an deny mail rule.
    # Removes one of the configured deny mail rules from the system.
    # @param rule_id [Int32] The ID of the Rules entry.
    # @return [GenericResponse]
    def delete_rule(rule_id : Int32)
      data, _status_code, _headers = delete_rule_with_http_info(rule_id)
      data
    end

    # Removes an deny mail rule.
    # Removes one of the configured deny mail rules from the system.
    # @param rule_id [Int32] The ID of the Rules entry.
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def delete_rule_with_http_info(rule_id : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlockingApi.delete_rule ..."}
      end
      # verify the required parameter "rule_id" is set
      if @api_client.config.client_side_validation && rule_id.nil?
        raise ArgumentError.new("Missing the required parameter 'rule_id' when calling BlockingApi.delete_rule")
      end
      # resource path
      local_var_path = "/mail/rules/{ruleId}".sub("{" + "ruleId" + "}", URI.encode_path(rule_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GenericResponse"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"BlockingApi.delete_rule",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlockingApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenericResponse.from_json(data), status_code, headers
    end

    # Removes an email address from the blocked list
    # Removes an email address from the various block lists. 
    # @param body [String] 
    # @return [GenericResponse]
    def delist_block(body : String)
      data, _status_code, _headers = delist_block_with_http_info(body)
      data
    end

    # Removes an email address from the blocked list
    # Removes an email address from the various block lists. 
    # @param body [String] 
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def delist_block_with_http_info(body : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlockingApi.delist_block ..."}
      end
      # verify the required parameter "body" is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError.new("Missing the required parameter 'body' when calling BlockingApi.delist_block")
      end
      # resource path
      local_var_path = "/mail/blocks/delete"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json", "multipart/form-data"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = body.to_json

      # return_type
      return_type = "GenericResponse"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BlockingApi.delist_block",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlockingApi#delist_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenericResponse.from_json(data), status_code, headers
    end

    # displays a list of blocked email addresses
    # @return [MailBlocks]
    def get_mail_blocks()
      data, _status_code, _headers = get_mail_blocks_with_http_info()
      data
    end

    # displays a list of blocked email addresses
    # @return [Array<(MailBlocks, Integer, Hash)>] MailBlocks data, response status code and response headers
    def get_mail_blocks_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: BlockingApi.get_mail_blocks ..."}
      end
      # resource path
      local_var_path = "/mail/blocks"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MailBlocks"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlockingApi.get_mail_blocks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlockingApi#get_mail_blocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MailBlocks.from_json(data), status_code, headers
    end

    # Displays a listing of deny email rules.
    # Returns a listing of all the deny block rules you have configured.
    # @return [Array(DenyRuleRecord)]
    def get_rules()
      data, _status_code, _headers = get_rules_with_http_info()
      data
    end

    # Displays a listing of deny email rules.
    # Returns a listing of all the deny block rules you have configured.
    # @return [Array<(Array(DenyRuleRecord), Integer, Hash)>] Array(DenyRuleRecord) data, response status code and response headers
    def get_rules_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: BlockingApi.get_rules ..."}
      end
      # resource path
      local_var_path = "/mail/rules"

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(DenyRuleRecord)"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlockingApi.get_rules",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlockingApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(DenyRuleRecord).from_json(data), status_code, headers
    end
  end
end

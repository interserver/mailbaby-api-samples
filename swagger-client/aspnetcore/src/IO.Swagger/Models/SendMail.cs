/*
 * Mail Baby API
 *
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Details for an Email
    /// </summary>
    [DataContract]
    public partial class SendMail : IEquatable<SendMail>
    { 
        /// <summary>
        /// The subject or title of the email
        /// </summary>
        /// <value>The subject or title of the email</value>
        [Required]
        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// The main email contents.
        /// </summary>
        /// <value>The main email contents.</value>
        [Required]
        [DataMember(Name="body")]
        public string Body { get; set; }

        /// <summary>
        /// The contact whom is the this email is from.
        /// </summary>
        /// <value>The contact whom is the this email is from.</value>
        [Required]
        [DataMember(Name="from")]
        public List<SendMailFrom> From { get; set; }

        /// <summary>
        /// The Contact whom is the primary recipient of this email.
        /// </summary>
        /// <value>The Contact whom is the primary recipient of this email.</value>
        [Required]
        [DataMember(Name="to")]
        public List<MailContact> To { get; set; }

        /// <summary>
        /// The ID of the Mail order within our system to use as the Mail Account.
        /// </summary>
        /// <value>The ID of the Mail order within our system to use as the Mail Account.</value>
        [Required]
        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
        /// </summary>
        /// <value>Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.</value>
        [DataMember(Name="replyto")]
        public List<MailContact> Replyto { get; set; }

        /// <summary>
        /// Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
        /// </summary>
        /// <value>Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.</value>
        [DataMember(Name="cc")]
        public List<MailContact> Cc { get; set; }

        /// <summary>
        /// Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
        /// </summary>
        /// <value>Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.</value>
        [DataMember(Name="bcc")]
        public List<MailContact> Bcc { get; set; }

        /// <summary>
        /// Optional file attachments to include in the email
        /// </summary>
        /// <value>Optional file attachments to include in the email</value>
        [DataMember(Name="attachments")]
        public List<MailAttachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendMail {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Replyto: ").Append(Replyto).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SendMail)obj);
        }

        /// <summary>
        /// Returns true if SendMail instances are equal
        /// </summary>
        /// <param name="other">Instance of SendMail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMail other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    Body == other.Body ||
                    Body != null &&
                    Body.Equals(other.Body)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    From.SequenceEqual(other.From)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.SequenceEqual(other.To)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Replyto == other.Replyto ||
                    Replyto != null &&
                    Replyto.SequenceEqual(other.Replyto)
                ) && 
                (
                    Cc == other.Cc ||
                    Cc != null &&
                    Cc.SequenceEqual(other.Cc)
                ) && 
                (
                    Bcc == other.Bcc ||
                    Bcc != null &&
                    Bcc.SequenceEqual(other.Bcc)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    Attachments.SequenceEqual(other.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Body != null)
                    hashCode = hashCode * 59 + Body.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Replyto != null)
                    hashCode = hashCode * 59 + Replyto.GetHashCode();
                    if (Cc != null)
                    hashCode = hashCode * 59 + Cc.GetHashCode();
                    if (Bcc != null)
                    hashCode = hashCode * 59 + Bcc.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SendMail left, SendMail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SendMail left, SendMail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

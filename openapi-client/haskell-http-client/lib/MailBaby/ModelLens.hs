{-
   Mail Baby API

   This is an API for accesssing the mail services.

   OpenAPI Version: 3.0.0
   Mail Baby API API version: 1.0.0
   Contact: detain@interserver.net
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : MailBaby.Lens
-}

{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module MailBaby.ModelLens where

import qualified Data.Aeson as A
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Data, Typeable)
import qualified Data.Map as Map
import qualified Data.Set as Set
import qualified Data.Time as TI

import Data.Text (Text)

import Prelude (($), (.),(<$>),(<*>),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

import MailBaby.Model
import MailBaby.Core


-- * Error

-- | 'errorCode' Lens
errorCodeL :: Lens_' Error (Text)
errorCodeL f Error{..} = (\errorCode -> Error { errorCode, ..} ) <$> f errorCode
{-# INLINE errorCodeL #-}

-- | 'errorMessage' Lens
errorMessageL :: Lens_' Error (Text)
errorMessageL f Error{..} = (\errorMessage -> Error { errorMessage, ..} ) <$> f errorMessage
{-# INLINE errorMessageL #-}



-- * GenericResponse

-- | 'genericResponseStatus' Lens
genericResponseStatusL :: Lens_' GenericResponse (Maybe Text)
genericResponseStatusL f GenericResponse{..} = (\genericResponseStatus -> GenericResponse { genericResponseStatus, ..} ) <$> f genericResponseStatus
{-# INLINE genericResponseStatusL #-}

-- | 'genericResponseStatusText' Lens
genericResponseStatusTextL :: Lens_' GenericResponse (Maybe Text)
genericResponseStatusTextL f GenericResponse{..} = (\genericResponseStatusText -> GenericResponse { genericResponseStatusText, ..} ) <$> f genericResponseStatusText
{-# INLINE genericResponseStatusTextL #-}



-- * MailLog

-- | 'mailLogId' Lens
mailLogIdL :: Lens_' MailLog (Maybe Integer)
mailLogIdL f MailLog{..} = (\mailLogId -> MailLog { mailLogId, ..} ) <$> f mailLogId
{-# INLINE mailLogIdL #-}



-- * MailOrder

-- | 'mailOrderId' Lens
mailOrderIdL :: Lens_' MailOrder (Int)
mailOrderIdL f MailOrder{..} = (\mailOrderId -> MailOrder { mailOrderId, ..} ) <$> f mailOrderId
{-# INLINE mailOrderIdL #-}

-- | 'mailOrderStatus' Lens
mailOrderStatusL :: Lens_' MailOrder (Text)
mailOrderStatusL f MailOrder{..} = (\mailOrderStatus -> MailOrder { mailOrderStatus, ..} ) <$> f mailOrderStatus
{-# INLINE mailOrderStatusL #-}

-- | 'mailOrderUsername' Lens
mailOrderUsernameL :: Lens_' MailOrder (Text)
mailOrderUsernameL f MailOrder{..} = (\mailOrderUsername -> MailOrder { mailOrderUsername, ..} ) <$> f mailOrderUsername
{-# INLINE mailOrderUsernameL #-}

-- | 'mailOrderPassword' Lens
mailOrderPasswordL :: Lens_' MailOrder (Maybe Text)
mailOrderPasswordL f MailOrder{..} = (\mailOrderPassword -> MailOrder { mailOrderPassword, ..} ) <$> f mailOrderPassword
{-# INLINE mailOrderPasswordL #-}

-- | 'mailOrderComment' Lens
mailOrderCommentL :: Lens_' MailOrder (Maybe Text)
mailOrderCommentL f MailOrder{..} = (\mailOrderComment -> MailOrder { mailOrderComment, ..} ) <$> f mailOrderComment
{-# INLINE mailOrderCommentL #-}



/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MailAttachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailAttachment{}

// MailAttachment (optional) File attachments to include in the email.  The file contents must be base64
type MailAttachment struct {
	// The filename of the attached file.
	Filename string `json:"filename"`
	// The file contents base64 encoded
	Data string `json:"data"`
}

// NewMailAttachment instantiates a new MailAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailAttachment(filename string, data string) *MailAttachment {
	this := MailAttachment{}
	this.Filename = filename
	this.Data = data
	return &this
}

// NewMailAttachmentWithDefaults instantiates a new MailAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailAttachmentWithDefaults() *MailAttachment {
	this := MailAttachment{}
	return &this
}

// GetFilename returns the Filename field value
func (o *MailAttachment) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *MailAttachment) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *MailAttachment) SetFilename(v string) {
	o.Filename = v
}

// GetData returns the Data field value
func (o *MailAttachment) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MailAttachment) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MailAttachment) SetData(v string) {
	o.Data = v
}

func (o MailAttachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailAttachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableMailAttachment struct {
	value *MailAttachment
	isSet bool
}

func (v NullableMailAttachment) Get() *MailAttachment {
	return v.value
}

func (v *NullableMailAttachment) Set(val *MailAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableMailAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableMailAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailAttachment(val *MailAttachment) *NullableMailAttachment {
	return &NullableMailAttachment{value: val, isSet: true}
}

func (v NullableMailAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



{
  "sortParamsByRequiredFlag": {
    "opt": "sortParamsByRequiredFlag",
    "description": "Sort method arguments to place required parameters before optional parameters.",
    "type": "boolean",
    "default": "true"
  },
  "ensureUniqueParams": {
    "opt": "ensureUniqueParams",
    "description": "Whether to ensure parameter names are unique in an operation (rename parameters that are not).",
    "type": "boolean",
    "default": "true"
  },
  "allowUnicodeIdentifiers": {
    "opt": "allowUnicodeIdentifiers",
    "description": "boolean, toggles whether unicode identifiers are allowed in names or not, default is false",
    "type": "boolean",
    "default": "false"
  },
  "modelPackage": {
    "opt": "modelPackage",
    "description": "package for generated models",
    "type": "string"
  },
  "apiPackage": {
    "opt": "apiPackage",
    "description": "package for generated api classes",
    "type": "string"
  },
  "invokerPackage": {
    "opt": "invokerPackage",
    "description": "root package for generated code",
    "type": "string"
  },
  "groupId": {
    "opt": "groupId",
    "description": "groupId in generated pom.xml",
    "type": "string"
  },
  "artifactId": {
    "opt": "artifactId",
    "description": "artifactId in generated pom.xml",
    "type": "string"
  },
  "artifactVersion": {
    "opt": "artifactVersion",
    "description": "artifact version in generated pom.xml",
    "type": "string"
  },
  "artifactUrl": {
    "opt": "artifactUrl",
    "description": "artifact URL in generated pom.xml",
    "type": "string"
  },
  "artifactDescription": {
    "opt": "artifactDescription",
    "description": "artifact description in generated pom.xml",
    "type": "string"
  },
  "scmConnection": {
    "opt": "scmConnection",
    "description": "SCM connection in generated pom.xml",
    "type": "string"
  },
  "scmDeveloperConnection": {
    "opt": "scmDeveloperConnection",
    "description": "SCM developer connection in generated pom.xml",
    "type": "string"
  },
  "scmUrl": {
    "opt": "scmUrl",
    "description": "SCM URL in generated pom.xml",
    "type": "string"
  },
  "developerName": {
    "opt": "developerName",
    "description": "developer name in generated pom.xml",
    "type": "string"
  },
  "developerEmail": {
    "opt": "developerEmail",
    "description": "developer email in generated pom.xml",
    "type": "string"
  },
  "developerOrganization": {
    "opt": "developerOrganization",
    "description": "developer organization in generated pom.xml",
    "type": "string"
  },
  "developerOrganizationUrl": {
    "opt": "developerOrganizationUrl",
    "description": "developer organization URL in generated pom.xml",
    "type": "string"
  },
  "licenseName": {
    "opt": "licenseName",
    "description": "The name of the license",
    "type": "string"
  },
  "licenseUrl": {
    "opt": "licenseUrl",
    "description": "The URL of the license",
    "type": "string"
  },
  "sourceFolder": {
    "opt": "sourceFolder",
    "description": "source folder for generated code",
    "type": "string"
  },
  "localVariablePrefix": {
    "opt": "localVariablePrefix",
    "description": "prefix for generated code members and local variables",
    "type": "string"
  },
  "serializableModel": {
    "opt": "serializableModel",
    "description": "boolean - toggle \"implements Serializable\" for generated models",
    "type": "boolean",
    "default": "false"
  },
  "bigDecimalAsString": {
    "opt": "bigDecimalAsString",
    "description": "Treat BigDecimal values as Strings to avoid precision loss.",
    "type": "boolean",
    "default": "false"
  },
  "fullJavaUtil": {
    "opt": "fullJavaUtil",
    "description": "whether to use fully qualified name for classes under java.util. This option only works for Java API client",
    "type": "boolean",
    "default": "false"
  },
  "hideGenerationTimestamp": {
    "opt": "hideGenerationTimestamp",
    "description": "hides the timestamp when files were generated",
    "type": "string"
  },
  "withXml": {
    "opt": "withXml",
    "description": "whether to include support for application/xml content type and include XML annotations in the model (works with libraries that provide support for JSON and XML)",
    "type": "boolean",
    "default": "false"
  },
  "dateLibrary": {
    "opt": "dateLibrary",
    "description": "Option. Date library to use",
    "type": "string",
    "enum": {
      "java8-instant": "Java 8 using Instant",
      "joda": "Joda (for legacy app only)",
      "legacy": "Legacy java.util.Date (if you really have a good reason not to use threetenbp",
      "java8-localdatetime": "Java 8 using LocalDateTime (for legacy app only)",
      "java8": "Java 8 native JSR310 (preferred for jdk 1.8+) - note: this also sets \"java8\" to true",
      "threetenbp": "Backport of JSR310 (preferred for jdk < 1.8)"
    }
  },
  "java8": {
    "opt": "java8",
    "description": "Option. Use Java8 classes instead of third party equivalents",
    "type": "string",
    "enum": {
      "true": "Use Java 8 classes such as Base64",
      "false": "Various third party libraries as needed"
    }
  },
  "disableHtmlEscaping": {
    "opt": "disableHtmlEscaping",
    "description": "Disable HTML escaping of JSON strings when using gson (needed to avoid problems with byte[] fields)",
    "type": "boolean",
    "default": "false"
  },
  "checkDuplicatedModelName": {
    "opt": "checkDuplicatedModelName",
    "description": "Check if there are duplicated model names (ignoring case)",
    "type": "boolean",
    "default": "false"
  },
  "implFolder": {
    "opt": "implFolder",
    "description": "folder for generated implementation code",
    "type": "string"
  },
  "title": {
    "opt": "title",
    "description": "a title describing the application",
    "type": "string"
  },
  "useBeanValidation": {
    "opt": "useBeanValidation",
    "description": "Use BeanValidation API annotations",
    "type": "boolean",
    "default": "false"
  },
  "serverPort": {
    "opt": "serverPort",
    "description": "The port on which the server should be started",
    "type": "string"
  },
  "generateSpringApplication": {
    "opt": "generateSpringApplication",
    "description": "Generate Spring application",
    "type": "boolean",
    "default": "false"
  },
  "useSpringAnnotationConfig": {
    "opt": "useSpringAnnotationConfig",
    "description": "Use Spring Annotation Config",
    "type": "boolean",
    "default": "false"
  },
  "useSwaggerFeature": {
    "opt": "useSwaggerFeature",
    "description": "Use Swagger Feature",
    "type": "boolean",
    "default": "false"
  },
  "useSwaggerUI": {
    "opt": "useSwaggerUI",
    "description": "Use Swagger UI",
    "type": "boolean",
    "default": "false"
  },
  "useWadlFeature": {
    "opt": "useWadlFeature",
    "description": "Use WADL Feature",
    "type": "boolean",
    "default": "false"
  },
  "useMultipartFeature": {
    "opt": "useMultipartFeature",
    "description": "Use Multipart Feature",
    "type": "boolean",
    "default": "false"
  },
  "useGzipFeature": {
    "opt": "useGzipFeature",
    "description": "Use Gzip Feature",
    "type": "boolean",
    "default": "false"
  },
  "useGzipFeatureForTests": {
    "opt": "useGzipFeatureForTests",
    "description": "Use Gzip Feature for tests",
    "type": "boolean",
    "default": "false"
  },
  "useBeanValidationFeature": {
    "opt": "useBeanValidationFeature",
    "description": "Use BeanValidation Feature",
    "type": "boolean",
    "default": "false"
  },
  "useLoggingFeature": {
    "opt": "useLoggingFeature",
    "description": "Use Logging Feature",
    "type": "boolean",
    "default": "false"
  },
  "useLoggingFeatureForTests": {
    "opt": "useLoggingFeatureForTests",
    "description": "Use Logging Feature for tests",
    "type": "boolean",
    "default": "false"
  },
  "generateSpringBootApplication": {
    "opt": "generateSpringBootApplication",
    "description": "Generate Spring Boot application",
    "type": "boolean",
    "default": "false"
  },
  "generateJbossDeploymentDescriptor": {
    "opt": "generateJbossDeploymentDescriptor",
    "description": "Generate Jboss Deployment Descriptor",
    "type": "boolean",
    "default": "false"
  },
  "addConsumesProducesJson": {
    "opt": "addConsumesProducesJson",
    "description": "Add @Consumes/@Produces Json to API interface",
    "type": "boolean",
    "default": "false"
  },
  "useAnnotatedBasePath": {
    "opt": "useAnnotatedBasePath",
    "description": "Use @Path annotations for basePath",
    "type": "boolean",
    "default": "false"
  },
  "generateNonSpringApplication": {
    "opt": "generateNonSpringApplication",
    "description": "Generate non-Spring application",
    "type": "boolean",
    "default": "false"
  },
  "useGenericResponse": {
    "opt": "useGenericResponse",
    "description": "Use generic response",
    "type": "boolean",
    "default": "false"
  }
}

=begin
#MailBaby Email Delivery and Management Service API

#**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

OpenAPI spec version: 1.1.0
Contact: support@interserver.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.54-SNAPSHOT
=end

require 'date'

module SwaggerClient
  # An email record
  class MailLogEntry
    # internal db id
    attr_accessor :_id

    # mail id
    attr_accessor :id

    # from address
    attr_accessor :from

    # to address
    attr_accessor :to

    # email subject
    attr_accessor :subject

    # message id
    attr_accessor :message_id

    # creation date
    attr_accessor :created

    # creation timestamp
    attr_accessor :time

    # user account
    attr_accessor :user

    # transaction type
    attr_accessor :transtype

    # origin ip
    attr_accessor :origin

    # interface name
    attr_accessor :interface

    # sending zone
    attr_accessor :sending_zone

    # email body size in bytes
    attr_accessor :body_size

    # index of email in the to adderess list
    attr_accessor :seq

    # to address this email is being sent to
    attr_accessor :recipient

    # to address domain
    attr_accessor :domain

    # locked status
    attr_accessor :locked

    # lock timestamp
    attr_accessor :lock_time

    # assigned server
    attr_accessor :assigned

    # queued timestamp
    attr_accessor :queued

    # mx hostname
    attr_accessor :mx_hostname

    # mail delivery response
    attr_accessor :response

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'_id' => :'_id',
        :'id' => :'id',
        :'from' => :'from',
        :'to' => :'to',
        :'subject' => :'subject',
        :'message_id' => :'messageId',
        :'created' => :'created',
        :'time' => :'time',
        :'user' => :'user',
        :'transtype' => :'transtype',
        :'origin' => :'origin',
        :'interface' => :'interface',
        :'sending_zone' => :'sendingZone',
        :'body_size' => :'bodySize',
        :'seq' => :'seq',
        :'recipient' => :'recipient',
        :'domain' => :'domain',
        :'locked' => :'locked',
        :'lock_time' => :'lockTime',
        :'assigned' => :'assigned',
        :'queued' => :'queued',
        :'mx_hostname' => :'mxHostname',
        :'response' => :'response'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'_id' => :'Object',
        :'id' => :'Object',
        :'from' => :'Object',
        :'to' => :'Object',
        :'subject' => :'Object',
        :'message_id' => :'Object',
        :'created' => :'Object',
        :'time' => :'Object',
        :'user' => :'Object',
        :'transtype' => :'Object',
        :'origin' => :'Object',
        :'interface' => :'Object',
        :'sending_zone' => :'Object',
        :'body_size' => :'Object',
        :'seq' => :'Object',
        :'recipient' => :'Object',
        :'domain' => :'Object',
        :'locked' => :'Object',
        :'lock_time' => :'Object',
        :'assigned' => :'Object',
        :'queued' => :'Object',
        :'mx_hostname' => :'Object',
        :'response' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::MailLogEntry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::MailLogEntry`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'_id')
        self._id = attributes[:'_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'to')
        self.to = attributes[:'to']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'message_id')
        self.message_id = attributes[:'message_id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'transtype')
        self.transtype = attributes[:'transtype']
      end

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.key?(:'interface')
        self.interface = attributes[:'interface']
      end

      if attributes.key?(:'sending_zone')
        self.sending_zone = attributes[:'sending_zone']
      end

      if attributes.key?(:'body_size')
        self.body_size = attributes[:'body_size']
      end

      if attributes.key?(:'seq')
        self.seq = attributes[:'seq']
      end

      if attributes.key?(:'recipient')
        self.recipient = attributes[:'recipient']
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'locked')
        self.locked = attributes[:'locked']
      end

      if attributes.key?(:'lock_time')
        self.lock_time = attributes[:'lock_time']
      end

      if attributes.key?(:'assigned')
        self.assigned = attributes[:'assigned']
      end

      if attributes.key?(:'queued')
        self.queued = attributes[:'queued']
      end

      if attributes.key?(:'mx_hostname')
        self.mx_hostname = attributes[:'mx_hostname']
      end

      if attributes.key?(:'response')
        self.response = attributes[:'response']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @_id.nil?
        invalid_properties.push('invalid value for "_id", _id cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @from.nil?
        invalid_properties.push('invalid value for "from", from cannot be nil.')
      end

      if @to.nil?
        invalid_properties.push('invalid value for "to", to cannot be nil.')
      end

      if @subject.nil?
        invalid_properties.push('invalid value for "subject", subject cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @time.nil?
        invalid_properties.push('invalid value for "time", time cannot be nil.')
      end

      if @user.nil?
        invalid_properties.push('invalid value for "user", user cannot be nil.')
      end

      if @transtype.nil?
        invalid_properties.push('invalid value for "transtype", transtype cannot be nil.')
      end

      if @origin.nil?
        invalid_properties.push('invalid value for "origin", origin cannot be nil.')
      end

      if @interface.nil?
        invalid_properties.push('invalid value for "interface", interface cannot be nil.')
      end

      if @sending_zone.nil?
        invalid_properties.push('invalid value for "sending_zone", sending_zone cannot be nil.')
      end

      if @body_size.nil?
        invalid_properties.push('invalid value for "body_size", body_size cannot be nil.')
      end

      if @seq.nil?
        invalid_properties.push('invalid value for "seq", seq cannot be nil.')
      end

      if @recipient.nil?
        invalid_properties.push('invalid value for "recipient", recipient cannot be nil.')
      end

      if @domain.nil?
        invalid_properties.push('invalid value for "domain", domain cannot be nil.')
      end

      if @locked.nil?
        invalid_properties.push('invalid value for "locked", locked cannot be nil.')
      end

      if @lock_time.nil?
        invalid_properties.push('invalid value for "lock_time", lock_time cannot be nil.')
      end

      if @assigned.nil?
        invalid_properties.push('invalid value for "assigned", assigned cannot be nil.')
      end

      if @queued.nil?
        invalid_properties.push('invalid value for "queued", queued cannot be nil.')
      end

      if @mx_hostname.nil?
        invalid_properties.push('invalid value for "mx_hostname", mx_hostname cannot be nil.')
      end

      if @response.nil?
        invalid_properties.push('invalid value for "response", response cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @_id.nil?
      return false if @id.nil?
      return false if @from.nil?
      return false if @to.nil?
      return false if @subject.nil?
      return false if @created.nil?
      return false if @time.nil?
      return false if @user.nil?
      return false if @transtype.nil?
      return false if @origin.nil?
      return false if @interface.nil?
      return false if @sending_zone.nil?
      return false if @body_size.nil?
      return false if @seq.nil?
      return false if @recipient.nil?
      return false if @domain.nil?
      return false if @locked.nil?
      return false if @lock_time.nil?
      return false if @assigned.nil?
      return false if @queued.nil?
      return false if @mx_hostname.nil?
      return false if @response.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          _id == o._id &&
          id == o.id &&
          from == o.from &&
          to == o.to &&
          subject == o.subject &&
          message_id == o.message_id &&
          created == o.created &&
          time == o.time &&
          user == o.user &&
          transtype == o.transtype &&
          origin == o.origin &&
          interface == o.interface &&
          sending_zone == o.sending_zone &&
          body_size == o.body_size &&
          seq == o.seq &&
          recipient == o.recipient &&
          domain == o.domain &&
          locked == o.locked &&
          lock_time == o.lock_time &&
          assigned == o.assigned &&
          queued == o.queued &&
          mx_hostname == o.mx_hostname &&
          response == o.response
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_id, id, from, to, subject, message_id, created, time, user, transtype, origin, interface, sending_zone, body_size, seq, recipient, domain, locked, lock_time, assigned, queued, mx_hostname, response].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

<?php
/**
 * SendingApi
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\ObjectSerializer;

/**
 * SendingApi Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SendingApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'sendAdvMail' => [
            'application/x-www-form-urlencoded',
            'application/json',
        ],
        'sendMail' => [
            'application/x-www-form-urlencoded',
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation sendAdvMail
     *
     * Sends an Email with Advanced Options
     *
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  \OpenAPI\Client\Model\EmailAddressTypes $from from (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes $to to (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $replyto replyto (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $cc cc (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $bcc bcc (optional)
     * @param  \OpenAPI\Client\Model\MailAttachment[]|null $attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
     * @param  int|null $id (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendAdvMail'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenericResponse|\OpenAPI\Client\Model\ErrorMessage
     */
    public function sendAdvMail(
        string $subject,
        string $body,
        \OpenAPI\Client\Model\EmailAddressTypes $from,
        \OpenAPI\Client\Model\EmailAddressesTypes $to,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $replyto = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $cc = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $bcc = null,
        ?array $attachments = null,
        ?int $id = null,
        string $contentType = self::contentTypes['sendAdvMail'][0]
    ): \OpenAPI\Client\Model\GenericResponse|\OpenAPI\Client\Model\ErrorMessage
    {
        list($response) = $this->sendAdvMailWithHttpInfo($subject, $body, $from, $to, $replyto, $cc, $bcc, $attachments, $id, $contentType);
        return $response;
    }

    /**
     * Operation sendAdvMailWithHttpInfo
     *
     * Sends an Email with Advanced Options
     *
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  \OpenAPI\Client\Model\EmailAddressTypes $from (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes $to (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $replyto (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $cc (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $bcc (optional)
     * @param  \OpenAPI\Client\Model\MailAttachment[]|null $attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
     * @param  int|null $id (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendAdvMail'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenericResponse|\OpenAPI\Client\Model\ErrorMessage|\OpenAPI\Client\Model\ErrorMessage|\OpenAPI\Client\Model\ErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendAdvMailWithHttpInfo(
        string $subject,
        string $body,
        \OpenAPI\Client\Model\EmailAddressTypes $from,
        \OpenAPI\Client\Model\EmailAddressesTypes $to,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $replyto = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $cc = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $bcc = null,
        ?array $attachments = null,
        ?int $id = null,
        string $contentType = self::contentTypes['sendAdvMail'][0]
    ): array
    {
        $request = $this->sendAdvMailRequest($subject, $body, $from, $to, $replyto, $cc, $bcc, $attachments, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GenericResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GenericResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenericResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation sendAdvMailAsync
     *
     * Sends an Email with Advanced Options
     *
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  \OpenAPI\Client\Model\EmailAddressTypes $from (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes $to (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $replyto (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $cc (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $bcc (optional)
     * @param  \OpenAPI\Client\Model\MailAttachment[]|null $attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
     * @param  int|null $id (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendAdvMail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendAdvMailAsync(
        string $subject,
        string $body,
        \OpenAPI\Client\Model\EmailAddressTypes $from,
        \OpenAPI\Client\Model\EmailAddressesTypes $to,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $replyto = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $cc = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $bcc = null,
        ?array $attachments = null,
        ?int $id = null,
        string $contentType = self::contentTypes['sendAdvMail'][0]
    ): PromiseInterface
    {
        return $this->sendAdvMailAsyncWithHttpInfo($subject, $body, $from, $to, $replyto, $cc, $bcc, $attachments, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendAdvMailAsyncWithHttpInfo
     *
     * Sends an Email with Advanced Options
     *
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  \OpenAPI\Client\Model\EmailAddressTypes $from (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes $to (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $replyto (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $cc (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $bcc (optional)
     * @param  \OpenAPI\Client\Model\MailAttachment[]|null $attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
     * @param  int|null $id (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendAdvMail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendAdvMailAsyncWithHttpInfo(
        string $subject,
        string $body,
        \OpenAPI\Client\Model\EmailAddressTypes $from,
        \OpenAPI\Client\Model\EmailAddressesTypes $to,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $replyto = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $cc = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $bcc = null,
        ?array $attachments = null,
        ?int $id = null,
        string $contentType = self::contentTypes['sendAdvMail'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GenericResponse';
        $request = $this->sendAdvMailRequest($subject, $body, $from, $to, $replyto, $cc, $bcc, $attachments, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendAdvMail'
     *
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  \OpenAPI\Client\Model\EmailAddressTypes $from (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes $to (required)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $replyto (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $cc (optional)
     * @param  \OpenAPI\Client\Model\EmailAddressesTypes|null $bcc (optional)
     * @param  \OpenAPI\Client\Model\MailAttachment[]|null $attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded! (optional)
     * @param  int|null $id (optional)  ID of the Mail order within our system to use as the Mail Account. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendAdvMail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendAdvMailRequest(
        string $subject,
        string $body,
        \OpenAPI\Client\Model\EmailAddressTypes $from,
        \OpenAPI\Client\Model\EmailAddressesTypes $to,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $replyto = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $cc = null,
        ?\OpenAPI\Client\Model\EmailAddressesTypes $bcc = null,
        ?array $attachments = null,
        ?int $id = null,
        string $contentType = self::contentTypes['sendAdvMail'][0]
    ): Request
    {

        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $subject when calling sendAdvMail'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling sendAdvMail'
            );
        }

        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $from when calling sendAdvMail'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $to when calling sendAdvMail'
            );
        }







        $resourcePath = '/mail/advsend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'subject' => $subject,
            'body' => $body,
            'from' => $from,
            'to' => $to,
            'replyto' => $replyto,
            'cc' => $cc,
            'bcc' => $bcc,
            'attachments' => $attachments,
            'id' => $id,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendMail
     *
     * Sends an Email
     *
     * @param  string $to The Contact whom is the primary recipient of this email. (required)
     * @param  string $from The contact whom is the this email is from. (required)
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenericResponse|\OpenAPI\Client\Model\ErrorMessage
     */
    public function sendMail(
        string $to,
        string $from,
        string $subject,
        string $body,
        string $contentType = self::contentTypes['sendMail'][0]
    ): \OpenAPI\Client\Model\GenericResponse|\OpenAPI\Client\Model\ErrorMessage
    {
        list($response) = $this->sendMailWithHttpInfo($to, $from, $subject, $body, $contentType);
        return $response;
    }

    /**
     * Operation sendMailWithHttpInfo
     *
     * Sends an Email
     *
     * @param  string $to The Contact whom is the primary recipient of this email. (required)
     * @param  string $from The contact whom is the this email is from. (required)
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenericResponse|\OpenAPI\Client\Model\ErrorMessage|\OpenAPI\Client\Model\ErrorMessage|\OpenAPI\Client\Model\ErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendMailWithHttpInfo(
        string $to,
        string $from,
        string $subject,
        string $body,
        string $contentType = self::contentTypes['sendMail'][0]
    ): array
    {
        $request = $this->sendMailRequest($to, $from, $subject, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GenericResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GenericResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenericResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation sendMailAsync
     *
     * Sends an Email
     *
     * @param  string $to The Contact whom is the primary recipient of this email. (required)
     * @param  string $from The contact whom is the this email is from. (required)
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendMailAsync(
        string $to,
        string $from,
        string $subject,
        string $body,
        string $contentType = self::contentTypes['sendMail'][0]
    ): PromiseInterface
    {
        return $this->sendMailAsyncWithHttpInfo($to, $from, $subject, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendMailAsyncWithHttpInfo
     *
     * Sends an Email
     *
     * @param  string $to The Contact whom is the primary recipient of this email. (required)
     * @param  string $from The contact whom is the this email is from. (required)
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function sendMailAsyncWithHttpInfo(
        string $to,
        string $from,
        string $subject,
        string $body,
        string $contentType = self::contentTypes['sendMail'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\GenericResponse';
        $request = $this->sendMailRequest($to, $from, $subject, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendMail'
     *
     * @param  string $to The Contact whom is the primary recipient of this email. (required)
     * @param  string $from The contact whom is the this email is from. (required)
     * @param  string $subject The subject or title of the email (required)
     * @param  string $body The main email contents. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendMail'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendMailRequest(
        string $to,
        string $from,
        string $subject,
        string $body,
        string $contentType = self::contentTypes['sendMail'][0]
    ): Request
    {

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $to when calling sendMail'
            );
        }

        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $from when calling sendMail'
            );
        }

        // verify the required parameter 'subject' is set
        if ($subject === null || (is_array($subject) && count($subject) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $subject when calling sendMail'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling sendMail'
            );
        }


        $resourcePath = '/mail/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'to' => $to,
            'from' => $from,
            'subject' => $subject,
            'body' => $body,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

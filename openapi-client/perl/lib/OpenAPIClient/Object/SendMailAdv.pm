=begin comment

MailBaby Email Delivery API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # 📌 Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # 🔐 Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

The version of the OpenAPI document: 1.0.0
Contact: support@interserver.net
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package OpenAPIClient::Object::SendMailAdv;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use OpenAPIClient::Object::SendMailAdvAttachmentsInner;
use OpenAPIClient::Object::SendMailAdvBccInner;
use OpenAPIClient::Object::SendMailAdvCcInner;
use OpenAPIClient::Object::SendMailAdvFrom;
use OpenAPIClient::Object::SendMailAdvReplytoInner;
use OpenAPIClient::Object::SendMailAdvToInner;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Details for an Email
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

MailBaby Email Delivery API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # 📌 Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # 🔐 Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

The version of the OpenAPI document: 1.0.0
Contact: support@interserver.net
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => 'Details for an Email',
                                  class => 'SendMailAdv',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'subject' => {
        datatype => 'string',
        base_name => 'subject',
        description => 'The subject or title of the email',
        format => '',
        read_only => '',
            },
    'body' => {
        datatype => 'string',
        base_name => 'body',
        description => 'The main email contents.',
        format => '',
        read_only => '',
            },
    'from' => {
        datatype => 'SendMailAdvFrom',
        base_name => 'from',
        description => '',
        format => '',
        read_only => '',
            },
    'to' => {
        datatype => 'ARRAY[SendMailAdvToInner]',
        base_name => 'to',
        description => 'A list of destionation email addresses to send this to',
        format => '',
        read_only => '',
            },
    'replyto' => {
        datatype => 'ARRAY[SendMailAdvReplytoInner]',
        base_name => 'replyto',
        description => '(optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.',
        format => '',
        read_only => '',
            },
    'cc' => {
        datatype => 'ARRAY[SendMailAdvCcInner]',
        base_name => 'cc',
        description => '(optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.',
        format => '',
        read_only => '',
            },
    'bcc' => {
        datatype => 'ARRAY[SendMailAdvBccInner]',
        base_name => 'bcc',
        description => '(optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.',
        format => '',
        read_only => '',
            },
    'attachments' => {
        datatype => 'ARRAY[SendMailAdvAttachmentsInner]',
        base_name => 'attachments',
        description => '(optional) File attachments to include in the email.  The file contents must be base64 encoded!',
        format => '',
        read_only => '',
            },
    'id' => {
        datatype => 'int',
        base_name => 'id',
        description => '(optional)  ID of the Mail order within our system to use as the Mail Account.',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'subject' => 'string',
    'body' => 'string',
    'from' => 'SendMailAdvFrom',
    'to' => 'ARRAY[SendMailAdvToInner]',
    'replyto' => 'ARRAY[SendMailAdvReplytoInner]',
    'cc' => 'ARRAY[SendMailAdvCcInner]',
    'bcc' => 'ARRAY[SendMailAdvBccInner]',
    'attachments' => 'ARRAY[SendMailAdvAttachmentsInner]',
    'id' => 'int'
} );

__PACKAGE__->attribute_map( {
    'subject' => 'subject',
    'body' => 'body',
    'from' => 'from',
    'to' => 'to',
    'replyto' => 'replyto',
    'cc' => 'cc',
    'bcc' => 'bcc',
    'attachments' => 'attachments',
    'id' => 'id'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;

//
// HistoryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class HistoryAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.mailbaby.net")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum GetStatsError: Error, CustomStringConvertible {
        // Unauthorized
        case code401Error(ErrorMessage)
        // Unauthorized
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code401Error(let object):
                return "GetStatsError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "GetStatsError: Unauthorized: \(object)"
            }
        }
    }

    /// Account usage statistics.
    /// - GET /mail/stats
    /// - Returns information about the usage on your mail accounts.
    /// - API Key:
    /// - type: apiKey X-API-KEY (HEADER)
    /// - name: apiKeyAuth
    /// - returns: AnyPublisher<[GetStats200ResponseInner], Error> 
    open func getStats() -> AnyPublisher<[GetStats200ResponseInner], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/stats"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[GetStats200ResponseInner], Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return GetStatsError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return GetStatsError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode([GetStats200ResponseInner].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum ViewMailLogError: Error, CustomStringConvertible {
        // bad input parameter
        case code400Error

        public var description: String {
            switch self {
            case .code400Error:
                return "ViewMailLogError: bad input parameter"
            }
        }
    }

    /// displays the mail log
    /// - GET /mail/log
    /// - Get a listing of the emails sent through this system 
    /// - API Key:
    /// - type: apiKey X-API-KEY (HEADER)
    /// - name: apiKeyAuth
    /// - parameter id: (query) The ID of your mail order this will be sent through. (optional)
    /// - parameter origin: (query) originating ip address sending mail (optional)
    /// - parameter mx: (query) mx record mail was sent to (optional)
    /// - parameter from: (query) from email address (optional)
    /// - parameter to: (query) to/destination email address (optional)
    /// - parameter subject: (query) subject containing this string (optional)
    /// - parameter mailid: (query) mail id (optional)
    /// - parameter skip: (query) number of records to skip for pagination (optional, default to 0)
    /// - parameter limit: (query) maximum number of records to return (optional, default to 100)
    /// - parameter startDate: (query) earliest date to get emails in unix timestamp format (optional)
    /// - parameter endDate: (query) earliest date to get emails in unix timestamp format (optional)
    /// - parameter replyto: (query) Reply-To Email Address (optional)
    /// - parameter headerfrom: (query) Header From Email Address (optional)
    /// - returns: AnyPublisher<MailLog, Error> 
    open func viewMailLog(id: Int64? = nil, origin: String? = nil, mx: String? = nil, from: String? = nil, to: String? = nil, subject: String? = nil, mailid: String? = nil, skip: Int? = nil, limit: Int? = nil, startDate: Int64? = nil, endDate: Int64? = nil, replyto: String? = nil, headerfrom: String? = nil) -> AnyPublisher<MailLog, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/log"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                var components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let id = id { queryItems.append(URLQueryItem(name: "id", value: "\(id)")) } 
                if let origin = origin { queryItems.append(URLQueryItem(name: "origin", value: origin)) } 
                if let mx = mx { queryItems.append(URLQueryItem(name: "mx", value: mx)) } 
                if let from = from { queryItems.append(URLQueryItem(name: "from", value: from)) } 
                if let to = to { queryItems.append(URLQueryItem(name: "to", value: to)) } 
                if let subject = subject { queryItems.append(URLQueryItem(name: "subject", value: subject)) } 
                if let mailid = mailid { queryItems.append(URLQueryItem(name: "mailid", value: mailid)) } 
                if let skip = skip { queryItems.append(URLQueryItem(name: "skip", value: "\(skip)")) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: "\(limit)")) } 
                if let startDate = startDate { queryItems.append(URLQueryItem(name: "startDate", value: "\(startDate)")) } 
                if let endDate = endDate { queryItems.append(URLQueryItem(name: "endDate", value: "\(endDate)")) } 
                if let replyto = replyto { queryItems.append(URLQueryItem(name: "replyto", value: replyto)) } 
                if let headerfrom = headerfrom { queryItems.append(URLQueryItem(name: "headerfrom", value: headerfrom)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<MailLog, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        return ViewMailLogError.code400Error
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(MailLog.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

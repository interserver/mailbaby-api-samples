//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class DefaultAPI {
    /**
     Gets mail order information by id
     
     - parameter id: (path) User ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMailById(id: Int64, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MailOrder?, _ error: Error?) -> Void)) {
        getMailByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets mail order information by id
     - GET /mail/{id}
     - returns information about a mail order in the system with the given id.
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - API Key:
       - type: apiKey X-API-LOGIN 
       - name: apiLoginAuth
     - API Key:
       - type: apiKey X-API-PASS 
       - name: apiPasswordAuth
     - parameter id: (path) User ID 
     - returns: RequestBuilder<MailOrder> 
     */
    open class func getMailByIdWithRequestBuilder(id: Int64) -> RequestBuilder<MailOrder> {
        var path = "/mail/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MailOrder>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     displays a list of mail service orders
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMailOrders(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MailOrder]?, _ error: Error?) -> Void)) {
        getMailOrdersWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     displays a list of mail service orders
     - GET /mail
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - API Key:
       - type: apiKey X-API-LOGIN 
       - name: apiLoginAuth
     - API Key:
       - type: apiKey X-API-PASS 
       - name: apiPasswordAuth
     - returns: RequestBuilder<[MailOrder]> 
     */
    open class func getMailOrdersWithRequestBuilder() -> RequestBuilder<[MailOrder]> {
        let path = "/mail"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[MailOrder]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Checks if the server is running
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pingServer(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        pingServerWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Checks if the server is running
     - GET /ping
     - returns: RequestBuilder<Void> 
     */
    open class func pingServerWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/ping"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     places a mail order
     
     - parameter mailOrder: (body) Inventory item to add (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func placeMailOrder(mailOrder: MailOrder? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        placeMailOrderWithRequestBuilder(mailOrder: mailOrder).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     places a mail order
     - POST /mail/order
     - Adds an item to the system
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - API Key:
       - type: apiKey X-API-LOGIN 
       - name: apiLoginAuth
     - API Key:
       - type: apiKey X-API-PASS 
       - name: apiPasswordAuth
     - parameter mailOrder: (body) Inventory item to add (optional)
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func placeMailOrderWithRequestBuilder(mailOrder: MailOrder? = nil) -> RequestBuilder<Void> {
        let path = "/mail/order"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mailOrder)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Sends an Email
     
     - parameter id: (path) User ID 
     - parameter subject: (query)  (optional)
     - parameter body: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendMailById(id: Int64, subject: String? = nil, body: String? = nil, to: String? = nil, from: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenericResponse?, _ error: Error?) -> Void)) {
        sendMailByIdWithRequestBuilder(id: id, subject: subject, body: body, to: to, from: from).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sends an Email
     - POST /mail/{id}/send
     - Sends An email through one of your mail orders.
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - API Key:
       - type: apiKey X-API-LOGIN 
       - name: apiLoginAuth
     - API Key:
       - type: apiKey X-API-PASS 
       - name: apiPasswordAuth
     - parameter id: (path) User ID 
     - parameter subject: (query)  (optional)
     - parameter body: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter from: (query)  (optional)
     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendMailByIdWithRequestBuilder(id: Int64, subject: String? = nil, body: String? = nil, to: String? = nil, from: String? = nil) -> RequestBuilder<GenericResponse> {
        var path = "/mail/{id}/send"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "subject": subject?.encodeToJSON(),
            "body": body?.encodeToJSON(),
            "to": to?.encodeToJSON(),
            "from": from?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GenericResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     validatess order details before placing an order
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func validateMailOrder(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        validateMailOrderWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     validatess order details before placing an order
     - GET /mail/order
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - API Key:
       - type: apiKey X-API-LOGIN 
       - name: apiLoginAuth
     - API Key:
       - type: apiKey X-API-PASS 
       - name: apiPasswordAuth
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func validateMailOrderWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/mail/order"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     displays the mail log
     
     - parameter id: (path) User ID 
     - parameter searchString: (query) pass an optional search string for looking up inventory (optional)
     - parameter skip: (query) number of records to skip for pagination (optional)
     - parameter limit: (query) maximum number of records to return (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func viewMailLogById(id: Int64, searchString: String? = nil, skip: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MailLog]?, _ error: Error?) -> Void)) {
        viewMailLogByIdWithRequestBuilder(id: id, searchString: searchString, skip: skip, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     displays the mail log
     - GET /mail/{id}/log
     - By passing in the appropriate options, you can search for available inventory in the system 
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - API Key:
       - type: apiKey X-API-LOGIN 
       - name: apiLoginAuth
     - API Key:
       - type: apiKey X-API-PASS 
       - name: apiPasswordAuth
     - parameter id: (path) User ID 
     - parameter searchString: (query) pass an optional search string for looking up inventory (optional)
     - parameter skip: (query) number of records to skip for pagination (optional)
     - parameter limit: (query) maximum number of records to return (optional)
     - returns: RequestBuilder<[MailLog]> 
     */
    open class func viewMailLogByIdWithRequestBuilder(id: Int64, searchString: String? = nil, skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<[MailLog]> {
        var path = "/mail/{id}/log"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "searchString": searchString?.encodeToJSON(),
            "skip": skip?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[MailLog]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MailLogEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, id: str=None, _from: str=None, to: str=None, subject: str=None, message_id: str=None, created: str=None, time: int=None, user: str=None, transtype: str=None, transhost: str=None, originhost: str=None, origin: str=None, interface: str=None, _date: str=None, sending_zone: str=None, body_size: int=None, source_md5: str=None, seq: int=None, domain: str=None, recipient: str=None, locked: int=None, lock_time: int=None, assigned: str=None, queued: str=None, lock: str=None, logger: str=None, mx_port: int=None, connection_key: str=None, mx_hostname: str=None, sent_body_hash: str=None, sent_body_size: int=None, md5_match: int=None):  # noqa: E501
        """MailLogEntry - a model defined in Swagger

        :param id: The id of this MailLogEntry.  # noqa: E501
        :type id: int
        :param id: The id of this MailLogEntry.  # noqa: E501
        :type id: str
        :param _from: The _from of this MailLogEntry.  # noqa: E501
        :type _from: str
        :param to: The to of this MailLogEntry.  # noqa: E501
        :type to: str
        :param subject: The subject of this MailLogEntry.  # noqa: E501
        :type subject: str
        :param message_id: The message_id of this MailLogEntry.  # noqa: E501
        :type message_id: str
        :param created: The created of this MailLogEntry.  # noqa: E501
        :type created: str
        :param time: The time of this MailLogEntry.  # noqa: E501
        :type time: int
        :param user: The user of this MailLogEntry.  # noqa: E501
        :type user: str
        :param transtype: The transtype of this MailLogEntry.  # noqa: E501
        :type transtype: str
        :param transhost: The transhost of this MailLogEntry.  # noqa: E501
        :type transhost: str
        :param originhost: The originhost of this MailLogEntry.  # noqa: E501
        :type originhost: str
        :param origin: The origin of this MailLogEntry.  # noqa: E501
        :type origin: str
        :param interface: The interface of this MailLogEntry.  # noqa: E501
        :type interface: str
        :param _date: The _date of this MailLogEntry.  # noqa: E501
        :type _date: str
        :param sending_zone: The sending_zone of this MailLogEntry.  # noqa: E501
        :type sending_zone: str
        :param body_size: The body_size of this MailLogEntry.  # noqa: E501
        :type body_size: int
        :param source_md5: The source_md5 of this MailLogEntry.  # noqa: E501
        :type source_md5: str
        :param seq: The seq of this MailLogEntry.  # noqa: E501
        :type seq: int
        :param domain: The domain of this MailLogEntry.  # noqa: E501
        :type domain: str
        :param recipient: The recipient of this MailLogEntry.  # noqa: E501
        :type recipient: str
        :param locked: The locked of this MailLogEntry.  # noqa: E501
        :type locked: int
        :param lock_time: The lock_time of this MailLogEntry.  # noqa: E501
        :type lock_time: int
        :param assigned: The assigned of this MailLogEntry.  # noqa: E501
        :type assigned: str
        :param queued: The queued of this MailLogEntry.  # noqa: E501
        :type queued: str
        :param lock: The lock of this MailLogEntry.  # noqa: E501
        :type lock: str
        :param logger: The logger of this MailLogEntry.  # noqa: E501
        :type logger: str
        :param mx_port: The mx_port of this MailLogEntry.  # noqa: E501
        :type mx_port: int
        :param connection_key: The connection_key of this MailLogEntry.  # noqa: E501
        :type connection_key: str
        :param mx_hostname: The mx_hostname of this MailLogEntry.  # noqa: E501
        :type mx_hostname: str
        :param sent_body_hash: The sent_body_hash of this MailLogEntry.  # noqa: E501
        :type sent_body_hash: str
        :param sent_body_size: The sent_body_size of this MailLogEntry.  # noqa: E501
        :type sent_body_size: int
        :param md5_match: The md5_match of this MailLogEntry.  # noqa: E501
        :type md5_match: int
        """
        self.swagger_types = {
            'id': int,
            'id': str,
            '_from': str,
            'to': str,
            'subject': str,
            'message_id': str,
            'created': str,
            'time': int,
            'user': str,
            'transtype': str,
            'transhost': str,
            'originhost': str,
            'origin': str,
            'interface': str,
            '_date': str,
            'sending_zone': str,
            'body_size': int,
            'source_md5': str,
            'seq': int,
            'domain': str,
            'recipient': str,
            'locked': int,
            'lock_time': int,
            'assigned': str,
            'queued': str,
            'lock': str,
            'logger': str,
            'mx_port': int,
            'connection_key': str,
            'mx_hostname': str,
            'sent_body_hash': str,
            'sent_body_size': int,
            'md5_match': int
        }

        self.attribute_map = {
            'id': '_id',
            'id': 'id',
            '_from': 'from',
            'to': 'to',
            'subject': 'subject',
            'message_id': 'messageId',
            'created': 'created',
            'time': 'time',
            'user': 'user',
            'transtype': 'transtype',
            'transhost': 'transhost',
            'originhost': 'originhost',
            'origin': 'origin',
            'interface': 'interface',
            '_date': 'date',
            'sending_zone': 'sendingZone',
            'body_size': 'bodySize',
            'source_md5': 'sourceMd5',
            'seq': 'seq',
            'domain': 'domain',
            'recipient': 'recipient',
            'locked': 'locked',
            'lock_time': 'lockTime',
            'assigned': 'assigned',
            'queued': 'queued',
            'lock': '_lock',
            'logger': 'logger',
            'mx_port': 'mxPort',
            'connection_key': 'connectionKey',
            'mx_hostname': 'mxHostname',
            'sent_body_hash': 'sentBodyHash',
            'sent_body_size': 'sentBodySize',
            'md5_match': 'md5Match'
        }
        self._id = id
        self._id = id
        self.__from = _from
        self._to = to
        self._subject = subject
        self._message_id = message_id
        self._created = created
        self._time = time
        self._user = user
        self._transtype = transtype
        self._transhost = transhost
        self._originhost = originhost
        self._origin = origin
        self._interface = interface
        self.__date = _date
        self._sending_zone = sending_zone
        self._body_size = body_size
        self._source_md5 = source_md5
        self._seq = seq
        self._domain = domain
        self._recipient = recipient
        self._locked = locked
        self._lock_time = lock_time
        self._assigned = assigned
        self._queued = queued
        self._lock = lock
        self._logger = logger
        self._mx_port = mx_port
        self._connection_key = connection_key
        self._mx_hostname = mx_hostname
        self._sent_body_hash = sent_body_hash
        self._sent_body_size = sent_body_size
        self._md5_match = md5_match

    @classmethod
    def from_dict(cls, dikt) -> 'MailLogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MailLogEntry of this MailLogEntry.  # noqa: E501
        :rtype: MailLogEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this MailLogEntry.

        internal db id  # noqa: E501

        :return: The id of this MailLogEntry.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this MailLogEntry.

        internal db id  # noqa: E501

        :param id: The id of this MailLogEntry.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def id(self) -> str:
        """Gets the id of this MailLogEntry.

        mail id  # noqa: E501

        :return: The id of this MailLogEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MailLogEntry.

        mail id  # noqa: E501

        :param id: The id of this MailLogEntry.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _from(self) -> str:
        """Gets the _from of this MailLogEntry.

        from address  # noqa: E501

        :return: The _from of this MailLogEntry.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this MailLogEntry.

        from address  # noqa: E501

        :param _from: The _from of this MailLogEntry.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this MailLogEntry.

        to address  # noqa: E501

        :return: The to of this MailLogEntry.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this MailLogEntry.

        to address  # noqa: E501

        :param to: The to of this MailLogEntry.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def subject(self) -> str:
        """Gets the subject of this MailLogEntry.

        email subject  # noqa: E501

        :return: The subject of this MailLogEntry.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this MailLogEntry.

        email subject  # noqa: E501

        :param subject: The subject of this MailLogEntry.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def message_id(self) -> str:
        """Gets the message_id of this MailLogEntry.

        message id  # noqa: E501

        :return: The message_id of this MailLogEntry.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: str):
        """Sets the message_id of this MailLogEntry.

        message id  # noqa: E501

        :param message_id: The message_id of this MailLogEntry.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def created(self) -> str:
        """Gets the created of this MailLogEntry.

        creation date  # noqa: E501

        :return: The created of this MailLogEntry.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this MailLogEntry.

        creation date  # noqa: E501

        :param created: The created of this MailLogEntry.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def time(self) -> int:
        """Gets the time of this MailLogEntry.

        creation timestamp  # noqa: E501

        :return: The time of this MailLogEntry.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time: int):
        """Sets the time of this MailLogEntry.

        creation timestamp  # noqa: E501

        :param time: The time of this MailLogEntry.
        :type time: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def user(self) -> str:
        """Gets the user of this MailLogEntry.

        user account  # noqa: E501

        :return: The user of this MailLogEntry.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this MailLogEntry.

        user account  # noqa: E501

        :param user: The user of this MailLogEntry.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def transtype(self) -> str:
        """Gets the transtype of this MailLogEntry.

        transaction type  # noqa: E501

        :return: The transtype of this MailLogEntry.
        :rtype: str
        """
        return self._transtype

    @transtype.setter
    def transtype(self, transtype: str):
        """Sets the transtype of this MailLogEntry.

        transaction type  # noqa: E501

        :param transtype: The transtype of this MailLogEntry.
        :type transtype: str
        """
        if transtype is None:
            raise ValueError("Invalid value for `transtype`, must not be `None`")  # noqa: E501

        self._transtype = transtype

    @property
    def transhost(self) -> str:
        """Gets the transhost of this MailLogEntry.

        transaction host  # noqa: E501

        :return: The transhost of this MailLogEntry.
        :rtype: str
        """
        return self._transhost

    @transhost.setter
    def transhost(self, transhost: str):
        """Sets the transhost of this MailLogEntry.

        transaction host  # noqa: E501

        :param transhost: The transhost of this MailLogEntry.
        :type transhost: str
        """
        if transhost is None:
            raise ValueError("Invalid value for `transhost`, must not be `None`")  # noqa: E501

        self._transhost = transhost

    @property
    def originhost(self) -> str:
        """Gets the originhost of this MailLogEntry.

        origin host  # noqa: E501

        :return: The originhost of this MailLogEntry.
        :rtype: str
        """
        return self._originhost

    @originhost.setter
    def originhost(self, originhost: str):
        """Sets the originhost of this MailLogEntry.

        origin host  # noqa: E501

        :param originhost: The originhost of this MailLogEntry.
        :type originhost: str
        """
        if originhost is None:
            raise ValueError("Invalid value for `originhost`, must not be `None`")  # noqa: E501

        self._originhost = originhost

    @property
    def origin(self) -> str:
        """Gets the origin of this MailLogEntry.

        origin ip  # noqa: E501

        :return: The origin of this MailLogEntry.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin: str):
        """Sets the origin of this MailLogEntry.

        origin ip  # noqa: E501

        :param origin: The origin of this MailLogEntry.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def interface(self) -> str:
        """Gets the interface of this MailLogEntry.

        interface name  # noqa: E501

        :return: The interface of this MailLogEntry.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface: str):
        """Sets the interface of this MailLogEntry.

        interface name  # noqa: E501

        :param interface: The interface of this MailLogEntry.
        :type interface: str
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")  # noqa: E501

        self._interface = interface

    @property
    def _date(self) -> str:
        """Gets the _date of this MailLogEntry.

        date processed  # noqa: E501

        :return: The _date of this MailLogEntry.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this MailLogEntry.

        date processed  # noqa: E501

        :param _date: The _date of this MailLogEntry.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def sending_zone(self) -> str:
        """Gets the sending_zone of this MailLogEntry.

        sending zone  # noqa: E501

        :return: The sending_zone of this MailLogEntry.
        :rtype: str
        """
        return self._sending_zone

    @sending_zone.setter
    def sending_zone(self, sending_zone: str):
        """Sets the sending_zone of this MailLogEntry.

        sending zone  # noqa: E501

        :param sending_zone: The sending_zone of this MailLogEntry.
        :type sending_zone: str
        """
        if sending_zone is None:
            raise ValueError("Invalid value for `sending_zone`, must not be `None`")  # noqa: E501

        self._sending_zone = sending_zone

    @property
    def body_size(self) -> int:
        """Gets the body_size of this MailLogEntry.

        email body size in bytes  # noqa: E501

        :return: The body_size of this MailLogEntry.
        :rtype: int
        """
        return self._body_size

    @body_size.setter
    def body_size(self, body_size: int):
        """Sets the body_size of this MailLogEntry.

        email body size in bytes  # noqa: E501

        :param body_size: The body_size of this MailLogEntry.
        :type body_size: int
        """
        if body_size is None:
            raise ValueError("Invalid value for `body_size`, must not be `None`")  # noqa: E501

        self._body_size = body_size

    @property
    def source_md5(self) -> str:
        """Gets the source_md5 of this MailLogEntry.

        md5 sum of the email  # noqa: E501

        :return: The source_md5 of this MailLogEntry.
        :rtype: str
        """
        return self._source_md5

    @source_md5.setter
    def source_md5(self, source_md5: str):
        """Sets the source_md5 of this MailLogEntry.

        md5 sum of the email  # noqa: E501

        :param source_md5: The source_md5 of this MailLogEntry.
        :type source_md5: str
        """
        if source_md5 is None:
            raise ValueError("Invalid value for `source_md5`, must not be `None`")  # noqa: E501

        self._source_md5 = source_md5

    @property
    def seq(self) -> int:
        """Gets the seq of this MailLogEntry.

        delivery sequency  # noqa: E501

        :return: The seq of this MailLogEntry.
        :rtype: int
        """
        return self._seq

    @seq.setter
    def seq(self, seq: int):
        """Sets the seq of this MailLogEntry.

        delivery sequency  # noqa: E501

        :param seq: The seq of this MailLogEntry.
        :type seq: int
        """
        if seq is None:
            raise ValueError("Invalid value for `seq`, must not be `None`")  # noqa: E501

        self._seq = seq

    @property
    def domain(self) -> str:
        """Gets the domain of this MailLogEntry.

        to address domain  # noqa: E501

        :return: The domain of this MailLogEntry.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this MailLogEntry.

        to address domain  # noqa: E501

        :param domain: The domain of this MailLogEntry.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def recipient(self) -> str:
        """Gets the recipient of this MailLogEntry.

        email receiver address  # noqa: E501

        :return: The recipient of this MailLogEntry.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient: str):
        """Sets the recipient of this MailLogEntry.

        email receiver address  # noqa: E501

        :param recipient: The recipient of this MailLogEntry.
        :type recipient: str
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")  # noqa: E501

        self._recipient = recipient

    @property
    def locked(self) -> int:
        """Gets the locked of this MailLogEntry.

        locked status  # noqa: E501

        :return: The locked of this MailLogEntry.
        :rtype: int
        """
        return self._locked

    @locked.setter
    def locked(self, locked: int):
        """Sets the locked of this MailLogEntry.

        locked status  # noqa: E501

        :param locked: The locked of this MailLogEntry.
        :type locked: int
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    @property
    def lock_time(self) -> int:
        """Gets the lock_time of this MailLogEntry.

        lock timestamp  # noqa: E501

        :return: The lock_time of this MailLogEntry.
        :rtype: int
        """
        return self._lock_time

    @lock_time.setter
    def lock_time(self, lock_time: int):
        """Sets the lock_time of this MailLogEntry.

        lock timestamp  # noqa: E501

        :param lock_time: The lock_time of this MailLogEntry.
        :type lock_time: int
        """
        if lock_time is None:
            raise ValueError("Invalid value for `lock_time`, must not be `None`")  # noqa: E501

        self._lock_time = lock_time

    @property
    def assigned(self) -> str:
        """Gets the assigned of this MailLogEntry.

        assigned server  # noqa: E501

        :return: The assigned of this MailLogEntry.
        :rtype: str
        """
        return self._assigned

    @assigned.setter
    def assigned(self, assigned: str):
        """Sets the assigned of this MailLogEntry.

        assigned server  # noqa: E501

        :param assigned: The assigned of this MailLogEntry.
        :type assigned: str
        """
        if assigned is None:
            raise ValueError("Invalid value for `assigned`, must not be `None`")  # noqa: E501

        self._assigned = assigned

    @property
    def queued(self) -> str:
        """Gets the queued of this MailLogEntry.

        queued timestamp  # noqa: E501

        :return: The queued of this MailLogEntry.
        :rtype: str
        """
        return self._queued

    @queued.setter
    def queued(self, queued: str):
        """Sets the queued of this MailLogEntry.

        queued timestamp  # noqa: E501

        :param queued: The queued of this MailLogEntry.
        :type queued: str
        """
        if queued is None:
            raise ValueError("Invalid value for `queued`, must not be `None`")  # noqa: E501

        self._queued = queued

    @property
    def lock(self) -> str:
        """Gets the lock of this MailLogEntry.

        lock id  # noqa: E501

        :return: The lock of this MailLogEntry.
        :rtype: str
        """
        return self._lock

    @lock.setter
    def lock(self, lock: str):
        """Sets the lock of this MailLogEntry.

        lock id  # noqa: E501

        :param lock: The lock of this MailLogEntry.
        :type lock: str
        """
        if lock is None:
            raise ValueError("Invalid value for `lock`, must not be `None`")  # noqa: E501

        self._lock = lock

    @property
    def logger(self) -> str:
        """Gets the logger of this MailLogEntry.

        logger  # noqa: E501

        :return: The logger of this MailLogEntry.
        :rtype: str
        """
        return self._logger

    @logger.setter
    def logger(self, logger: str):
        """Sets the logger of this MailLogEntry.

        logger  # noqa: E501

        :param logger: The logger of this MailLogEntry.
        :type logger: str
        """
        if logger is None:
            raise ValueError("Invalid value for `logger`, must not be `None`")  # noqa: E501

        self._logger = logger

    @property
    def mx_port(self) -> int:
        """Gets the mx_port of this MailLogEntry.

        mx port number  # noqa: E501

        :return: The mx_port of this MailLogEntry.
        :rtype: int
        """
        return self._mx_port

    @mx_port.setter
    def mx_port(self, mx_port: int):
        """Sets the mx_port of this MailLogEntry.

        mx port number  # noqa: E501

        :param mx_port: The mx_port of this MailLogEntry.
        :type mx_port: int
        """
        if mx_port is None:
            raise ValueError("Invalid value for `mx_port`, must not be `None`")  # noqa: E501

        self._mx_port = mx_port

    @property
    def connection_key(self) -> str:
        """Gets the connection_key of this MailLogEntry.

        connection key  # noqa: E501

        :return: The connection_key of this MailLogEntry.
        :rtype: str
        """
        return self._connection_key

    @connection_key.setter
    def connection_key(self, connection_key: str):
        """Sets the connection_key of this MailLogEntry.

        connection key  # noqa: E501

        :param connection_key: The connection_key of this MailLogEntry.
        :type connection_key: str
        """
        if connection_key is None:
            raise ValueError("Invalid value for `connection_key`, must not be `None`")  # noqa: E501

        self._connection_key = connection_key

    @property
    def mx_hostname(self) -> str:
        """Gets the mx_hostname of this MailLogEntry.

        mx hostname  # noqa: E501

        :return: The mx_hostname of this MailLogEntry.
        :rtype: str
        """
        return self._mx_hostname

    @mx_hostname.setter
    def mx_hostname(self, mx_hostname: str):
        """Sets the mx_hostname of this MailLogEntry.

        mx hostname  # noqa: E501

        :param mx_hostname: The mx_hostname of this MailLogEntry.
        :type mx_hostname: str
        """
        if mx_hostname is None:
            raise ValueError("Invalid value for `mx_hostname`, must not be `None`")  # noqa: E501

        self._mx_hostname = mx_hostname

    @property
    def sent_body_hash(self) -> str:
        """Gets the sent_body_hash of this MailLogEntry.

        body hash  # noqa: E501

        :return: The sent_body_hash of this MailLogEntry.
        :rtype: str
        """
        return self._sent_body_hash

    @sent_body_hash.setter
    def sent_body_hash(self, sent_body_hash: str):
        """Sets the sent_body_hash of this MailLogEntry.

        body hash  # noqa: E501

        :param sent_body_hash: The sent_body_hash of this MailLogEntry.
        :type sent_body_hash: str
        """
        if sent_body_hash is None:
            raise ValueError("Invalid value for `sent_body_hash`, must not be `None`")  # noqa: E501

        self._sent_body_hash = sent_body_hash

    @property
    def sent_body_size(self) -> int:
        """Gets the sent_body_size of this MailLogEntry.

        sent body size in bytes  # noqa: E501

        :return: The sent_body_size of this MailLogEntry.
        :rtype: int
        """
        return self._sent_body_size

    @sent_body_size.setter
    def sent_body_size(self, sent_body_size: int):
        """Sets the sent_body_size of this MailLogEntry.

        sent body size in bytes  # noqa: E501

        :param sent_body_size: The sent_body_size of this MailLogEntry.
        :type sent_body_size: int
        """
        if sent_body_size is None:
            raise ValueError("Invalid value for `sent_body_size`, must not be `None`")  # noqa: E501

        self._sent_body_size = sent_body_size

    @property
    def md5_match(self) -> int:
        """Gets the md5_match of this MailLogEntry.

        md5 checksum matching result  # noqa: E501

        :return: The md5_match of this MailLogEntry.
        :rtype: int
        """
        return self._md5_match

    @md5_match.setter
    def md5_match(self, md5_match: int):
        """Sets the md5_match of this MailLogEntry.

        md5 checksum matching result  # noqa: E501

        :param md5_match: The md5_match of this MailLogEntry.
        :type md5_match: int
        """
        if md5_match is None:
            raise ValueError("Invalid value for `md5_match`, must not be `None`")  # noqa: E501

        self._md5_match = md5_match

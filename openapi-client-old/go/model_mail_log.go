/*
 * Mail Baby API
 *
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * API version: 1.0.0
 * Contact: detain@interserver.net
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MailLog Mail Order Details
type MailLog struct {
	Id *int64 `json:"id,omitempty"`
}

// NewMailLog instantiates a new MailLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailLog() *MailLog {
	this := MailLog{}
	return &this
}

// NewMailLogWithDefaults instantiates a new MailLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailLogWithDefaults() *MailLog {
	this := MailLog{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MailLog) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailLog) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MailLog) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *MailLog) SetId(v int64) {
	o.Id = &v
}

func (o MailLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableMailLog struct {
	value *MailLog
	isSet bool
}

func (v NullableMailLog) Get() *MailLog {
	return v.value
}

func (v *NullableMailLog) Set(val *MailLog) {
	v.value = val
	v.isSet = true
}

func (v NullableMailLog) IsSet() bool {
	return v.isSet
}

func (v *NullableMailLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailLog(val *MailLog) *NullableMailLog {
	return &NullableMailLog{value: val, isSet: true}
}

func (v NullableMailLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@interserver.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SendingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def send_adv_mail(self, subject, body, _from, to, replyto, cc, bcc, attachments, id, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail(subject, body, _from, to, replyto, cc, bcc, attachments, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: (required)
        :param str body: (required)
        :param EmailAddressName _from: (required)
        :param list[EmailAddressName] to: (required)
        :param list[EmailAddressName] replyto: (required)
        :param list[EmailAddressName] cc: (required)
        :param list[EmailAddressName] bcc: (required)
        :param list[MailAttachment] attachments: (required)
        :param int id: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_adv_mail_with_http_info(subject, body, _from, to, replyto, cc, bcc, attachments, id, **kwargs)  # noqa: E501
        else:
            (data) = self.send_adv_mail_with_http_info(subject, body, _from, to, replyto, cc, bcc, attachments, id, **kwargs)  # noqa: E501
            return data

    def send_adv_mail_with_http_info(self, subject, body, _from, to, replyto, cc, bcc, attachments, id, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail_with_http_info(subject, body, _from, to, replyto, cc, bcc, attachments, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subject: (required)
        :param str body: (required)
        :param EmailAddressName _from: (required)
        :param list[EmailAddressName] to: (required)
        :param list[EmailAddressName] replyto: (required)
        :param list[EmailAddressName] cc: (required)
        :param list[EmailAddressName] bcc: (required)
        :param list[MailAttachment] attachments: (required)
        :param int id: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject', 'body', '_from', 'to', 'replyto', 'cc', 'bcc', 'attachments', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_adv_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'replyto' is set
        if ('replyto' not in params or
                params['replyto'] is None):
            raise ValueError("Missing the required parameter `replyto` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'cc' is set
        if ('cc' not in params or
                params['cc'] is None):
            raise ValueError("Missing the required parameter `cc` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'bcc' is set
        if ('bcc' not in params or
                params['bcc'] is None):
            raise ValueError("Missing the required parameter `bcc` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'attachments' is set
        if ('attachments' not in params or
                params['attachments'] is None):
            raise ValueError("Missing the required parameter `attachments` when calling `send_adv_mail`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `send_adv_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
            collection_formats['to'] = 'multi'  # noqa: E501
        if 'replyto' in params:
            form_params.append(('replyto', params['replyto']))  # noqa: E501
            collection_formats['replyto'] = 'multi'  # noqa: E501
        if 'cc' in params:
            form_params.append(('cc', params['cc']))  # noqa: E501
            collection_formats['cc'] = 'multi'  # noqa: E501
        if 'bcc' in params:
            form_params.append(('bcc', params['bcc']))  # noqa: E501
            collection_formats['bcc'] = 'multi'  # noqa: E501
        if 'attachments' in params:
            form_params.append(('attachments', params['attachments']))  # noqa: E501
            collection_formats['attachments'] = 'multi'  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/advsend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_adv_mail(self, body, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMailAdv body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_adv_mail_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.send_adv_mail_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def send_adv_mail_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sends an Email with Advanced Options  # noqa: E501

        Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_adv_mail_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMailAdv body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_adv_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_adv_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
            collection_formats['to'] = 'multi'  # noqa: E501
        if 'replyto' in params:
            form_params.append(('replyto', params['replyto']))  # noqa: E501
            collection_formats['replyto'] = 'multi'  # noqa: E501
        if 'cc' in params:
            form_params.append(('cc', params['cc']))  # noqa: E501
            collection_formats['cc'] = 'multi'  # noqa: E501
        if 'bcc' in params:
            form_params.append(('bcc', params['bcc']))  # noqa: E501
            collection_formats['bcc'] = 'multi'  # noqa: E501
        if 'attachments' in params:
            form_params.append(('attachments', params['attachments']))  # noqa: E501
            collection_formats['attachments'] = 'multi'  # noqa: E501
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/advsend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_mail(self, to, _from, subject, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail(to, _from, subject, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to: (required)
        :param str _from: (required)
        :param str subject: (required)
        :param str body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_mail_with_http_info(to, _from, subject, body, **kwargs)  # noqa: E501
        else:
            (data) = self.send_mail_with_http_info(to, _from, subject, body, **kwargs)  # noqa: E501
            return data

    def send_mail_with_http_info(self, to, _from, subject, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail_with_http_info(to, _from, subject, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to: (required)
        :param str _from: (required)
        :param str subject: (required)
        :param str body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to', '_from', 'subject', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `send_mail`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `send_mail`")  # noqa: E501
        # verify the required parameter 'subject' is set
        if ('subject' not in params or
                params['subject'] is None):
            raise ValueError("Missing the required parameter `subject` when calling `send_mail`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_mail(self, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMail body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_mail_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.send_mail_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def send_mail_with_http_info(self, body, **kwargs):  # noqa: E501
        """Sends an Email  # noqa: E501

        Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_mail_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendMail body: (required)
        :return: GenericResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `send_mail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'to' in params:
            form_params.append(('to', params['to']))  # noqa: E501
        if '_from' in params:
            form_params.append(('from', params['_from']))  # noqa: E501
        if 'subject' in params:
            form_params.append(('subject', params['subject']))  # noqa: E501
        if 'body' in params:
            form_params.append(('body', params['body']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mail/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

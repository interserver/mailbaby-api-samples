/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI
{

class OPENAPI_API OpenAPIDefaultApi
{
public:
	OpenAPIDefaultApi();
	~OpenAPIDefaultApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetMailOrdersRequest;
	class GetMailOrdersResponse;
	class PingServerRequest;
	class PingServerResponse;
	class SendAdvMailRequest;
	class SendAdvMailResponse;
	class SendMailRequest;
	class SendMailResponse;
	class ViewMailLogRequest;
	class ViewMailLogResponse;
	
    DECLARE_DELEGATE_OneParam(FGetMailOrdersDelegate, const GetMailOrdersResponse&);
    DECLARE_DELEGATE_OneParam(FPingServerDelegate, const PingServerResponse&);
    DECLARE_DELEGATE_OneParam(FSendAdvMailDelegate, const SendAdvMailResponse&);
    DECLARE_DELEGATE_OneParam(FSendMailDelegate, const SendMailResponse&);
    DECLARE_DELEGATE_OneParam(FViewMailLogDelegate, const ViewMailLogResponse&);
    
    FHttpRequestPtr GetMailOrders(const GetMailOrdersRequest& Request, const FGetMailOrdersDelegate& Delegate = FGetMailOrdersDelegate()) const;
    FHttpRequestPtr PingServer(const PingServerRequest& Request, const FPingServerDelegate& Delegate = FPingServerDelegate()) const;
    FHttpRequestPtr SendAdvMail(const SendAdvMailRequest& Request, const FSendAdvMailDelegate& Delegate = FSendAdvMailDelegate()) const;
    FHttpRequestPtr SendMail(const SendMailRequest& Request, const FSendMailDelegate& Delegate = FSendMailDelegate()) const;
    FHttpRequestPtr ViewMailLog(const ViewMailLogRequest& Request, const FViewMailLogDelegate& Delegate = FViewMailLogDelegate()) const;
    
private:
    void OnGetMailOrdersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetMailOrdersDelegate Delegate) const;
    void OnPingServerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPingServerDelegate Delegate) const;
    void OnSendAdvMailResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSendAdvMailDelegate Delegate) const;
    void OnSendMailResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSendMailDelegate Delegate) const;
    void OnViewMailLogResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FViewMailLogDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}

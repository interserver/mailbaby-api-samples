/*
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.13.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://api.mailbaby.net";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let X_API_KEY = "TODO_EDIT_THE_X-API-KEY";

export default function() {
    group("/mail/rules", () => {

        // Request No. 1: getRules
        {
            let url = BASE_URL + `/mail/rules`;
            let params = {
                headers: {
                    "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: addRule
        {
            let url = BASE_URL + `/mail/rules`;
            let body = {"user": "mb20682", "type": "email", "data": "domeinwo@server.guesshost.net"};
            let params = {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded", "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "search results matching criteria": (r) => r.status === 200
            });
        }
    });

    group("/mail/advsend", () => {

        // Request No. 1: sendAdvMail
        {
            let url = BASE_URL + `/mail/advsend`;
            let body = {"subject": "Welcome", "body": "Hello", "from": {"email":"user@domain.com"}, "to": [{"email":"someone@client.com","name":"Mr Client"}], "attachments": [{"filename":"message.txt","data":"base64_encoded_contents"}], "id": 66};
            let params = {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded", "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "search results matching criteria": (r) => r.status === 200
            });
        }
    });

    group("/mail/send", () => {

        // Request No. 1: sendMail
        {
            let url = BASE_URL + `/mail/send`;
            // TODO: edit the parameters of the request body.
            let body = {"to": "string", "from": "string", "subject": "string", "body": "string"};
            let params = {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded", "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "search results matching criteria": (r) => r.status === 200
            });
        }
    });

    group("/mail/blocks", () => {

        // Request No. 1: getMailBlocks
        {
            let url = BASE_URL + `/mail/blocks`;
            let params = {
                headers: {
                    "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/mail/log", () => {
        let endDate = '1673317008'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let subject = 'Support'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let origin = '1.2.3.4'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let skip = '1000'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let mx = 'mx.google.com'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let headerfrom = 'TODO_EDIT_THE_HEADERFROM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = '1000'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let replyto = 'TODO_EDIT_THE_REPLYTO'; // specify value as there is no example value for this parameter in OpenAPI spec
        let from = 'me@sender.com'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let mailid = '185997065c60008840'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let id = '2604'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let to = 'you@receiver.com'; // extracted from 'example' field defined at the parameter level of OpenAPI spec
        let startDate = '1641781008'; // extracted from 'example' field defined at the parameter level of OpenAPI spec

        // Request No. 1: viewMailLog
        {
            let url = BASE_URL + `/mail/log?id=${id}&origin=${origin}&mx=${mx}&from=${from}&to=${to}&subject=${subject}&mailid=${mailid}&skip=${skip}&limit=${limit}&startDate=${startDate}&endDate=${endDate}&replyto=${replyto}&headerfrom=${headerfrom}`;
            let params = {
                headers: {
                    "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "search results matching criteria": (r) => r.status === 200
            });
        }
    });

    group("/mail/rules/{ruleId}", () => {
        let ruleId = ['34'].shift(); // first element from list extracted from 'examples' field defined at the parameter level of OpenAPI spec

        // Request No. 1: deleteRule
        {
            let url = BASE_URL + `/mail/rules/${ruleId}`;
            let params = {
                headers: {
                    "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            // this is a DELETE method request - if params are also set, empty body must be passed
            let request = http.del(url, {} , params);

            check(request, {
                "search results matching criteria": (r) => r.status === 200
            });
        }
    });

    group("/ping", () => {

        // Request No. 1: pingServer
        {
            let url = BASE_URL + `/ping`;
            let params = {
                headers: {
                    "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "Server is up and running": (r) => r.status === 200
            });
            check(request, {
                "Something is wrong": (r) => r.status === 200
            });
        }
    });

    group("/mail/stats", () => {

        // Request No. 1: getStats
        {
            let url = BASE_URL + `/mail/stats`;
            let params = {
                headers: {
                    "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/mail/blocks/delete", () => {

        // Request No. 1: delistBlock
        {
            let url = BASE_URL + `/mail/blocks/delete`;
            let body = {"email": "client@domain.com"};
            let params = {
                headers: {
                    "Content-Type": "application/json", "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "search results matching criteria": (r) => r.status === 200
            });
        }
    });

    group("/mail", () => {

        // Request No. 1: getMailOrders
        {
            let url = BASE_URL + `/mail`;
            let params = {
                headers: {
                    "X-API-KEY": `${X_API_KEY}`, "Accept": "application/json"
                }
            };
            let request = http.get(url, params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

}

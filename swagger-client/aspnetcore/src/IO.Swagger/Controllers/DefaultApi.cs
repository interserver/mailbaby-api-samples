/*
 * Mail Baby API
 *
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// displays a list of mail service orders
        /// </summary>
        /// <param name="id">The ID of your mail order this will be sent through.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/mail")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetMailOrders")]
        [SwaggerResponse(statusCode: 200, type: typeof(MailOrders), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        public virtual IActionResult GetMailOrders([FromQuery]long? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MailOrders));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"password\" : \"guest123\",\n  \"comment\" : \"main mail account\",\n  \"id\" : 1234,\n  \"status\" : \"active\",\n  \"username\" : \"mb1234\"\n}, {\n  \"password\" : \"guest123\",\n  \"comment\" : \"main mail account\",\n  \"id\" : 1234,\n  \"status\" : \"active\",\n  \"username\" : \"mb1234\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MailOrders>(exampleJson)
                        : default(MailOrders);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Checks if the server is running
        /// </summary>
        /// <response code="200">Server is up and running</response>
        /// <response code="0">Something is wrong</response>
        [HttpGet]
        [Route("/ping")]
        [ValidateModelState]
        [SwaggerOperation("PingServer")]
        public virtual IActionResult PingServer()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0);

            throw new NotImplementedException();
        }

        /// <summary>
        /// places a mail order
        /// </summary>
        /// <remarks>Adds an item to the system</remarks>
        /// <param name="body">Inventory item to add</param>
        /// <response code="200">list of mail orders</response>
        /// <response code="400">invalid input, object invalid</response>
        /// <response code="409">an existing item already exists</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/mail/order")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlaceMailOrder")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        public virtual IActionResult PlaceMailOrder([FromBody]MailOrder body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sends an Email with Advanced Options
        /// </summary>
        /// <remarks>Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.</remarks>
        /// <param name="body"></param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/mail/advsend")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SendAdvMail")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenericResponse), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "The specified resource was not found")]
        public virtual IActionResult SendAdvMail([FromBody]SendMailAdv body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenericResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status_text\" : \"The command completed successfully.\",\n  \"status\" : \"ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GenericResponse>(exampleJson)
                        : default(GenericResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sends an Email
        /// </summary>
        /// <remarks>Sends An email through one of your mail orders.</remarks>
        /// <param name="body"></param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPost]
        [Route("/mail/send")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SendMail")]
        [SwaggerResponse(statusCode: 200, type: typeof(GenericResponse), description: "search results matching criteria")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "The specified resource was not found")]
        public virtual IActionResult SendMail([FromBody]Body1 body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GenericResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"status_text\" : \"The command completed successfully.\",\n  \"status\" : \"ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<GenericResponse>(exampleJson)
                        : default(GenericResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// validatess order details before placing an order
        /// </summary>
        /// <response code="200">list of mail orders</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/mail/order")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ValidateMailOrder")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        public virtual IActionResult ValidateMailOrder()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// displays the mail log
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for available inventory in the system </remarks>
        /// <param name="id">The ID of your mail order this will be sent through.</param>
        /// <param name="searchString">pass an optional search string for looking up inventory</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/mail/log")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ViewMailLogById")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MailLog>), description: "search results matching criteria")]
        public virtual IActionResult ViewMailLogById([FromQuery]long? id, [FromQuery]string searchString, [FromQuery]int? skip, [FromQuery][Range(0, 50)]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MailLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "[ {\n  \"id\" : 0\n}, {\n  \"id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<MailLog>>(exampleJson)
                        : default(List<MailLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}

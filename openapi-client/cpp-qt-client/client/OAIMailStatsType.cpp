/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMailStatsType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMailStatsType::OAIMailStatsType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMailStatsType::OAIMailStatsType() {
    this->initializeModel();
}

OAIMailStatsType::~OAIMailStatsType() {}

void OAIMailStatsType::initializeModel() {

    m_time_isSet = false;
    m_time_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_currency_symbol_isSet = false;
    m_currency_symbol_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_received_isSet = false;
    m_received_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAIMailStatsType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMailStatsType::fromJsonObject(QJsonObject json) {

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_currency_symbol_isValid = ::OpenAPI::fromJsonValue(m_currency_symbol, json[QString("currencySymbol")]);
    m_currency_symbol_isSet = !json[QString("currencySymbol")].isNull() && m_currency_symbol_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_received_isValid = ::OpenAPI::fromJsonValue(m_received, json[QString("received")]);
    m_received_isSet = !json[QString("received")].isNull() && m_received_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAIMailStatsType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMailStatsType::asJsonObject() const {
    QJsonObject obj;
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_currency_symbol_isSet) {
        obj.insert(QString("currencySymbol"), ::OpenAPI::toJsonValue(m_currency_symbol));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_received_isSet) {
        obj.insert(QString("received"), ::OpenAPI::toJsonValue(m_received));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_volume.isSet()) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

QString OAIMailStatsType::getTime() const {
    return m_time;
}
void OAIMailStatsType::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIMailStatsType::is_time_Set() const{
    return m_time_isSet;
}

bool OAIMailStatsType::is_time_Valid() const{
    return m_time_isValid;
}

qint32 OAIMailStatsType::getUsage() const {
    return m_usage;
}
void OAIMailStatsType::setUsage(const qint32 &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIMailStatsType::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIMailStatsType::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIMailStatsType::getCurrency() const {
    return m_currency;
}
void OAIMailStatsType::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIMailStatsType::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIMailStatsType::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIMailStatsType::getCurrencySymbol() const {
    return m_currency_symbol;
}
void OAIMailStatsType::setCurrencySymbol(const QString &currency_symbol) {
    m_currency_symbol = currency_symbol;
    m_currency_symbol_isSet = true;
}

bool OAIMailStatsType::is_currency_symbol_Set() const{
    return m_currency_symbol_isSet;
}

bool OAIMailStatsType::is_currency_symbol_Valid() const{
    return m_currency_symbol_isValid;
}

double OAIMailStatsType::getCost() const {
    return m_cost;
}
void OAIMailStatsType::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIMailStatsType::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIMailStatsType::is_cost_Valid() const{
    return m_cost_isValid;
}

qint32 OAIMailStatsType::getReceived() const {
    return m_received;
}
void OAIMailStatsType::setReceived(const qint32 &received) {
    m_received = received;
    m_received_isSet = true;
}

bool OAIMailStatsType::is_received_Set() const{
    return m_received_isSet;
}

bool OAIMailStatsType::is_received_Valid() const{
    return m_received_isValid;
}

qint32 OAIMailStatsType::getSent() const {
    return m_sent;
}
void OAIMailStatsType::setSent(const qint32 &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIMailStatsType::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIMailStatsType::is_sent_Valid() const{
    return m_sent_isValid;
}

OAIMailStatsType_volume OAIMailStatsType::getVolume() const {
    return m_volume;
}
void OAIMailStatsType::setVolume(const OAIMailStatsType_volume &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIMailStatsType::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIMailStatsType::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAIMailStatsType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMailStatsType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Error from '../model/Error';
import GenericResponse from '../model/GenericResponse';
import MailLog from '../model/MailLog';
import MailOrder from '../model/MailOrder';
import MailOrders from '../model/MailOrders';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getMailById operation.
     * @callback module:api/DefaultApi~getMailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets mail order information by id
     * returns information about a mail order in the system with the given id.
     * @param {module:api/DefaultApi~getMailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailOrder}
     */
    getMailById(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'apiLoginAuth', 'apiPasswordAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MailOrder;

      return this.apiClient.callApi(
        '/mail/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMailOrders operation.
     * @callback module:api/DefaultApi~getMailOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays a list of mail service orders
     * @param {module:api/DefaultApi~getMailOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailOrders}
     */
    getMailOrders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'apiLoginAuth', 'apiPasswordAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = MailOrders;

      return this.apiClient.callApi(
        '/mail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pingServer operation.
     * @callback module:api/DefaultApi~pingServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if the server is running
     * @param {module:api/DefaultApi~pingServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pingServer(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the placeMailOrder operation.
     * @callback module:api/DefaultApi~placeMailOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * places a mail order
     * Adds an item to the system
     * @param {Object} opts Optional parameters
     * @param {module:api/DefaultApi~placeMailOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    placeMailOrder(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'apiLoginAuth', 'apiPasswordAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/mail/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendMailById operation.
     * @callback module:api/DefaultApi~sendMailByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param {Object} opts Optional parameters
     * @param {module:api/DefaultApi~sendMailByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    sendMailById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'subject': opts['subject'],
        'body': opts['body'],
        'to': opts['to'],
        'from': opts['from']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'apiLoginAuth', 'apiPasswordAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenericResponse;

      return this.apiClient.callApi(
        '/mail/{id}/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the validateMailOrder operation.
     * @callback module:api/DefaultApi~validateMailOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validatess order details before placing an order
     * @param {module:api/DefaultApi~validateMailOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validateMailOrder(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'apiLoginAuth', 'apiPasswordAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/mail/order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the viewMailLogById operation.
     * @callback module:api/DefaultApi~viewMailLogByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MailLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Object} opts Optional parameters
     * @param {module:api/DefaultApi~viewMailLogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MailLog>}
     */
    viewMailLogById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'searchString': opts['searchString'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'apiLoginAuth', 'apiPasswordAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MailLog];

      return this.apiClient.callApi(
        '/mail/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}

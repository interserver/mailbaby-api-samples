/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmailAddressName from '../model/EmailAddressName';
import GenericResponse from '../model/GenericResponse';
import GetMailOrders401Response from '../model/GetMailOrders401Response';
import MailAttachment from '../model/MailAttachment';

/**
* Sending service.
* @module api/SendingApi
* @version 1.1.0
*/
export default class SendingApi {

    /**
    * Constructs a new SendingApi. 
    * @alias module:api/SendingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sendAdvMail operation.
     * @callback module:api/SendingApi~sendAdvMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param {String} subject The subject or title of the email
     * @param {String} body The main email contents.
     * @param {module:model/EmailAddressName} from 
     * @param {Array.<module:model/EmailAddressName>} to A list of destionation email addresses to send this to
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/EmailAddressName>} [replyto] (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
     * @param {Array.<module:model/EmailAddressName>} [cc] (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
     * @param {Array.<module:model/EmailAddressName>} [bcc] (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
     * @param {Array.<module:model/MailAttachment>} [attachments] (optional) File attachments to include in the email.  The file contents must be base64 encoded!
     * @param {Number} [id] (optional)  ID of the Mail order within our system to use as the Mail Account.
     * @param {module:api/SendingApi~sendAdvMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    sendAdvMail(subject, body, from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling sendAdvMail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendAdvMail");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sendAdvMail");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendAdvMail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'subject': subject,
        'body': body,
        'from': from,
        'to': this.apiClient.buildCollectionParam(to, 'csv'),
        'replyto': this.apiClient.buildCollectionParam(opts['replyto'], 'csv'),
        'cc': this.apiClient.buildCollectionParam(opts['cc'], 'csv'),
        'bcc': this.apiClient.buildCollectionParam(opts['bcc'], 'csv'),
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'id': opts['id']
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/mail/advsend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMail operation.
     * @callback module:api/SendingApi~sendMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * @param {String} to The Contact whom is the primary recipient of this email.
     * @param {String} from The contact whom is the this email is from.
     * @param {String} subject The subject or title of the email
     * @param {String} body The main email contents.
     * @param {module:api/SendingApi~sendMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    sendMail(to, from, subject, body, callback) {
      let postBody = null;
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendMail");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sendMail");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling sendMail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendMail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'to': to,
        'from': from,
        'subject': subject,
        'body': body
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/mail/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

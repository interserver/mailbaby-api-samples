extends Resource
class_name MailAttachment

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# MailAttachment Model
# (optional) File attachments to include in the email.  The file contents must be base64


# The filename of the attached file.
# Required: True
# Example: message.txt
# isArray: false
@export var filename: String = "":
	set(value):
		__filename__was__set = true
		filename = value
var __filename__was__set := false

# The file contents base64 encoded
# Required: True
# Example: aGVsbG8gdGhlcmUK
# isArray: false
@export var data: String = "":
	set(value):
		__data__was__set = true
		data = value
var __data__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__filename__was__set:
		bzz_missing_properties.append("filename")
	if not self.__data__was__set:
		bzz_missing_properties.append("data")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__filename__was__set:
		bzz_dictionary["filename"] = self.filename
	if self.__data__was__set:
		bzz_dictionary["data"] = self.data
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("filename"):
		me.filename = from_dict["filename"]
	if from_dict.has("data"):
		me.data = from_dict["data"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.GenericResponse;
import io.swagger.model.MailLog;
import io.swagger.model.MailOrder;
import io.swagger.model.MailOrders;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micronaut.http.*;
import io.micronaut.http.annotation.*;
import io.reactivex.Single;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nullable;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.MicronautCodegen", date = "2021-04-28T14:00:54.838290-04:00[America/New_York]")
@Controller
public interface MailApi {


    @Operation(summary = "Gets mail order information by id", operationId = "getMailById", description = "returns information about a mail order in the system with the given id." )
    @ApiResponse(responseCode = "200", description = "Successful operation")
    @Get(value = "/mail/{id}", produces = { "application/json" })
    default Single<HttpResponse<MailOrder>> getMailById(@Parameter(description = "User ID") @PathVariable("id") Long id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "displays a list of mail service orders", operationId = "getMailOrders", description = "" )
    @ApiResponse(responseCode = "200", description = "OK")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @Get(value = "/mail", produces = { "application/json", "application/xml", "text/plain" })
    default Single<HttpResponse<MailOrders>> getMailOrders() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "places a mail order", operationId = "placeMailOrder", description = "Adds an item to the system" )
    @ApiResponse(responseCode = "200", description = "list of mail orders")
    @ApiResponse(responseCode = "400", description = "invalid input, object invalid")
    @ApiResponse(responseCode = "409", description = "an existing item already exists")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @Post(value = "/mail/order", produces = { "application/json" }, consumes = {"application/json"})
    default Single<HttpResponse<Void>> placeMailOrder(@Parameter(description = "Inventory item to add") @Valid @Body MailOrder body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Sends an Email", operationId = "sendMailById", description = "Sends An email through one of your mail orders." )
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "bad input parameter")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/{id}/send", produces = { "application/json" })
    default Single<HttpResponse<GenericResponse>> sendMailById(@Parameter(description = "User ID") @PathVariable("id") Long id
,@Nullable @Parameter(description = "") @Valid @QueryValue(value = "subject") String subject
,@Nullable @Parameter(description = "") @Valid @QueryValue(value = "body") String body
,@Nullable @Parameter(description = "") @Valid @QueryValue(value = "to") String to
,@Nullable @Parameter(description = "") @Valid @QueryValue(value = "from") String from
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "validatess order details before placing an order", operationId = "validateMailOrder", description = "" )
    @ApiResponse(responseCode = "200", description = "list of mail orders")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @Get(value = "/mail/order", produces = { "application/json" })
    default Single<HttpResponse<Void>> validateMailOrder() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "displays the mail log", operationId = "viewMailLogById", description = "By passing in the appropriate options, you can search for available inventory in the system " )
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "bad input parameter")
    @Get(value = "/mail/{id}/log", produces = { "application/json" })
    default Single<HttpResponse<List<MailLog>>> viewMailLogById(@Parameter(description = "User ID") @PathVariable("id") Long id
,@Nullable @Parameter(description = "pass an optional search string for looking up inventory") @Valid @QueryValue(value = "searchString") String searchString
,@Nullable @Min(0)@Parameter(description = "number of records to skip for pagination") @Valid @QueryValue(value = "skip") Integer skip
,@Nullable @Min(0) @Max(50) @Parameter(description = "maximum number of records to return") @Valid @QueryValue(value = "limit") Integer limit
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }

}

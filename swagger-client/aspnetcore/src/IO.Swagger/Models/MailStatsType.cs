/*
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost.
    /// </summary>
    [DataContract]
    public partial class MailStatsType : IEquatable<MailStatsType>
    { 
        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TimeEnum
        {
            /// <summary>
            /// Enum AllEnum for all
            /// </summary>
            [EnumMember(Value = "all")]
            AllEnum = 0,
            /// <summary>
            /// Enum BillingEnum for billing
            /// </summary>
            [EnumMember(Value = "billing")]
            BillingEnum = 1,
            /// <summary>
            /// Enum MonthEnum for month
            /// </summary>
            [EnumMember(Value = "month")]
            MonthEnum = 2,
            /// <summary>
            /// Enum NUMBER_7d for 7d
            /// </summary>
            [EnumMember(Value = "7d")]
            NUMBER_7d = 3,
            /// <summary>
            /// Enum _24hEnum for 24h
            /// </summary>
            [EnumMember(Value = "24h")]
            _24hEnum = 4,
            /// <summary>
            /// Enum TodayEnum for today
            /// </summary>
            [EnumMember(Value = "today")]
            TodayEnum = 5,
            /// <summary>
            /// Enum _1hEnum for 1h
            /// </summary>
            [EnumMember(Value = "1h")]
            _1hEnum = 6        }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>

        [DataMember(Name="time")]
        public TimeEnum? Time { get; set; }

        /// <summary>
        /// Gets or Sets Usage
        /// </summary>

        [DataMember(Name="usage")]
        public int? Usage { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>

        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>

        [DataMember(Name="currencySymbol")]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>

        [DataMember(Name="cost")]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets Received
        /// </summary>

        [DataMember(Name="received")]
        public int? Received { get; set; }

        /// <summary>
        /// Gets or Sets Sent
        /// </summary>

        [DataMember(Name="sent")]
        public int? Sent { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>

        [DataMember(Name="volume")]
        public MailStatsTypeVolume Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailStatsType {\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Received: ").Append(Received).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MailStatsType)obj);
        }

        /// <summary>
        /// Returns true if MailStatsType instances are equal
        /// </summary>
        /// <param name="other">Instance of MailStatsType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailStatsType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    Usage == other.Usage ||
                    Usage != null &&
                    Usage.Equals(other.Usage)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    CurrencySymbol == other.CurrencySymbol ||
                    CurrencySymbol != null &&
                    CurrencySymbol.Equals(other.CurrencySymbol)
                ) && 
                (
                    Cost == other.Cost ||
                    Cost != null &&
                    Cost.Equals(other.Cost)
                ) && 
                (
                    Received == other.Received ||
                    Received != null &&
                    Received.Equals(other.Received)
                ) && 
                (
                    Sent == other.Sent ||
                    Sent != null &&
                    Sent.Equals(other.Sent)
                ) && 
                (
                    Volume == other.Volume ||
                    Volume != null &&
                    Volume.Equals(other.Volume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (Usage != null)
                    hashCode = hashCode * 59 + Usage.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (CurrencySymbol != null)
                    hashCode = hashCode * 59 + CurrencySymbol.GetHashCode();
                    if (Cost != null)
                    hashCode = hashCode * 59 + Cost.GetHashCode();
                    if (Received != null)
                    hashCode = hashCode * 59 + Received.GetHashCode();
                    if (Sent != null)
                    hashCode = hashCode * 59 + Sent.GetHashCode();
                    if (Volume != null)
                    hashCode = hashCode * 59 + Volume.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MailStatsType left, MailStatsType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MailStatsType left, MailStatsType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

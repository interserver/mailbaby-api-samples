/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MailAttachment.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




MailAttachment::MailAttachment()
{
    m_Filename = utility::conversions::to_string_t("");
    m_FilenameIsSet = false;
    m_DataIsSet = false;
}

MailAttachment::~MailAttachment()
{
}

void MailAttachment::validate()
{
    // TODO: implement validation
}

web::json::value MailAttachment::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FilenameIsSet)
    {
        val[utility::conversions::to_string_t("filename")] = ModelBase::toJson(m_Filename);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t("data")] = ModelBase::toJson(m_Data);
    }

    return val;
}

bool MailAttachment::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("filename")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filename"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_filename;
            ok &= ModelBase::fromJson(fieldValue, refVal_filename);
            setFilename(refVal_filename);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HttpContent> refVal_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_data);
            setData(refVal_data);
        }
    }
    return ok;
}

void MailAttachment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filename"), m_Filename));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), m_Data));
    }
}

bool MailAttachment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("filename")))
    {
        utility::string_t refVal_filename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filename")), refVal_filename );
        setFilename(refVal_filename);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data")))
    {
        std::shared_ptr<HttpContent> refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data")), refVal_data );
        setData(refVal_data);
    }
    return ok;
}

utility::string_t MailAttachment::getFilename() const
{
    return m_Filename;
}

void MailAttachment::setFilename(const utility::string_t& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}

bool MailAttachment::filenameIsSet() const
{
    return m_FilenameIsSet;
}

void MailAttachment::unsetFilename()
{
    m_FilenameIsSet = false;
}
std::shared_ptr<HttpContent> MailAttachment::getData() const
{
    return m_Data;
}

void MailAttachment::setData(const std::shared_ptr<HttpContent>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool MailAttachment::dataIsSet() const
{
    return m_DataIsSet;
}

void MailAttachment::unsetData()
{
    m_DataIsSet = false;
}
}
}
}
}



/*
 * MailBaby Email Delivery and Management Service API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// An email record
    /// </summary>
    [DataContract]
    public partial class MailLogEntry : IEquatable<MailLogEntry>
    { 
        /// <summary>
        /// internal db id
        /// </summary>
        /// <value>internal db id</value>
        [Required]

        [DataMember(Name="_id")]
        public int? Id { get; set; }

        /// <summary>
        /// mail id
        /// </summary>
        /// <value>mail id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// from address
        /// </summary>
        /// <value>from address</value>
        [Required]

        [DataMember(Name="from")]
        public string From { get; set; }

        /// <summary>
        /// to address
        /// </summary>
        /// <value>to address</value>
        [Required]

        [DataMember(Name="to")]
        public string To { get; set; }

        /// <summary>
        /// email subject
        /// </summary>
        /// <value>email subject</value>
        [Required]

        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// message id
        /// </summary>
        /// <value>message id</value>

        [DataMember(Name="messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// creation date
        /// </summary>
        /// <value>creation date</value>
        [Required]

        [DataMember(Name="created")]
        public string Created { get; set; }

        /// <summary>
        /// creation timestamp
        /// </summary>
        /// <value>creation timestamp</value>
        [Required]

        [DataMember(Name="time")]
        public int? Time { get; set; }

        /// <summary>
        /// user account
        /// </summary>
        /// <value>user account</value>
        [Required]

        [DataMember(Name="user")]
        public string User { get; set; }

        /// <summary>
        /// transaction type
        /// </summary>
        /// <value>transaction type</value>
        [Required]

        [DataMember(Name="transtype")]
        public string Transtype { get; set; }

        /// <summary>
        /// origin ip
        /// </summary>
        /// <value>origin ip</value>
        [Required]

        [DataMember(Name="origin")]
        public string Origin { get; set; }

        /// <summary>
        /// interface name
        /// </summary>
        /// <value>interface name</value>
        [Required]

        [DataMember(Name="interface")]
        public string _Interface { get; set; }

        /// <summary>
        /// sending zone
        /// </summary>
        /// <value>sending zone</value>
        [Required]

        [DataMember(Name="sendingZone")]
        public string SendingZone { get; set; }

        /// <summary>
        /// email body size in bytes
        /// </summary>
        /// <value>email body size in bytes</value>
        [Required]

        [DataMember(Name="bodySize")]
        public int? BodySize { get; set; }

        /// <summary>
        /// index of email in the to adderess list
        /// </summary>
        /// <value>index of email in the to adderess list</value>
        [Required]

        [DataMember(Name="seq")]
        public int? Seq { get; set; }

        /// <summary>
        /// to address this email is being sent to
        /// </summary>
        /// <value>to address this email is being sent to</value>
        [Required]

        [DataMember(Name="recipient")]
        public string Recipient { get; set; }

        /// <summary>
        /// to address domain
        /// </summary>
        /// <value>to address domain</value>
        [Required]

        [DataMember(Name="domain")]
        public string Domain { get; set; }

        /// <summary>
        /// locked status
        /// </summary>
        /// <value>locked status</value>
        [Required]

        [DataMember(Name="locked")]
        public int? Locked { get; set; }

        /// <summary>
        /// lock timestamp
        /// </summary>
        /// <value>lock timestamp</value>
        [Required]

        [DataMember(Name="lockTime")]
        public string LockTime { get; set; }

        /// <summary>
        /// assigned server
        /// </summary>
        /// <value>assigned server</value>
        [Required]

        [DataMember(Name="assigned")]
        public string Assigned { get; set; }

        /// <summary>
        /// queued timestamp
        /// </summary>
        /// <value>queued timestamp</value>
        [Required]

        [DataMember(Name="queued")]
        public string Queued { get; set; }

        /// <summary>
        /// mx hostname
        /// </summary>
        /// <value>mx hostname</value>
        [Required]

        [DataMember(Name="mxHostname")]
        public string MxHostname { get; set; }

        /// <summary>
        /// mail delivery response
        /// </summary>
        /// <value>mail delivery response</value>
        [Required]

        [DataMember(Name="response")]
        public string Response { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailLogEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Transtype: ").Append(Transtype).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  _Interface: ").Append(_Interface).Append("\n");
            sb.Append("  SendingZone: ").Append(SendingZone).Append("\n");
            sb.Append("  BodySize: ").Append(BodySize).Append("\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  LockTime: ").Append(LockTime).Append("\n");
            sb.Append("  Assigned: ").Append(Assigned).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  MxHostname: ").Append(MxHostname).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MailLogEntry)obj);
        }

        /// <summary>
        /// Returns true if MailLogEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of MailLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailLogEntry other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    From.Equals(other.From)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    MessageId == other.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(other.MessageId)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.Equals(other.Time)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Transtype == other.Transtype ||
                    Transtype != null &&
                    Transtype.Equals(other.Transtype)
                ) && 
                (
                    Origin == other.Origin ||
                    Origin != null &&
                    Origin.Equals(other.Origin)
                ) && 
                (
                    _Interface == other._Interface ||
                    _Interface != null &&
                    _Interface.Equals(other._Interface)
                ) && 
                (
                    SendingZone == other.SendingZone ||
                    SendingZone != null &&
                    SendingZone.Equals(other.SendingZone)
                ) && 
                (
                    BodySize == other.BodySize ||
                    BodySize != null &&
                    BodySize.Equals(other.BodySize)
                ) && 
                (
                    Seq == other.Seq ||
                    Seq != null &&
                    Seq.Equals(other.Seq)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.Equals(other.Recipient)
                ) && 
                (
                    Domain == other.Domain ||
                    Domain != null &&
                    Domain.Equals(other.Domain)
                ) && 
                (
                    Locked == other.Locked ||
                    Locked != null &&
                    Locked.Equals(other.Locked)
                ) && 
                (
                    LockTime == other.LockTime ||
                    LockTime != null &&
                    LockTime.Equals(other.LockTime)
                ) && 
                (
                    Assigned == other.Assigned ||
                    Assigned != null &&
                    Assigned.Equals(other.Assigned)
                ) && 
                (
                    Queued == other.Queued ||
                    Queued != null &&
                    Queued.Equals(other.Queued)
                ) && 
                (
                    MxHostname == other.MxHostname ||
                    MxHostname != null &&
                    MxHostname.Equals(other.MxHostname)
                ) && 
                (
                    Response == other.Response ||
                    Response != null &&
                    Response.Equals(other.Response)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Transtype != null)
                    hashCode = hashCode * 59 + Transtype.GetHashCode();
                    if (Origin != null)
                    hashCode = hashCode * 59 + Origin.GetHashCode();
                    if (_Interface != null)
                    hashCode = hashCode * 59 + _Interface.GetHashCode();
                    if (SendingZone != null)
                    hashCode = hashCode * 59 + SendingZone.GetHashCode();
                    if (BodySize != null)
                    hashCode = hashCode * 59 + BodySize.GetHashCode();
                    if (Seq != null)
                    hashCode = hashCode * 59 + Seq.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (Domain != null)
                    hashCode = hashCode * 59 + Domain.GetHashCode();
                    if (Locked != null)
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (LockTime != null)
                    hashCode = hashCode * 59 + LockTime.GetHashCode();
                    if (Assigned != null)
                    hashCode = hashCode * 59 + Assigned.GetHashCode();
                    if (Queued != null)
                    hashCode = hashCode * 59 + Queued.GetHashCode();
                    if (MxHostname != null)
                    hashCode = hashCode * 59 + MxHostname.GetHashCode();
                    if (Response != null)
                    hashCode = hashCode * 59 + Response.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MailLogEntry left, MailLogEntry right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MailLogEntry left, MailLogEntry right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

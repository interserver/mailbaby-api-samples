/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DenyRuleNew;
import io.swagger.model.DenyRuleRecord;
import io.swagger.model.EmailAddress;
import io.swagger.model.EmailAddressName;
import io.swagger.model.GenericResponse;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse401;
import io.swagger.model.MailAttachment;
import io.swagger.model.MailBlocks;
import io.swagger.model.MailLog;
import io.swagger.model.MailOrder;
import io.swagger.model.SendMail;
import io.swagger.model.SendMailAdv;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micronaut.http.*;
import io.micronaut.http.annotation.*;
import io.reactivex.Single;
import io.swagger.v3.oas.annotations.*;
import io.swagger.v3.oas.annotations.responses.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nullable;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.MicronautCodegen", date = "2023-08-10T12:38:20.165655-04:00[America/New_York]")
@Controller
public interface MailApi {


    @Operation(summary = "Creates a new email deny rule.", operationId = "addRule", description = "Adds a new email deny rule into the system to block new emails that match the given criteria" , tags = {"Blocking"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/rules", produces = { "application/json" }, consumes = {"application/x-www-form-urlencoded", "application/json"})
    default Single<HttpResponse<GenericResponse>> addRule(@Parameter(description = "") @QueryValue(value = "user")  String user
,@Parameter(description = "") @QueryValue(value = "type")  String type
,@Parameter(description = "") @QueryValue(value = "data")  String data
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Creates a new email deny rule.", operationId = "addRule", description = "Adds a new email deny rule into the system to block new emails that match the given criteria" , tags = {"Blocking"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/rules", produces = { "application/json" }, consumes = {"application/x-www-form-urlencoded", "application/json"})
    default Single<HttpResponse<GenericResponse>> addRule(@Parameter(description = "These are the fields needed to create a new email deny rule.") @Valid @Body DenyRuleNew body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Removes an deny mail rule.", operationId = "deleteRule", description = "Removes one of the configured deny mail rules from the system." , tags = {"Blocking"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Delete(value = "/mail/rules/{ruleId}", produces = { "application/json" })
    default Single<HttpResponse<GenericResponse>> deleteRule(@Parameter(description = "The ID of the Rules entry.") @PathVariable("ruleId") Integer ruleId
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Removes an email address from the blocked list", operationId = "delistBlock", description = "Removes an email address from the various block lists. " , tags = {"Blocking"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/blocks/delete", produces = { "application/json" }, consumes = {"application/json", "multipart/form-data"})
    default Single<HttpResponse<GenericResponse>> delistBlock(@Parameter(description = "") @Valid @Body EmailAddress body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Removes an email address from the blocked list", operationId = "delistBlock", description = "Removes an email address from the various block lists. " , tags = {"Blocking"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/blocks/delete", produces = { "application/json" }, consumes = {"application/json", "multipart/form-data"})
    default Single<HttpResponse<GenericResponse>> delistBlock(@Parameter(description = "") @QueryValue(value = "email")  String email
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "displays a list of blocked email addresses", operationId = "getMailBlocks", description = "" , tags = {"Blocking"})
    @ApiResponse(responseCode = "200", description = "OK")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "Unauthorized")
    @Get(value = "/mail/blocks", produces = { "application/json" })
    default Single<HttpResponse<MailBlocks>> getMailBlocks() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "displays a list of mail service orders", operationId = "getMailOrders", description = "This will return a list of the mail orders you have in our system including their id, status, username, and optional comment." , tags = {"Services"})
    @ApiResponse(responseCode = "200", description = "OK")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "Unauthorized")
    @Get(value = "/mail", produces = { "application/json" })
    default Single<HttpResponse<List<MailOrder>>> getMailOrders() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Displays a listing of deny email rules.", operationId = "getRules", description = "Returns a listing of all the deny block rules you have configured." , tags = {"Blocking"})
    @ApiResponse(responseCode = "200", description = "OK")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "Unauthorized")
    @Get(value = "/mail/rules", produces = { "application/json" })
    default Single<HttpResponse<List<DenyRuleRecord>>> getRules() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "displays a list of blocked email addresses", operationId = "getStats", description = "" , tags = {"History"})
    @ApiResponse(responseCode = "200", description = "OK")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "Unauthorized")
    @Get(value = "/mail/stats", produces = { "application/json" })
    default Single<HttpResponse<List<InlineResponse200>>> getStats() {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Sends an Email with Advanced Options", operationId = "sendAdvMail", description = "Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc." , tags = {"Sending"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/advsend", produces = { "application/json" }, consumes = {"application/x-www-form-urlencoded", "application/json"})
    default Single<HttpResponse<GenericResponse>> sendAdvMail(@Parameter(description = "") @QueryValue(value = "subject")  String subject
,@Parameter(description = "") @QueryValue(value = "body")  String body
,@Parameter(description = "") @QueryValue(value = "from")  EmailAddressName from
,@Parameter(description = "") @QueryValue(value = "to")  List<EmailAddressName> to
,@Parameter(description = "") @QueryValue(value = "replyto")  List<EmailAddressName> replyto
,@Parameter(description = "") @QueryValue(value = "cc")  List<EmailAddressName> cc
,@Parameter(description = "") @QueryValue(value = "bcc")  List<EmailAddressName> bcc
,@Parameter(description = "") @QueryValue(value = "attachments")  List<MailAttachment> attachments
,@Parameter(description = "") @QueryValue(value = "id")  Long id
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Sends an Email with Advanced Options", operationId = "sendAdvMail", description = "Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc." , tags = {"Sending"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/advsend", produces = { "application/json" }, consumes = {"application/x-www-form-urlencoded", "application/json"})
    default Single<HttpResponse<GenericResponse>> sendAdvMail(@Parameter(description = "") @Valid @Body SendMailAdv body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Sends an Email", operationId = "sendMail", description = "Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. " , tags = {"Sending"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/send", produces = { "application/json" }, consumes = {"application/x-www-form-urlencoded", "application/json"})
    default Single<HttpResponse<GenericResponse>> sendMail(@Parameter(description = "") @QueryValue(value = "to")  String to
,@Parameter(description = "") @QueryValue(value = "from")  String from
,@Parameter(description = "") @QueryValue(value = "subject")  String subject
,@Parameter(description = "") @QueryValue(value = "body")  String body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "Sends an Email", operationId = "sendMail", description = "Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. " , tags = {"Sending"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "The specified resource was not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "404", description = "The specified resource was not found")
    @Post(value = "/mail/send", produces = { "application/json" }, consumes = {"application/x-www-form-urlencoded", "application/json"})
    default Single<HttpResponse<GenericResponse>> sendMail(@Parameter(description = "") @Valid @Body SendMail body
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }


    @Operation(summary = "displays the mail log", operationId = "viewMailLog", description = "Get a listing of the emails sent through this system " , tags = {"History"})
    @ApiResponse(responseCode = "200", description = "search results matching criteria")
    @ApiResponse(responseCode = "400", description = "bad input parameter")
    @Get(value = "/mail/log", produces = { "application/json" })
    default Single<HttpResponse<MailLog>> viewMailLog(@Nullable @Parameter(description = "The ID of your mail order this will be sent through.") @Valid @QueryValue(value = "id") Long id
,@Nullable @Parameter(description = "originating ip address sending mail") @Valid @QueryValue(value = "origin") String origin
,@Nullable @Parameter(description = "mx record mail was sent to") @Valid @QueryValue(value = "mx") String mx
,@Nullable @Parameter(description = "from email address") @Valid @QueryValue(value = "from") String from
,@Nullable @Parameter(description = "to/destination email address") @Valid @QueryValue(value = "to") String to
,@Nullable @Parameter(description = "subject containing this string") @Valid @QueryValue(value = "subject") String subject
,@Nullable @Parameter(description = "mail id") @Valid @QueryValue(value = "mailid") String mailid
,@Nullable @Min(0)@Parameter(description = "number of records to skip for pagination") @Valid @QueryValue(value = "skip", defaultValue = "0") Integer skip
,@Nullable @Min(1) @Max(10000) @Parameter(description = "maximum number of records to return") @Valid @QueryValue(value = "limit", defaultValue = "100") Integer limit
,@Nullable @Min(0L) @Max(9999999999L) @Parameter(description = "earliest date to get emails in unix timestamp format") @Valid @QueryValue(value = "startDate") Long startDate
,@Nullable @Min(0L) @Max(9999999999L) @Parameter(description = "earliest date to get emails in unix timestamp format") @Valid @QueryValue(value = "endDate") Long endDate
) {
        return Single.fromCallable(() -> {
            throw new UnsupportedOperationException();
        });
    }

}

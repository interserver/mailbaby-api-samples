/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericResponse from '../model/GenericResponse';
import GetMailOrders200ResponseInner from '../model/GetMailOrders200ResponseInner';
import GetMailOrders401Response from '../model/GetMailOrders401Response';
import MailLog from '../model/MailLog';
import SendMailAdv from '../model/SendMailAdv';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMailOrders operation.
     * @callback module:api/DefaultApi~getMailOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetMailOrders200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays a list of mail service orders
     * @param {module:api/DefaultApi~getMailOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetMailOrders200ResponseInner>}
     */
    getMailOrders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetMailOrders200ResponseInner];
      return this.apiClient.callApi(
        '/mail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pingServer operation.
     * @callback module:api/DefaultApi~pingServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if the server is running
     * @param {module:api/DefaultApi~pingServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pingServer(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendAdvMail operation.
     * @callback module:api/DefaultApi~sendAdvMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param {module:model/SendMailAdv} sendMailAdv 
     * @param {module:api/DefaultApi~sendAdvMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    sendAdvMail(sendMailAdv, callback) {
      let postBody = sendMailAdv;
      // verify the required parameter 'sendMailAdv' is set
      if (sendMailAdv === undefined || sendMailAdv === null) {
        throw new Error("Missing the required parameter 'sendMailAdv' when calling sendAdvMail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/mail/advsend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMail operation.
     * @callback module:api/DefaultApi~sendMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * @param {String} to The Contact whom is the primary recipient of this email.
     * @param {String} from The contact whom is the this email is from.
     * @param {String} subject The subject or title of the email
     * @param {String} body The main email contents.
     * @param {module:api/DefaultApi~sendMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    sendMail(to, from, subject, body, callback) {
      let postBody = null;
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendMail");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sendMail");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling sendMail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendMail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'to': to,
        'from': from,
        'subject': subject,
        'body': body
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/mail/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewMailLog operation.
     * @callback module:api/DefaultApi~viewMailLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id The ID of your mail order this will be sent through.
     * @param {String} opts.search pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination (default to 0)
     * @param {Number} opts.limit maximum number of records to return (default to 100)
     * @param {module:api/DefaultApi~viewMailLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MailLog}
     */
    viewMailLog(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'search': opts['search'],
        'skip': opts['skip'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MailLog;
      return this.apiClient.callApi(
        '/mail/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

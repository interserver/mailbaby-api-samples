/*
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SendMailAdvAttachmentsInner;
import org.openapitools.client.model.SendMailAdvBccInner;
import org.openapitools.client.model.SendMailAdvCcInner;
import org.openapitools.client.model.SendMailAdvFrom;
import org.openapitools.client.model.SendMailAdvReplytoInner;
import org.openapitools.client.model.SendMailAdvToInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for an Email
 */
@ApiModel(description = "Details for an Email")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-03T15:05:53.211318-05:00[America/New_York]")
public class SendMailAdv {
  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private SendMailAdvFrom from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<SendMailAdvToInner> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLYTO = "replyto";
  @SerializedName(SERIALIZED_NAME_REPLYTO)
  private List<SendMailAdvReplytoInner> replyto = null;

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<SendMailAdvCcInner> cc = null;

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  private List<SendMailAdvBccInner> bcc = null;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<SendMailAdvAttachmentsInner> attachments = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public SendMailAdv() { 
  }

  public SendMailAdv subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * The subject or title of the email
   * @return subject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Your Package has been Delivered!", required = true, value = "The subject or title of the email")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public SendMailAdv body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * The main email contents.
   * @return body
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "The package you ordered on 2021-01-23 has been delivered. If the package is broken into many pieces, please blaim someone else.", required = true, value = "The main email contents.")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public SendMailAdv from(SendMailAdvFrom from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SendMailAdvFrom getFrom() {
    return from;
  }


  public void setFrom(SendMailAdvFrom from) {
    this.from = from;
  }


  public SendMailAdv to(List<SendMailAdvToInner> to) {
    
    this.to = to;
    return this;
  }

  public SendMailAdv addToItem(SendMailAdvToInner toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * A list of destionation email addresses to send this to
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A list of destionation email addresses to send this to")

  public List<SendMailAdvToInner> getTo() {
    return to;
  }


  public void setTo(List<SendMailAdvToInner> to) {
    this.to = to;
  }


  public SendMailAdv replyto(List<SendMailAdvReplytoInner> replyto) {
    
    this.replyto = replyto;
    return this;
  }

  public SendMailAdv addReplytoItem(SendMailAdvReplytoInner replytoItem) {
    if (this.replyto == null) {
      this.replyto = new ArrayList<>();
    }
    this.replyto.add(replytoItem);
    return this;
  }

   /**
   * (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
   * @return replyto
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.")

  public List<SendMailAdvReplytoInner> getReplyto() {
    return replyto;
  }


  public void setReplyto(List<SendMailAdvReplytoInner> replyto) {
    this.replyto = replyto;
  }


  public SendMailAdv cc(List<SendMailAdvCcInner> cc) {
    
    this.cc = cc;
    return this;
  }

  public SendMailAdv addCcItem(SendMailAdvCcInner ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

   /**
   * (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
   * @return cc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.")

  public List<SendMailAdvCcInner> getCc() {
    return cc;
  }


  public void setCc(List<SendMailAdvCcInner> cc) {
    this.cc = cc;
  }


  public SendMailAdv bcc(List<SendMailAdvBccInner> bcc) {
    
    this.bcc = bcc;
    return this;
  }

  public SendMailAdv addBccItem(SendMailAdvBccInner bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

   /**
   * (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
   * @return bcc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.")

  public List<SendMailAdvBccInner> getBcc() {
    return bcc;
  }


  public void setBcc(List<SendMailAdvBccInner> bcc) {
    this.bcc = bcc;
  }


  public SendMailAdv attachments(List<SendMailAdvAttachmentsInner> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public SendMailAdv addAttachmentsItem(SendMailAdvAttachmentsInner attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * (optional) File attachments to include in the email.  The file contents must be base64 encoded!
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(optional) File attachments to include in the email.  The file contents must be base64 encoded!")

  public List<SendMailAdvAttachmentsInner> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<SendMailAdvAttachmentsInner> attachments) {
    this.attachments = attachments;
  }


  public SendMailAdv id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * (optional)  ID of the Mail order within our system to use as the Mail Account.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5000", value = "(optional)  ID of the Mail order within our system to use as the Mail Account.")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMailAdv sendMailAdv = (SendMailAdv) o;
    return Objects.equals(this.subject, sendMailAdv.subject) &&
        Objects.equals(this.body, sendMailAdv.body) &&
        Objects.equals(this.from, sendMailAdv.from) &&
        Objects.equals(this.to, sendMailAdv.to) &&
        Objects.equals(this.replyto, sendMailAdv.replyto) &&
        Objects.equals(this.cc, sendMailAdv.cc) &&
        Objects.equals(this.bcc, sendMailAdv.bcc) &&
        Objects.equals(this.attachments, sendMailAdv.attachments) &&
        Objects.equals(this.id, sendMailAdv.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, body, from, to, replyto, cc, bcc, attachments, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMailAdv {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    replyto: ").append(toIndentedString(replyto)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subject");
    openapiFields.add("body");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("replyto");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("attachments");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SendMailAdv
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SendMailAdv.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendMailAdv is not found in the empty JSON string", SendMailAdv.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SendMailAdv.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendMailAdv` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendMailAdv.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // validate the optional field `from`
      if (jsonObj.getAsJsonObject("from") != null) {
        SendMailAdvFrom.validateJsonObject(jsonObj.getAsJsonObject("from"));
      }
      JsonArray jsonArrayto = jsonObj.getAsJsonArray("to");
      if (jsonArrayto != null) {
        // ensure the json data is an array
        if (!jsonObj.get("to").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
        }

        // validate the optional field `to` (array)
        for (int i = 0; i < jsonArrayto.size(); i++) {
          SendMailAdvToInner.validateJsonObject(jsonArrayto.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayreplyto = jsonObj.getAsJsonArray("replyto");
      if (jsonArrayreplyto != null) {
        // ensure the json data is an array
        if (!jsonObj.get("replyto").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `replyto` to be an array in the JSON string but got `%s`", jsonObj.get("replyto").toString()));
        }

        // validate the optional field `replyto` (array)
        for (int i = 0; i < jsonArrayreplyto.size(); i++) {
          SendMailAdvReplytoInner.validateJsonObject(jsonArrayreplyto.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraycc = jsonObj.getAsJsonArray("cc");
      if (jsonArraycc != null) {
        // ensure the json data is an array
        if (!jsonObj.get("cc").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
        }

        // validate the optional field `cc` (array)
        for (int i = 0; i < jsonArraycc.size(); i++) {
          SendMailAdvCcInner.validateJsonObject(jsonArraycc.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraybcc = jsonObj.getAsJsonArray("bcc");
      if (jsonArraybcc != null) {
        // ensure the json data is an array
        if (!jsonObj.get("bcc").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
        }

        // validate the optional field `bcc` (array)
        for (int i = 0; i < jsonArraybcc.size(); i++) {
          SendMailAdvBccInner.validateJsonObject(jsonArraybcc.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
      if (jsonArrayattachments != null) {
        // ensure the json data is an array
        if (!jsonObj.get("attachments").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
        }

        // validate the optional field `attachments` (array)
        for (int i = 0; i < jsonArrayattachments.size(); i++) {
          SendMailAdvAttachmentsInner.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendMailAdv.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendMailAdv' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendMailAdv> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendMailAdv.class));

       return (TypeAdapter<T>) new TypeAdapter<SendMailAdv>() {
           @Override
           public void write(JsonWriter out, SendMailAdv value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendMailAdv read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SendMailAdv given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SendMailAdv
  * @throws IOException if the JSON string is invalid with respect to SendMailAdv
  */
  public static SendMailAdv fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendMailAdv.class);
  }

 /**
  * Convert an instance of SendMailAdv to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


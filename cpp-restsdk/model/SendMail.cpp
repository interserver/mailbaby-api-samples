/**
 * Mail Baby API
 * This is an API for accesssing the mail services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SendMail.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




SendMail::SendMail()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_FromIsSet = false;
    m_ToIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_ReplytoIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_AttachmentsIsSet = false;
}

SendMail::~SendMail()
{
}

void SendMail::validate()
{
    // TODO: implement validation
}

web::json::value SendMail::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_ReplytoIsSet)
    {
        val[utility::conversions::to_string_t("replyto")] = ModelBase::toJson(m_Replyto);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t("cc")] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t("bcc")] = ModelBase::toJson(m_Bcc);
    }
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t("attachments")] = ModelBase::toJson(m_Attachments);
    }

    return val;
}

bool SendMail::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MailContact> refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MailContact>> refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("replyto")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("replyto"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MailContact>> refVal_replyto;
            ok &= ModelBase::fromJson(fieldValue, refVal_replyto);
            setReplyto(refVal_replyto);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cc"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MailContact>> refVal_cc;
            ok &= ModelBase::fromJson(fieldValue, refVal_cc);
            setCc(refVal_cc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bcc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bcc"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MailContact>> refVal_bcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_bcc);
            setBcc(refVal_bcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attachments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attachments"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MailAttachment>> refVal_attachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachments);
            setAttachments(refVal_attachments);
        }
    }
    return ok;
}

void SendMail::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_ReplytoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("replyto"), m_Replyto));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cc"), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bcc"), m_Bcc));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attachments"), m_Attachments));
    }
}

bool SendMail::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int64_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        std::shared_ptr<MailContact> refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        std::vector<std::shared_ptr<MailContact>> refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("replyto")))
    {
        std::vector<std::shared_ptr<MailContact>> refVal_replyto;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("replyto")), refVal_replyto );
        setReplyto(refVal_replyto);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cc")))
    {
        std::vector<std::shared_ptr<MailContact>> refVal_cc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cc")), refVal_cc );
        setCc(refVal_cc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bcc")))
    {
        std::vector<std::shared_ptr<MailContact>> refVal_bcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bcc")), refVal_bcc );
        setBcc(refVal_bcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attachments")))
    {
        std::vector<std::shared_ptr<MailAttachment>> refVal_attachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attachments")), refVal_attachments );
        setAttachments(refVal_attachments);
    }
    return ok;
}

int64_t SendMail::getId() const
{
    return m_Id;
}

void SendMail::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SendMail::idIsSet() const
{
    return m_IdIsSet;
}

void SendMail::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<MailContact> SendMail::getFrom() const
{
    return m_From;
}

void SendMail::setFrom(const std::shared_ptr<MailContact>& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool SendMail::fromIsSet() const
{
    return m_FromIsSet;
}

void SendMail::unsetFrom()
{
    m_FromIsSet = false;
}
std::vector<std::shared_ptr<MailContact>>& SendMail::getTo()
{
    return m_To;
}

void SendMail::setTo(const std::vector<std::shared_ptr<MailContact>>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool SendMail::toIsSet() const
{
    return m_ToIsSet;
}

void SendMail::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t SendMail::getSubject() const
{
    return m_Subject;
}

void SendMail::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool SendMail::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void SendMail::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t SendMail::getBody() const
{
    return m_Body;
}

void SendMail::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SendMail::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SendMail::unsetBody()
{
    m_BodyIsSet = false;
}
std::vector<std::shared_ptr<MailContact>>& SendMail::getReplyto()
{
    return m_Replyto;
}

void SendMail::setReplyto(const std::vector<std::shared_ptr<MailContact>>& value)
{
    m_Replyto = value;
    m_ReplytoIsSet = true;
}

bool SendMail::replytoIsSet() const
{
    return m_ReplytoIsSet;
}

void SendMail::unsetReplyto()
{
    m_ReplytoIsSet = false;
}
std::vector<std::shared_ptr<MailContact>>& SendMail::getCc()
{
    return m_Cc;
}

void SendMail::setCc(const std::vector<std::shared_ptr<MailContact>>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool SendMail::ccIsSet() const
{
    return m_CcIsSet;
}

void SendMail::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<std::shared_ptr<MailContact>>& SendMail::getBcc()
{
    return m_Bcc;
}

void SendMail::setBcc(const std::vector<std::shared_ptr<MailContact>>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool SendMail::bccIsSet() const
{
    return m_BccIsSet;
}

void SendMail::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<std::shared_ptr<MailAttachment>>& SendMail::getAttachments()
{
    return m_Attachments;
}

void SendMail::setAttachments(const std::vector<std::shared_ptr<MailAttachment>>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool SendMail::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void SendMail::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
}
}
}
}



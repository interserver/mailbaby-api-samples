#
# Mail Baby API
# This is an API defintion for accesssing the Mail.Baby mail service.
# Version: 1.0.0
# Contact: detain@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Details for an Email

.PARAMETER To
The Contact whom is the primary recipient of this email.
.PARAMETER VarFrom
The contact whom is the this email is from.
.PARAMETER Subject
The subject or title of the email
.PARAMETER Body
The main email contents.
.OUTPUTS

SendMail<PSCustomObject>
#>

function Initialize-SendMail {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${To},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SendMail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "to" = ${To}
            "from" = ${VarFrom}
            "subject" = ${Subject}
            "body" = ${Body}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SendMail<PSCustomObject>

.DESCRIPTION

Convert from JSON to SendMail<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SendMail<PSCustomObject>
#>
function ConvertFrom-JsonToSendMail {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SendMail' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SendMail
        $AllProperties = ("to", "from", "subject", "body")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) { #optional property not found
            $Body = $null
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        $PSO = [PSCustomObject]@{
            "to" = ${To}
            "from" = ${VarFrom}
            "subject" = ${Subject}
            "body" = ${Body}
        }

        return $PSO
    }

}


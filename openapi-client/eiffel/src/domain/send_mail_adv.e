note
 description:"[
		MailBaby Email Delivery and Management Service API
 		**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  		The version of the OpenAPI document: 1.1.0
 	    Contact: support@interserver.net

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class SEND_MAIL_ADV




feature --Access

    subject: detachable STRING_32
      -- The subject or title of the email
    body: detachable STRING_32
      -- The main email contents.
    var_from: detachable EMAIL_ADDRESS_TYPES
      
    to: detachable EMAIL_ADDRESSES_TYPES
      
    replyto: detachable EMAIL_ADDRESSES_TYPES
      
    cc: detachable EMAIL_ADDRESSES_TYPES
      
    bcc: detachable EMAIL_ADDRESSES_TYPES
      
    attachments: detachable LIST [MAIL_ATTACHMENT]
      -- (optional) File attachments to include in the email.  The file contents must be base64 encoded!
 	id: INTEGER_64
    	 -- (optional)  ID of the Mail order within our system to use as the Mail Account.

feature -- Change Element

    set_subject (a_name: like subject)
        -- Set 'subject' with 'a_name'.
      do
        subject := a_name
      ensure
        subject_set: subject = a_name
      end

    set_body (a_name: like body)
        -- Set 'body' with 'a_name'.
      do
        body := a_name
      ensure
        body_set: body = a_name
      end

    set_var_from (a_name: like var_from)
        -- Set 'var_from' with 'a_name'.
      do
        var_from := a_name
      ensure
        var_from_set: var_from = a_name
      end

    set_to (a_name: like to)
        -- Set 'to' with 'a_name'.
      do
        to := a_name
      ensure
        to_set: to = a_name
      end

    set_replyto (a_name: like replyto)
        -- Set 'replyto' with 'a_name'.
      do
        replyto := a_name
      ensure
        replyto_set: replyto = a_name
      end

    set_cc (a_name: like cc)
        -- Set 'cc' with 'a_name'.
      do
        cc := a_name
      ensure
        cc_set: cc = a_name
      end

    set_bcc (a_name: like bcc)
        -- Set 'bcc' with 'a_name'.
      do
        bcc := a_name
      ensure
        bcc_set: bcc = a_name
      end

    set_attachments (a_name: like attachments)
        -- Set 'attachments' with 'a_name'.
      do
        attachments := a_name
      ensure
        attachments_set: attachments = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass SEND_MAIL_ADV%N")
        if attached subject as l_subject then
          Result.append ("%Nsubject:")
          Result.append (l_subject.out)
          Result.append ("%N")
        end
        if attached body as l_body then
          Result.append ("%Nbody:")
          Result.append (l_body.out)
          Result.append ("%N")
        end
        if attached var_from as l_var_from then
          Result.append ("%Nvar_from:")
          Result.append (l_var_from.out)
          Result.append ("%N")
        end
        if attached to as l_to then
          Result.append ("%Nto:")
          Result.append (l_to.out)
          Result.append ("%N")
        end
        if attached replyto as l_replyto then
          Result.append ("%Nreplyto:")
          Result.append (l_replyto.out)
          Result.append ("%N")
        end
        if attached cc as l_cc then
          Result.append ("%Ncc:")
          Result.append (l_cc.out)
          Result.append ("%N")
        end
        if attached bcc as l_bcc then
          Result.append ("%Nbcc:")
          Result.append (l_bcc.out)
          Result.append ("%N")
        end
        if attached attachments as l_attachments then
          across l_attachments as ic loop
            Result.append ("%N attachments:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
      end
end


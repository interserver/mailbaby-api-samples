//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class DefaultAPI {
    /**
     displays a list of mail service orders
     
     - parameter id: (query) The ID of your mail order this will be sent through. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMailOrders(id: Int64? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MailOrder]?, _ error: Error?) -> Void)) {
        getMailOrdersWithRequestBuilder(id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     displays a list of mail service orders
     - GET /mail
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - parameter id: (query) The ID of your mail order this will be sent through. (optional)
     - returns: RequestBuilder<[MailOrder]> 
     */
    open class func getMailOrdersWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<[MailOrder]> {
        let path = "/mail"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[MailOrder]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Checks if the server is running
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pingServer(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        pingServerWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Checks if the server is running
     - GET /ping
     - returns: RequestBuilder<Void> 
     */
    open class func pingServerWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/ping"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     places a mail order
     
     - parameter mailOrder: (body) Inventory item to add (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func placeMailOrder(mailOrder: MailOrder? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        placeMailOrderWithRequestBuilder(mailOrder: mailOrder).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     places a mail order
     - POST /mail/order
     - Adds an item to the system
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - parameter mailOrder: (body) Inventory item to add (optional)
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func placeMailOrderWithRequestBuilder(mailOrder: MailOrder? = nil) -> RequestBuilder<Void> {
        let path = "/mail/order"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mailOrder)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Sends an Email with Advanced Options
     
     - parameter sendMailAdv: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendAdvMail(sendMailAdv: SendMailAdv, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenericResponse?, _ error: Error?) -> Void)) {
        sendAdvMailWithRequestBuilder(sendMailAdv: sendMailAdv).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sends an Email with Advanced Options
     - POST /mail/advsend
     - Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - parameter sendMailAdv: (body)  
     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendAdvMailWithRequestBuilder(sendMailAdv: SendMailAdv) -> RequestBuilder<GenericResponse> {
        let path = "/mail/advsend"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendMailAdv)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GenericResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Sends an Email
     
     - parameter to: (form) The Contact whom is the primary recipient of this email. 
     - parameter from: (form) The contact whom is the this email is from. 
     - parameter subject: (form) The subject or title of the email 
     - parameter body: (form) The main email contents. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendMail(to: String, from: String, subject: String, body: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenericResponse?, _ error: Error?) -> Void)) {
        sendMailWithRequestBuilder(to: to, from: from, subject: subject, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sends an Email
     - POST /mail/send
     - Sends An email through one of your mail orders.
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - parameter to: (form) The Contact whom is the primary recipient of this email. 
     - parameter from: (form) The contact whom is the this email is from. 
     - parameter subject: (form) The subject or title of the email 
     - parameter body: (form) The main email contents. 
     - returns: RequestBuilder<GenericResponse> 
     */
    open class func sendMailWithRequestBuilder(to: String, from: String, subject: String, body: String) -> RequestBuilder<GenericResponse> {
        let path = "/mail/send"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String: Any?] = [
            "to": to.encodeToJSON(),
            "from": from.encodeToJSON(),
            "subject": subject.encodeToJSON(),
            "body": body.encodeToJSON(),
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GenericResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     validatess order details before placing an order
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func validateMailOrder(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        validateMailOrderWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     validatess order details before placing an order
     - GET /mail/order
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - returns: RequestBuilder<Void> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func validateMailOrderWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/mail/order"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     displays the mail log
     
     - parameter id: (query) The ID of your mail order this will be sent through. (optional)
     - parameter searchString: (query) pass an optional search string for looking up inventory (optional)
     - parameter skip: (query) number of records to skip for pagination (optional)
     - parameter limit: (query) maximum number of records to return (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func viewMailLog(id: Int64? = nil, searchString: String? = nil, skip: Int? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MailLog]?, _ error: Error?) -> Void)) {
        viewMailLogWithRequestBuilder(id: id, searchString: searchString, skip: skip, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     displays the mail log
     - GET /mail/log
     - By passing in the appropriate options, you can search for available inventory in the system 
     - API Key:
       - type: apiKey X-API-KEY 
       - name: apiKeyAuth
     - parameter id: (query) The ID of your mail order this will be sent through. (optional)
     - parameter searchString: (query) pass an optional search string for looking up inventory (optional)
     - parameter skip: (query) number of records to skip for pagination (optional)
     - parameter limit: (query) maximum number of records to return (optional)
     - returns: RequestBuilder<[MailLog]> 
     */
    open class func viewMailLogWithRequestBuilder(id: Int64? = nil, searchString: String? = nil, skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<[MailLog]> {
        let path = "/mail/log"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        var urlComponents = URLComponents(string: URLString)
        urlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "searchString": searchString?.encodeToJSON(),
            "skip": skip?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[MailLog]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}

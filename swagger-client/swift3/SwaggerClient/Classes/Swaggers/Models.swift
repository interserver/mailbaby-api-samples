// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }
        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [DenyRuleNew]
        Decoders.addDecoder(clazz: [DenyRuleNew].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[DenyRuleNew]> in
            return Decoders.decode(clazz: [DenyRuleNew].self, source: source)
        }

        // Decoder for DenyRuleNew
        Decoders.addDecoder(clazz: DenyRuleNew.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<DenyRuleNew> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? DenyRuleNew() : instance as! DenyRuleNew
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"] as AnyObject?) {
                case let .success(value): _result.user = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: DenyRuleNew.ModelType.self, source: sourceDictionary["type"] as AnyObject?) {
                case let .success(value): _result.type = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"] as AnyObject?) {
                case let .success(value): _result.data = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "DenyRuleNew", actual: "\(source)"))
            }
        }
        // Decoder for [DenyRuleRecord]
        Decoders.addDecoder(clazz: [DenyRuleRecord].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[DenyRuleRecord]> in
            return Decoders.decode(clazz: [DenyRuleRecord].self, source: source)
        }

        // Decoder for DenyRuleRecord
        Decoders.addDecoder(clazz: DenyRuleRecord.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<DenyRuleRecord> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? DenyRuleRecord() : instance as! DenyRuleRecord
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["created"] as AnyObject?) {
                case let .success(value): _result.created = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"] as AnyObject?) {
                case let .success(value): _result.user = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: DenyRuleRecord.ModelType.self, source: sourceDictionary["type"] as AnyObject?) {
                case let .success(value): _result.type = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"] as AnyObject?) {
                case let .success(value): _result.data = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "DenyRuleRecord", actual: "\(source)"))
            }
        }
        // Decoder for [EmailAddress]
        Decoders.addDecoder(clazz: [EmailAddress].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[EmailAddress]> in
            return Decoders.decode(clazz: [EmailAddress].self, source: source)
        }

        // Decoder for EmailAddress
        Decoders.addDecoder(clazz: EmailAddress.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<EmailAddress> in
            if let source = source as? EmailAddress {
                return .success(source)
            } else {
                return .failure(.typeMismatch(expected: "Typealias EmailAddress", actual: "\(source)"))
            }
        }
        // Decoder for [EmailAddressName]
        Decoders.addDecoder(clazz: [EmailAddressName].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[EmailAddressName]> in
            return Decoders.decode(clazz: [EmailAddressName].self, source: source)
        }

        // Decoder for EmailAddressName
        Decoders.addDecoder(clazz: EmailAddressName.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<EmailAddressName> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? EmailAddressName() : instance as! EmailAddressName
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?) {
                case let .success(value): _result.email = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "EmailAddressName", actual: "\(source)"))
            }
        }
        // Decoder for [EmailAddressTypes]
        Decoders.addDecoder(clazz: [EmailAddressTypes].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[EmailAddressTypes]> in
            return Decoders.decode(clazz: [EmailAddressTypes].self, source: source)
        }

        // Decoder for EmailAddressTypes
        Decoders.addDecoder(clazz: EmailAddressTypes.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<EmailAddressTypes> in
            if let source = source as? EmailAddressTypes {
                return .success(source)
            } else {
                return .failure(.typeMismatch(expected: "Typealias EmailAddressTypes", actual: "\(source)"))
            }
        }
        // Decoder for [EmailAddressesTypes]
        Decoders.addDecoder(clazz: [EmailAddressesTypes].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[EmailAddressesTypes]> in
            return Decoders.decode(clazz: [EmailAddressesTypes].self, source: source)
        }

        // Decoder for EmailAddressesTypes
        Decoders.addDecoder(clazz: EmailAddressesTypes.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<EmailAddressesTypes> in
            if let source = source as? EmailAddressesTypes {
                return .success(source)
            } else {
                return .failure(.typeMismatch(expected: "Typealias EmailAddressesTypes", actual: "\(source)"))
            }
        }
        // Decoder for [ErrorMessage]
        Decoders.addDecoder(clazz: [ErrorMessage].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ErrorMessage]> in
            return Decoders.decode(clazz: [ErrorMessage].self, source: source)
        }

        // Decoder for ErrorMessage
        Decoders.addDecoder(clazz: ErrorMessage.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ErrorMessage> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ErrorMessage() : instance as! ErrorMessage
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?) {
                case let .success(value): _result.code = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?) {
                case let .success(value): _result.message = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ErrorMessage", actual: "\(source)"))
            }
        }
        // Decoder for [GenericResponse]
        Decoders.addDecoder(clazz: [GenericResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[GenericResponse]> in
            return Decoders.decode(clazz: [GenericResponse].self, source: source)
        }

        // Decoder for GenericResponse
        Decoders.addDecoder(clazz: GenericResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GenericResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? GenericResponse() : instance as! GenericResponse
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?) {
                case let .success(value): _result.status = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?) {
                case let .success(value): _result.text = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "GenericResponse", actual: "\(source)"))
            }
        }
        // Decoder for [InlineResponse200]
        Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[InlineResponse200]> in
            return Decoders.decode(clazz: [InlineResponse200].self, source: source)
        }

        // Decoder for InlineResponse200
        Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<InlineResponse200> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? InlineResponse200() : instance as! InlineResponse200
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?) {
                case let .success(value): _result.status = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?) {
                case let .success(value): _result.username = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?) {
                case let .success(value): _result.password = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?) {
                case let .success(value): _result.comment = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "InlineResponse200", actual: "\(source)"))
            }
        }
        // Decoder for [MailAttachment]
        Decoders.addDecoder(clazz: [MailAttachment].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MailAttachment]> in
            return Decoders.decode(clazz: [MailAttachment].self, source: source)
        }

        // Decoder for MailAttachment
        Decoders.addDecoder(clazz: MailAttachment.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MailAttachment> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MailAttachment() : instance as! MailAttachment
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"] as AnyObject?) {
                case let .success(value): _result.filename = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["data"] as AnyObject?) {
                case let .success(value): _result.data = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MailAttachment", actual: "\(source)"))
            }
        }
        // Decoder for [MailBlockClickHouse]
        Decoders.addDecoder(clazz: [MailBlockClickHouse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MailBlockClickHouse]> in
            return Decoders.decode(clazz: [MailBlockClickHouse].self, source: source)
        }

        // Decoder for MailBlockClickHouse
        Decoders.addDecoder(clazz: MailBlockClickHouse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MailBlockClickHouse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MailBlockClickHouse() : instance as! MailBlockClickHouse
                switch Decoders.decodeOptional(clazz: ISOFullDate.self, source: sourceDictionary["date"] as AnyObject?) {
                case let .success(value): _result.date = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?) {
                case let .success(value): _result.from = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageId"] as AnyObject?) {
                case let .success(value): _result.messageId = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?) {
                case let .success(value): _result.subject = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to"] as AnyObject?) {
                case let .success(value): _result.to = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MailBlockClickHouse", actual: "\(source)"))
            }
        }
        // Decoder for [MailBlockRspamd]
        Decoders.addDecoder(clazz: [MailBlockRspamd].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MailBlockRspamd]> in
            return Decoders.decode(clazz: [MailBlockRspamd].self, source: source)
        }

        // Decoder for MailBlockRspamd
        Decoders.addDecoder(clazz: MailBlockRspamd.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MailBlockRspamd> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MailBlockRspamd() : instance as! MailBlockRspamd
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?) {
                case let .success(value): _result.from = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?) {
                case let .success(value): _result.subject = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MailBlockRspamd", actual: "\(source)"))
            }
        }
        // Decoder for [MailBlocks]
        Decoders.addDecoder(clazz: [MailBlocks].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MailBlocks]> in
            return Decoders.decode(clazz: [MailBlocks].self, source: source)
        }

        // Decoder for MailBlocks
        Decoders.addDecoder(clazz: MailBlocks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MailBlocks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MailBlocks() : instance as! MailBlocks
                switch Decoders.decodeOptional(clazz: [MailBlockClickHouse].self, source: sourceDictionary["local"] as AnyObject?) {
                case let .success(value): _result.local = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [MailBlockClickHouse].self, source: sourceDictionary["mbtrap"] as AnyObject?) {
                case let .success(value): _result.mbtrap = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [MailBlockRspamd].self, source: sourceDictionary["subject"] as AnyObject?) {
                case let .success(value): _result.subject = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MailBlocks", actual: "\(source)"))
            }
        }
        // Decoder for [MailLog]
        Decoders.addDecoder(clazz: [MailLog].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MailLog]> in
            return Decoders.decode(clazz: [MailLog].self, source: source)
        }

        // Decoder for MailLog
        Decoders.addDecoder(clazz: MailLog.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MailLog> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MailLog() : instance as! MailLog
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?) {
                case let .success(value): _result.total = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["skip"] as AnyObject?) {
                case let .success(value): _result.skip = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?) {
                case let .success(value): _result.limit = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [MailLogEntry].self, source: sourceDictionary["emails"] as AnyObject?) {
                case let .success(value): _result.emails = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MailLog", actual: "\(source)"))
            }
        }
        // Decoder for [MailLogEntry]
        Decoders.addDecoder(clazz: [MailLogEntry].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MailLogEntry]> in
            return Decoders.decode(clazz: [MailLogEntry].self, source: source)
        }

        // Decoder for MailLogEntry
        Decoders.addDecoder(clazz: MailLogEntry.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MailLogEntry> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MailLogEntry() : instance as! MailLogEntry
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["_id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?) {
                case let .success(value): _result.from = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to"] as AnyObject?) {
                case let .success(value): _result.to = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?) {
                case let .success(value): _result.subject = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["messageId"] as AnyObject?) {
                case let .success(value): _result.messageId = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"] as AnyObject?) {
                case let .success(value): _result.created = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["time"] as AnyObject?) {
                case let .success(value): _result.time = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"] as AnyObject?) {
                case let .success(value): _result.user = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transtype"] as AnyObject?) {
                case let .success(value): _result.transtype = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"] as AnyObject?) {
                case let .success(value): _result.origin = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["interface"] as AnyObject?) {
                case let .success(value): _result.interface = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sendingZone"] as AnyObject?) {
                case let .success(value): _result.sendingZone = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["bodySize"] as AnyObject?) {
                case let .success(value): _result.bodySize = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["seq"] as AnyObject?) {
                case let .success(value): _result.seq = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["recipient"] as AnyObject?) {
                case let .success(value): _result.recipient = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["domain"] as AnyObject?) {
                case let .success(value): _result.domain = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["locked"] as AnyObject?) {
                case let .success(value): _result.locked = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lockTime"] as AnyObject?) {
                case let .success(value): _result.lockTime = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["assigned"] as AnyObject?) {
                case let .success(value): _result.assigned = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queued"] as AnyObject?) {
                case let .success(value): _result.queued = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mxHostname"] as AnyObject?) {
                case let .success(value): _result.mxHostname = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["response"] as AnyObject?) {
                case let .success(value): _result.response = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MailLogEntry", actual: "\(source)"))
            }
        }
        // Decoder for [MailOrder]
        Decoders.addDecoder(clazz: [MailOrder].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MailOrder]> in
            return Decoders.decode(clazz: [MailOrder].self, source: source)
        }

        // Decoder for MailOrder
        Decoders.addDecoder(clazz: MailOrder.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MailOrder> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MailOrder() : instance as! MailOrder
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?) {
                case let .success(value): _result.status = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?) {
                case let .success(value): _result.username = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["comment"] as AnyObject?) {
                case let .success(value): _result.comment = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MailOrder", actual: "\(source)"))
            }
        }
        // Decoder for [SendMail]
        Decoders.addDecoder(clazz: [SendMail].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SendMail]> in
            return Decoders.decode(clazz: [SendMail].self, source: source)
        }

        // Decoder for SendMail
        Decoders.addDecoder(clazz: SendMail.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SendMail> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SendMail() : instance as! SendMail
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to"] as AnyObject?) {
                case let .success(value): _result.to = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?) {
                case let .success(value): _result.from = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?) {
                case let .success(value): _result.subject = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"] as AnyObject?) {
                case let .success(value): _result.body = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SendMail", actual: "\(source)"))
            }
        }
        // Decoder for [SendMailAdv]
        Decoders.addDecoder(clazz: [SendMailAdv].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[SendMailAdv]> in
            return Decoders.decode(clazz: [SendMailAdv].self, source: source)
        }

        // Decoder for SendMailAdv
        Decoders.addDecoder(clazz: SendMailAdv.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SendMailAdv> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? SendMailAdv() : instance as! SendMailAdv
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["subject"] as AnyObject?) {
                case let .success(value): _result.subject = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["body"] as AnyObject?) {
                case let .success(value): _result.body = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: EmailAddressTypes.self, source: sourceDictionary["from"] as AnyObject?) {
                case let .success(value): _result.from = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: EmailAddressesTypes.self, source: sourceDictionary["to"] as AnyObject?) {
                case let .success(value): _result.to = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: EmailAddressesTypes.self, source: sourceDictionary["replyto"] as AnyObject?) {
                case let .success(value): _result.replyto = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: EmailAddressesTypes.self, source: sourceDictionary["cc"] as AnyObject?) {
                case let .success(value): _result.cc = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: EmailAddressesTypes.self, source: sourceDictionary["bcc"] as AnyObject?) {
                case let .success(value): _result.bcc = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [MailAttachment].self, source: sourceDictionary["attachments"] as AnyObject?) {
                case let .success(value): _result.attachments = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "SendMailAdv", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}

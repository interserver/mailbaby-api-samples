/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.GenericResponse
import org.openapitools.client.model.GetMailOrders200ResponseInner
import org.openapitools.client.model.GetMailOrders401Response
import org.openapitools.client.model.MailLog
import org.openapitools.client.model.SendMailAdv
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object DefaultApi {

  def apply(baseUrl: String = "https://api.mailbaby.net") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Seq[GetMailOrders200ResponseInner] (OK)
   *   code 401 : GetMailOrders401Response (Unauthorized)
   *   code 404 : GetMailOrders401Response (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getMailOrders()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[GetMailOrders200ResponseInner]] =
    ApiRequest[Seq[GetMailOrders200ResponseInner]](ApiMethods.GET, baseUrl, "/mail", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withSuccessResponse[Seq[GetMailOrders200ResponseInner]](200)
      .withErrorResponse[GetMailOrders401Response](401)
      .withErrorResponse[GetMailOrders401Response](404)
      

  /**
   * Expected answers:
   *   code 200 :  (Server is up and running)
   *   code 0 :  (Something is wrong)
   */
  def pingServer(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/ping", "application/json")
      .withSuccessResponse[Unit](200)
      .withDefaultErrorResponse[Unit]
      

  /**
   * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : GetMailOrders401Response (The specified resource was not found)
   *   code 401 : GetMailOrders401Response (Unauthorized)
   *   code 404 : GetMailOrders401Response (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param sendMailAdv 
   */
  def sendAdvMail(sendMailAdv: SendMailAdv)(implicit apiKey: ApiKeyValue): ApiRequest[GenericResponse] =
    ApiRequest[GenericResponse](ApiMethods.POST, baseUrl, "/mail/advsend", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withBody(sendMailAdv)
      .withSuccessResponse[GenericResponse](200)
      .withErrorResponse[GetMailOrders401Response](400)
      .withErrorResponse[GetMailOrders401Response](401)
      .withErrorResponse[GetMailOrders401Response](404)
      

  /**
   * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : GetMailOrders401Response (The specified resource was not found)
   *   code 401 : GetMailOrders401Response (Unauthorized)
   *   code 404 : GetMailOrders401Response (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param to The Contact whom is the primary recipient of this email.
   * @param from The contact whom is the this email is from.
   * @param subject The subject or title of the email
   * @param body The main email contents.
   */
  def sendMail(to: String, from: String, subject: String, body: String)(implicit apiKey: ApiKeyValue): ApiRequest[GenericResponse] =
    ApiRequest[GenericResponse](ApiMethods.POST, baseUrl, "/mail/send", "application/x-www-form-urlencoded")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withFormParam("to", to)
      .withFormParam("from", from)
      .withFormParam("subject", subject)
      .withFormParam("body", body)
      .withSuccessResponse[GenericResponse](200)
      .withErrorResponse[GetMailOrders401Response](400)
      .withErrorResponse[GetMailOrders401Response](401)
      .withErrorResponse[GetMailOrders401Response](404)
      

  /**
   * Get a listing of the emails sent through this system 
   * 
   * Expected answers:
   *   code 200 : MailLog (search results matching criteria)
   *   code 400 :  (bad input parameter)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param id The ID of your mail order this will be sent through.
   * @param origin originating ip address sending mail
   * @param mx mx record mail was sent to
   * @param from from email address
   * @param to to/destination email address
   * @param subject subject containing this string
   * @param mailid mail id
   * @param skip number of records to skip for pagination
   * @param limit maximum number of records to return
   * @param startDate earliest date to get emails in unix timestamp format
   * @param endDate earliest date to get emails in unix timestamp format
   */
  def viewMailLog(id: Option[Long] = None, origin: Option[String] = None, mx: Option[String] = None, from: Option[String] = None, to: Option[String] = None, subject: Option[String] = None, mailid: Option[String] = None, skip: Option[Int] = None, limit: Option[Int] = None, startDate: Option[Long] = None, endDate: Option[Long] = None)(implicit apiKey: ApiKeyValue): ApiRequest[MailLog] =
    ApiRequest[MailLog](ApiMethods.GET, baseUrl, "/mail/log", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withQueryParam("id", id)
      .withQueryParam("origin", origin)
      .withQueryParam("mx", mx)
      .withQueryParam("from", from)
      .withQueryParam("to", to)
      .withQueryParam("subject", subject)
      .withQueryParam("mailid", mailid)
      .withQueryParam("skip", skip)
      .withQueryParam("limit", limit)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[MailLog](200)
      .withErrorResponse[Unit](400)
      



}


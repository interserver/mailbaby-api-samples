# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

    The version of the OpenAPI document: 1.1.0
    Contact: support@interserver.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MailLogEntry(BaseModel):
    """
    An email record  # noqa: E501
    """
    id: StrictInt = Field(description="internal db id", alias="_id")
    id: StrictStr = Field(description="mail id")
    var_from: StrictStr = Field(description="from address", alias="from")
    to: StrictStr = Field(description="to address")
    subject: StrictStr = Field(description="email subject")
    message_id: Optional[StrictStr] = Field(default=None, description="message id", alias="messageId")
    created: StrictStr = Field(description="creation date")
    time: StrictInt = Field(description="creation timestamp")
    user: StrictStr = Field(description="user account")
    transtype: StrictStr = Field(description="transaction type")
    origin: StrictStr = Field(description="origin ip")
    interface: StrictStr = Field(description="interface name")
    sending_zone: StrictStr = Field(description="sending zone", alias="sendingZone")
    body_size: StrictInt = Field(description="email body size in bytes", alias="bodySize")
    seq: StrictInt = Field(description="index of email in the to adderess list")
    recipient: StrictStr = Field(description="to address this email is being sent to")
    domain: StrictStr = Field(description="to address domain")
    locked: StrictInt = Field(description="locked status")
    lock_time: StrictStr = Field(description="lock timestamp", alias="lockTime")
    assigned: StrictStr = Field(description="assigned server")
    queued: StrictStr = Field(description="queued timestamp")
    mx_hostname: StrictStr = Field(description="mx hostname", alias="mxHostname")
    response: StrictStr = Field(description="mail delivery response")
    __properties: ClassVar[List[str]] = ["_id", "id", "from", "to", "subject", "messageId", "created", "time", "user", "transtype", "origin", "interface", "sendingZone", "bodySize", "seq", "recipient", "domain", "locked", "lockTime", "assigned", "queued", "mxHostname", "response"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MailLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of MailLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "id": obj.get("id"),
            "from": obj.get("from"),
            "to": obj.get("to"),
            "subject": obj.get("subject"),
            "messageId": obj.get("messageId"),
            "created": obj.get("created"),
            "time": obj.get("time"),
            "user": obj.get("user"),
            "transtype": obj.get("transtype"),
            "origin": obj.get("origin"),
            "interface": obj.get("interface"),
            "sendingZone": obj.get("sendingZone"),
            "bodySize": obj.get("bodySize"),
            "seq": obj.get("seq"),
            "recipient": obj.get("recipient"),
            "domain": obj.get("domain"),
            "locked": obj.get("locked"),
            "lockTime": obj.get("lockTime"),
            "assigned": obj.get("assigned"),
            "queued": obj.get("queued"),
            "mxHostname": obj.get("mxHostname"),
            "response": obj.get("response")
        })
        return _obj



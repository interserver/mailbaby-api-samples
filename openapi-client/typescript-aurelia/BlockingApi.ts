/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GenericResponse,
  MailBlocks,
  DenyRuleRecord,
} from './models';

/**
 * addRule - parameters interface
 */
export interface IAddRuleParams {
  type: string;
  data: string;
  user?: string;
}

/**
 * deleteRule - parameters interface
 */
export interface IDeleteRuleParams {
  ruleId: number;
}

/**
 * delistBlock - parameters interface
 */
export interface IDelistBlockParams {
  body: string;
}

/**
 * getMailBlocks - parameters interface
 */
export interface IGetMailBlocksParams {
}

/**
 * getRules - parameters interface
 */
export interface IGetRulesParams {
}

/**
 * BlockingApi - API class
 */
@autoinject()
export class BlockingApi extends Api {

  /**
   * Creates a new BlockingApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Creates a new email deny rule.
   * Adds a new email deny rule into the system to block new emails that match the given criteria
   * @param params.type The type of deny rule.
   * @param params.data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
   * @param params.user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
   */
  async addRule(params: IAddRuleParams): Promise<GenericResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('addRule', params, 'type');
    this.ensureParamIsSet('addRule', params, 'data');

    // Create URL to call
    const url = `${this.basePath}/mail/rules`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'user': params['user'],
        'type': params['type'],
        'data': params['data'],
      }))

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Removes an deny mail rule.
   * Removes one of the configured deny mail rules from the system.
   * @param params.ruleId The ID of the Rules entry.
   */
  async deleteRule(params: IDeleteRuleParams): Promise<GenericResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteRule', params, 'ruleId');

    // Create URL to call
    const url = `${this.basePath}/mail/rules/{ruleId}`
      .replace(`{${'ruleId'}}`, encodeURIComponent(`${params['ruleId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Removes an email address from the blocked list
   * Removes an email address from the various block lists. 
   * @param params.body 
   */
  async delistBlock(params: IDelistBlockParams): Promise<GenericResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('delistBlock', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/mail/blocks/delete`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * displays a list of blocked email addresses
   */
  async getMailBlocks(): Promise<MailBlocks> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/blocks`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Displays a listing of deny email rules.
   * Returns a listing of all the deny block rules you have configured.
   */
  async getRules(): Promise<Array<DenyRuleRecord>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mail/rules`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'apiKeyAuth' required
      .withHeader('X-API-KEY', this.authStorage.getapiKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DenyRuleRecordAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DenyRuleRecordAllOf{}

// DenyRuleRecordAllOf struct for DenyRuleRecordAllOf
type DenyRuleRecordAllOf struct {
	// The deny rule Id number.
	Id int32 `json:"id"`
	// the date the rule was created.
	Created time.Time `json:"created"`
}

// NewDenyRuleRecordAllOf instantiates a new DenyRuleRecordAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDenyRuleRecordAllOf(id int32, created time.Time) *DenyRuleRecordAllOf {
	this := DenyRuleRecordAllOf{}
	this.Id = id
	this.Created = created
	return &this
}

// NewDenyRuleRecordAllOfWithDefaults instantiates a new DenyRuleRecordAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDenyRuleRecordAllOfWithDefaults() *DenyRuleRecordAllOf {
	this := DenyRuleRecordAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *DenyRuleRecordAllOf) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DenyRuleRecordAllOf) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DenyRuleRecordAllOf) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *DenyRuleRecordAllOf) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *DenyRuleRecordAllOf) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *DenyRuleRecordAllOf) SetCreated(v time.Time) {
	o.Created = v
}

func (o DenyRuleRecordAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DenyRuleRecordAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created"] = o.Created
	return toSerialize, nil
}

type NullableDenyRuleRecordAllOf struct {
	value *DenyRuleRecordAllOf
	isSet bool
}

func (v NullableDenyRuleRecordAllOf) Get() *DenyRuleRecordAllOf {
	return v.value
}

func (v *NullableDenyRuleRecordAllOf) Set(val *DenyRuleRecordAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDenyRuleRecordAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDenyRuleRecordAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDenyRuleRecordAllOf(val *DenyRuleRecordAllOf) *NullableDenyRuleRecordAllOf {
	return &NullableDenyRuleRecordAllOf{value: val, isSet: true}
}

func (v NullableDenyRuleRecordAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDenyRuleRecordAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

    The version of the OpenAPI document: 1.1.0
    Contact: support@interserver.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.mail_log import MailLog
from openapi_client.models.mail_stats_type import MailStatsType

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class HistoryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_stats(
        self,
        time: Annotated[Optional[StrictStr], Field(description="The timeframe for the statistics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MailStatsType:
        """Account usage statistics.

        Returns information about the usage on your mail accounts.

        :param time: The timeframe for the statistics.
        :type time: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_stats_serialize(
            time=time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MailStatsType",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_stats_with_http_info(
        self,
        time: Annotated[Optional[StrictStr], Field(description="The timeframe for the statistics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MailStatsType]:
        """Account usage statistics.

        Returns information about the usage on your mail accounts.

        :param time: The timeframe for the statistics.
        :type time: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_stats_serialize(
            time=time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MailStatsType",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_stats_without_preload_content(
        self,
        time: Annotated[Optional[StrictStr], Field(description="The timeframe for the statistics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Account usage statistics.

        Returns information about the usage on your mail accounts.

        :param time: The timeframe for the statistics.
        :type time: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_stats_serialize(
            time=time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MailStatsType",
            '401': "ErrorMessage",
            '404': "ErrorMessage",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_stats_serialize(
        self,
        time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if time is not None:
            
            _query_params.append(('time', time))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mail/stats',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def view_mail_log(
        self,
        id: Annotated[Optional[StrictInt], Field(description="The ID of your mail order this will be sent through.")] = None,
        origin: Annotated[Optional[StrictStr], Field(description="originating ip address sending mail")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="mx record mail was sent to")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="from email address")] = None,
        to: Annotated[Optional[StrictStr], Field(description="to/destination email address")] = None,
        subject: Annotated[Optional[StrictStr], Field(description="subject containing this string")] = None,
        mailid: Annotated[Optional[StrictStr], Field(description="mail id")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="number of records to skip for pagination")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="maximum number of records to return")] = None,
        start_date: Annotated[Optional[Annotated[int, Field(le=9999999999, strict=True, ge=0)]], Field(description="earliest date to get emails in unix timestamp format")] = None,
        end_date: Annotated[Optional[Annotated[int, Field(le=9999999999, strict=True, ge=0)]], Field(description="earliest date to get emails in unix timestamp format")] = None,
        replyto: Annotated[Optional[StrictStr], Field(description="Reply-To Email Address")] = None,
        headerfrom: Annotated[Optional[StrictStr], Field(description="Header From Email Address")] = None,
        delivered: Annotated[Optional[StrictStr], Field(description="Limiting the emails to wether or not they were delivered.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MailLog:
        """displays the mail log

        Get a listing of the emails sent through this system 

        :param id: The ID of your mail order this will be sent through.
        :type id: int
        :param origin: originating ip address sending mail
        :type origin: str
        :param mx: mx record mail was sent to
        :type mx: str
        :param var_from: from email address
        :type var_from: str
        :param to: to/destination email address
        :type to: str
        :param subject: subject containing this string
        :type subject: str
        :param mailid: mail id
        :type mailid: str
        :param skip: number of records to skip for pagination
        :type skip: int
        :param limit: maximum number of records to return
        :type limit: int
        :param start_date: earliest date to get emails in unix timestamp format
        :type start_date: int
        :param end_date: earliest date to get emails in unix timestamp format
        :type end_date: int
        :param replyto: Reply-To Email Address
        :type replyto: str
        :param headerfrom: Header From Email Address
        :type headerfrom: str
        :param delivered: Limiting the emails to wether or not they were delivered.
        :type delivered: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_mail_log_serialize(
            id=id,
            origin=origin,
            mx=mx,
            var_from=var_from,
            to=to,
            subject=subject,
            mailid=mailid,
            skip=skip,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            replyto=replyto,
            headerfrom=headerfrom,
            delivered=delivered,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MailLog",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def view_mail_log_with_http_info(
        self,
        id: Annotated[Optional[StrictInt], Field(description="The ID of your mail order this will be sent through.")] = None,
        origin: Annotated[Optional[StrictStr], Field(description="originating ip address sending mail")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="mx record mail was sent to")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="from email address")] = None,
        to: Annotated[Optional[StrictStr], Field(description="to/destination email address")] = None,
        subject: Annotated[Optional[StrictStr], Field(description="subject containing this string")] = None,
        mailid: Annotated[Optional[StrictStr], Field(description="mail id")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="number of records to skip for pagination")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="maximum number of records to return")] = None,
        start_date: Annotated[Optional[Annotated[int, Field(le=9999999999, strict=True, ge=0)]], Field(description="earliest date to get emails in unix timestamp format")] = None,
        end_date: Annotated[Optional[Annotated[int, Field(le=9999999999, strict=True, ge=0)]], Field(description="earliest date to get emails in unix timestamp format")] = None,
        replyto: Annotated[Optional[StrictStr], Field(description="Reply-To Email Address")] = None,
        headerfrom: Annotated[Optional[StrictStr], Field(description="Header From Email Address")] = None,
        delivered: Annotated[Optional[StrictStr], Field(description="Limiting the emails to wether or not they were delivered.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MailLog]:
        """displays the mail log

        Get a listing of the emails sent through this system 

        :param id: The ID of your mail order this will be sent through.
        :type id: int
        :param origin: originating ip address sending mail
        :type origin: str
        :param mx: mx record mail was sent to
        :type mx: str
        :param var_from: from email address
        :type var_from: str
        :param to: to/destination email address
        :type to: str
        :param subject: subject containing this string
        :type subject: str
        :param mailid: mail id
        :type mailid: str
        :param skip: number of records to skip for pagination
        :type skip: int
        :param limit: maximum number of records to return
        :type limit: int
        :param start_date: earliest date to get emails in unix timestamp format
        :type start_date: int
        :param end_date: earliest date to get emails in unix timestamp format
        :type end_date: int
        :param replyto: Reply-To Email Address
        :type replyto: str
        :param headerfrom: Header From Email Address
        :type headerfrom: str
        :param delivered: Limiting the emails to wether or not they were delivered.
        :type delivered: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_mail_log_serialize(
            id=id,
            origin=origin,
            mx=mx,
            var_from=var_from,
            to=to,
            subject=subject,
            mailid=mailid,
            skip=skip,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            replyto=replyto,
            headerfrom=headerfrom,
            delivered=delivered,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MailLog",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def view_mail_log_without_preload_content(
        self,
        id: Annotated[Optional[StrictInt], Field(description="The ID of your mail order this will be sent through.")] = None,
        origin: Annotated[Optional[StrictStr], Field(description="originating ip address sending mail")] = None,
        mx: Annotated[Optional[StrictStr], Field(description="mx record mail was sent to")] = None,
        var_from: Annotated[Optional[StrictStr], Field(description="from email address")] = None,
        to: Annotated[Optional[StrictStr], Field(description="to/destination email address")] = None,
        subject: Annotated[Optional[StrictStr], Field(description="subject containing this string")] = None,
        mailid: Annotated[Optional[StrictStr], Field(description="mail id")] = None,
        skip: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="number of records to skip for pagination")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="maximum number of records to return")] = None,
        start_date: Annotated[Optional[Annotated[int, Field(le=9999999999, strict=True, ge=0)]], Field(description="earliest date to get emails in unix timestamp format")] = None,
        end_date: Annotated[Optional[Annotated[int, Field(le=9999999999, strict=True, ge=0)]], Field(description="earliest date to get emails in unix timestamp format")] = None,
        replyto: Annotated[Optional[StrictStr], Field(description="Reply-To Email Address")] = None,
        headerfrom: Annotated[Optional[StrictStr], Field(description="Header From Email Address")] = None,
        delivered: Annotated[Optional[StrictStr], Field(description="Limiting the emails to wether or not they were delivered.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """displays the mail log

        Get a listing of the emails sent through this system 

        :param id: The ID of your mail order this will be sent through.
        :type id: int
        :param origin: originating ip address sending mail
        :type origin: str
        :param mx: mx record mail was sent to
        :type mx: str
        :param var_from: from email address
        :type var_from: str
        :param to: to/destination email address
        :type to: str
        :param subject: subject containing this string
        :type subject: str
        :param mailid: mail id
        :type mailid: str
        :param skip: number of records to skip for pagination
        :type skip: int
        :param limit: maximum number of records to return
        :type limit: int
        :param start_date: earliest date to get emails in unix timestamp format
        :type start_date: int
        :param end_date: earliest date to get emails in unix timestamp format
        :type end_date: int
        :param replyto: Reply-To Email Address
        :type replyto: str
        :param headerfrom: Header From Email Address
        :type headerfrom: str
        :param delivered: Limiting the emails to wether or not they were delivered.
        :type delivered: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._view_mail_log_serialize(
            id=id,
            origin=origin,
            mx=mx,
            var_from=var_from,
            to=to,
            subject=subject,
            mailid=mailid,
            skip=skip,
            limit=limit,
            start_date=start_date,
            end_date=end_date,
            replyto=replyto,
            headerfrom=headerfrom,
            delivered=delivered,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MailLog",
            '400': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _view_mail_log_serialize(
        self,
        id,
        origin,
        mx,
        var_from,
        to,
        subject,
        mailid,
        skip,
        limit,
        start_date,
        end_date,
        replyto,
        headerfrom,
        delivered,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if origin is not None:
            
            _query_params.append(('origin', origin))
            
        if mx is not None:
            
            _query_params.append(('mx', mx))
            
        if var_from is not None:
            
            _query_params.append(('from', var_from))
            
        if to is not None:
            
            _query_params.append(('to', to))
            
        if subject is not None:
            
            _query_params.append(('subject', subject))
            
        if mailid is not None:
            
            _query_params.append(('mailid', mailid))
            
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if start_date is not None:
            
            _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            
            _query_params.append(('endDate', end_date))
            
        if replyto is not None:
            
            _query_params.append(('replyto', replyto))
            
        if headerfrom is not None:
            
            _query_params.append(('headerfrom', headerfrom))
            
        if delivered is not None:
            
            _query_params.append(('delivered', delivered))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mail/log',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



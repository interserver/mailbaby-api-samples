/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MailStatsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailStatsType{}

// MailStatsType Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost.
type MailStatsType struct {
	Time *string `json:"time,omitempty"`
	Usage *int32 `json:"usage,omitempty"`
	Currency *string `json:"currency,omitempty"`
	CurrencySymbol *string `json:"currencySymbol,omitempty"`
	Cost *float64 `json:"cost,omitempty"`
	Received *int32 `json:"received,omitempty"`
	Sent *int32 `json:"sent,omitempty"`
	Volume *MailStatsTypeVolume `json:"volume,omitempty"`
}

// NewMailStatsType instantiates a new MailStatsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailStatsType() *MailStatsType {
	this := MailStatsType{}
	var time string = "1h"
	this.Time = &time
	return &this
}

// NewMailStatsTypeWithDefaults instantiates a new MailStatsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailStatsTypeWithDefaults() *MailStatsType {
	this := MailStatsType{}
	var time string = "1h"
	this.Time = &time
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *MailStatsType) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *MailStatsType) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *MailStatsType) SetTime(v string) {
	o.Time = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *MailStatsType) GetUsage() int32 {
	if o == nil || IsNil(o.Usage) {
		var ret int32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetUsageOk() (*int32, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *MailStatsType) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given int32 and assigns it to the Usage field.
func (o *MailStatsType) SetUsage(v int32) {
	o.Usage = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *MailStatsType) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *MailStatsType) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *MailStatsType) SetCurrency(v string) {
	o.Currency = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *MailStatsType) GetCurrencySymbol() string {
	if o == nil || IsNil(o.CurrencySymbol) {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencySymbol) {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *MailStatsType) HasCurrencySymbol() bool {
	if o != nil && !IsNil(o.CurrencySymbol) {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *MailStatsType) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *MailStatsType) GetCost() float64 {
	if o == nil || IsNil(o.Cost) {
		var ret float64
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetCostOk() (*float64, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *MailStatsType) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float64 and assigns it to the Cost field.
func (o *MailStatsType) SetCost(v float64) {
	o.Cost = &v
}

// GetReceived returns the Received field value if set, zero value otherwise.
func (o *MailStatsType) GetReceived() int32 {
	if o == nil || IsNil(o.Received) {
		var ret int32
		return ret
	}
	return *o.Received
}

// GetReceivedOk returns a tuple with the Received field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetReceivedOk() (*int32, bool) {
	if o == nil || IsNil(o.Received) {
		return nil, false
	}
	return o.Received, true
}

// HasReceived returns a boolean if a field has been set.
func (o *MailStatsType) HasReceived() bool {
	if o != nil && !IsNil(o.Received) {
		return true
	}

	return false
}

// SetReceived gets a reference to the given int32 and assigns it to the Received field.
func (o *MailStatsType) SetReceived(v int32) {
	o.Received = &v
}

// GetSent returns the Sent field value if set, zero value otherwise.
func (o *MailStatsType) GetSent() int32 {
	if o == nil || IsNil(o.Sent) {
		var ret int32
		return ret
	}
	return *o.Sent
}

// GetSentOk returns a tuple with the Sent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetSentOk() (*int32, bool) {
	if o == nil || IsNil(o.Sent) {
		return nil, false
	}
	return o.Sent, true
}

// HasSent returns a boolean if a field has been set.
func (o *MailStatsType) HasSent() bool {
	if o != nil && !IsNil(o.Sent) {
		return true
	}

	return false
}

// SetSent gets a reference to the given int32 and assigns it to the Sent field.
func (o *MailStatsType) SetSent(v int32) {
	o.Sent = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *MailStatsType) GetVolume() MailStatsTypeVolume {
	if o == nil || IsNil(o.Volume) {
		var ret MailStatsTypeVolume
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailStatsType) GetVolumeOk() (*MailStatsTypeVolume, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *MailStatsType) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given MailStatsTypeVolume and assigns it to the Volume field.
func (o *MailStatsType) SetVolume(v MailStatsTypeVolume) {
	o.Volume = &v
}

func (o MailStatsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailStatsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.CurrencySymbol) {
		toSerialize["currencySymbol"] = o.CurrencySymbol
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Received) {
		toSerialize["received"] = o.Received
	}
	if !IsNil(o.Sent) {
		toSerialize["sent"] = o.Sent
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableMailStatsType struct {
	value *MailStatsType
	isSet bool
}

func (v NullableMailStatsType) Get() *MailStatsType {
	return v.value
}

func (v *NullableMailStatsType) Set(val *MailStatsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMailStatsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMailStatsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailStatsType(val *MailStatsType) *NullableMailStatsType {
	return &NullableMailStatsType{value: val, isSet: true}
}

func (v NullableMailStatsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailStatsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



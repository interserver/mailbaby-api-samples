/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DenyRuleRecord
import org.openapitools.client.model.ErrorMessage
import org.openapitools.client.model.GenericResponse
import org.openapitools.client.model.MailBlocks
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object BlockingApi {

  def apply(baseUrl: String = "https://api.mailbaby.net") = new BlockingApi(baseUrl)
}

class BlockingApi(baseUrl: String) {

  /**
   * Adds a new email deny rule into the system to block new emails that match the given criteria
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param `type` The type of deny rule.
   * @param data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
   * @param user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
   */
  def addRule(`type`: String, data: String, user: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[GenericResponse] =
    ApiRequest[GenericResponse](ApiMethods.POST, baseUrl, "/mail/rules", "application/x-www-form-urlencoded")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withFormParam("user", user)
      .withFormParam("type", `type`)
      .withFormParam("data", data)
      .withSuccessResponse[GenericResponse](200)
      .withErrorResponse[ErrorMessage](400)
      .withErrorResponse[ErrorMessage](401)
      .withErrorResponse[ErrorMessage](404)
      

  /**
   * Removes one of the configured deny mail rules from the system.
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param ruleId The ID of the Rules entry.
   */
  def deleteRule(ruleId: Int)(implicit apiKey: ApiKeyValue): ApiRequest[GenericResponse] =
    ApiRequest[GenericResponse](ApiMethods.DELETE, baseUrl, "/mail/rules/{ruleId}", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withPathParam("ruleId", ruleId)
      .withSuccessResponse[GenericResponse](200)
      .withErrorResponse[ErrorMessage](400)
      .withErrorResponse[ErrorMessage](401)
      .withErrorResponse[ErrorMessage](404)
      

  /**
   * Removes an email address from the various block lists. 
   * 
   * Expected answers:
   *   code 200 : GenericResponse (search results matching criteria)
   *   code 400 : ErrorMessage (Error message when there was a problem with the input parameters.)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (The specified resource was not found)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   * 
   * @param body 
   */
  def delistBlock(body: String)(implicit apiKey: ApiKeyValue): ApiRequest[GenericResponse] =
    ApiRequest[GenericResponse](ApiMethods.POST, baseUrl, "/mail/blocks/delete", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withBody(body)
      .withSuccessResponse[GenericResponse](200)
      .withErrorResponse[ErrorMessage](400)
      .withErrorResponse[ErrorMessage](401)
      .withErrorResponse[ErrorMessage](404)
      

  /**
   * Expected answers:
   *   code 200 : MailBlocks (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getMailBlocks()(implicit apiKey: ApiKeyValue): ApiRequest[MailBlocks] =
    ApiRequest[MailBlocks](ApiMethods.GET, baseUrl, "/mail/blocks", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withSuccessResponse[MailBlocks](200)
      .withErrorResponse[ErrorMessage](401)
      .withErrorResponse[ErrorMessage](404)
      

  /**
   * Returns a listing of all the deny block rules you have configured.
   * 
   * Expected answers:
   *   code 200 : Seq[DenyRuleRecord] (OK)
   *   code 401 : ErrorMessage (Unauthorized)
   *   code 404 : ErrorMessage (Unauthorized)
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   */
  def getRules()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[DenyRuleRecord]] =
    ApiRequest[Seq[DenyRuleRecord]](ApiMethods.GET, baseUrl, "/mail/rules", "application/json")
      .withApiKey(apiKey, "X-API-KEY", HEADER)
      .withSuccessResponse[Seq[DenyRuleRecord]](200)
      .withErrorResponse[ErrorMessage](401)
      .withErrorResponse[ErrorMessage](404)
      



}


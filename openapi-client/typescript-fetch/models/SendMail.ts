/* tslint:disable */
/* eslint-disable */
/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MailAttachment,
    MailAttachmentFromJSON,
    MailAttachmentFromJSONTyped,
    MailAttachmentToJSON,
    MailContact,
    MailContactFromJSON,
    MailContactFromJSONTyped,
    MailContactToJSON,
    SendMailFrom,
    SendMailFromFromJSON,
    SendMailFromFromJSONTyped,
    SendMailFromToJSON,
} from './';

/**
 * Details for an Email
 * @export
 * @interface SendMail
 */
export interface SendMail {
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMail
     */
    subject: string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMail
     */
    body: string;
    /**
     * The contact whom is the this email is from.
     * @type {Array<SendMailFrom>}
     * @memberof SendMail
     */
    from: Array<SendMailFrom>;
    /**
     * The Contact whom is the primary recipient of this email.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    to: Array<MailContact>;
    /**
     * The ID of the Mail order within our system to use as the Mail Account.
     * @type {number}
     * @memberof SendMail
     */
    id: number;
    /**
     * Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    replyto?: Array<MailContact>;
    /**
     * Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    cc?: Array<MailContact>;
    /**
     * Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    bcc?: Array<MailContact>;
    /**
     * Optional file attachments to include in the email
     * @type {Array<MailAttachment>}
     * @memberof SendMail
     */
    attachments?: Array<MailAttachment>;
}

export function SendMailFromJSON(json: any): SendMail {
    return SendMailFromJSONTyped(json, false);
}

export function SendMailFromJSONTyped(json: any, ignoreDiscriminator: boolean): SendMail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': json['subject'],
        'body': json['body'],
        'from': ((json['from'] as Array<any>).map(SendMailFromFromJSON)),
        'to': ((json['to'] as Array<any>).map(MailContactFromJSON)),
        'id': json['id'],
        'replyto': !exists(json, 'replyto') ? undefined : ((json['replyto'] as Array<any>).map(MailContactFromJSON)),
        'cc': !exists(json, 'cc') ? undefined : ((json['cc'] as Array<any>).map(MailContactFromJSON)),
        'bcc': !exists(json, 'bcc') ? undefined : ((json['bcc'] as Array<any>).map(MailContactFromJSON)),
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(MailAttachmentFromJSON)),
    };
}

export function SendMailToJSON(value?: SendMail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': value.subject,
        'body': value.body,
        'from': ((value.from as Array<any>).map(SendMailFromToJSON)),
        'to': ((value.to as Array<any>).map(MailContactToJSON)),
        'id': value.id,
        'replyto': value.replyto === undefined ? undefined : ((value.replyto as Array<any>).map(MailContactToJSON)),
        'cc': value.cc === undefined ? undefined : ((value.cc as Array<any>).map(MailContactToJSON)),
        'bcc': value.bcc === undefined ? undefined : ((value.bcc as Array<any>).map(MailContactToJSON)),
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(MailAttachmentToJSON)),
    };
}



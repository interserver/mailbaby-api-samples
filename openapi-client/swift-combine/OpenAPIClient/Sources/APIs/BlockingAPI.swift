//
// BlockingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class BlockingAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://api.mailbaby.net")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    ///
    /// Enum for parameter type
    ///
    public enum AddRuleModelType: String, Codable, CaseIterable {
        case domain = "domain"
        case email = "email"
        case startswith = "startswith"
        case destination = "destination"
    }
    public enum AddRuleError: Error, CustomStringConvertible {
        // Error message when there was a problem with the input parameters.
        case code400Error(ErrorMessage)
        // Unauthorized
        case code401Error(ErrorMessage)
        // The specified resource was not found
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "AddRuleError: Error message when there was a problem with the input parameters.: \(object)"
            case .code401Error(let object):
                return "AddRuleError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "AddRuleError: The specified resource was not found: \(object)"
            }
        }
    }

    /// Creates a new email deny rule.
    /// - POST /mail/rules
    /// - Adds a new email deny rule into the system to block new emails that match the given criteria
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - parameter type: (form) The type of deny rule. 
    /// - parameter data: (form) The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com. 
    /// - parameter user: (form) Mail account username that will be tied to this rule.  If not specified the first active mail order will be used. (optional)
    /// - returns: AnyPublisher<GenericResponse, Error> 
    open func addRule(type: AddRuleModelType, data: String, user: String? = nil) -> AnyPublisher<GenericResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/rules"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                var formEncodedItems: [String] = []
                if let user = user { formEncodedItems.append("user=\(user)") } 
                formEncodedItems.append("type=\(type.rawValue)")
                formEncodedItems.append("data=\(data)")
                request.httpBody = formEncodedItems.joined(separator: "&").data(using: .utf8)
                request.setValue("application/x-www-form-urlencoded", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GenericResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return AddRuleError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return AddRuleError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return AddRuleError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(GenericResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum DeleteRuleError: Error, CustomStringConvertible {
        // Error message when there was a problem with the input parameters.
        case code400Error(ErrorMessage)
        // Unauthorized
        case code401Error(ErrorMessage)
        // The specified resource was not found
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "DeleteRuleError: Error message when there was a problem with the input parameters.: \(object)"
            case .code401Error(let object):
                return "DeleteRuleError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "DeleteRuleError: The specified resource was not found: \(object)"
            }
        }
    }

    /// Removes an deny mail rule.
    /// - DELETE /mail/rules/{ruleId}
    /// - Removes one of the configured deny mail rules from the system.
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - parameter ruleId: (path) The ID of the Rules entry. 
    /// - returns: AnyPublisher<GenericResponse, Error> 
    open func deleteRule(ruleId: Int) -> AnyPublisher<GenericResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mail/rules/{ruleId}"
                localVarPath = localVarPath.replacingOccurrences(of: "{ruleId}", with: "\(ruleId)")
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GenericResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return DeleteRuleError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return DeleteRuleError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return DeleteRuleError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(GenericResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum DelistBlockError: Error, CustomStringConvertible {
        // Error message when there was a problem with the input parameters.
        case code400Error(ErrorMessage)
        // Unauthorized
        case code401Error(ErrorMessage)
        // The specified resource was not found
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "DelistBlockError: Error message when there was a problem with the input parameters.: \(object)"
            case .code401Error(let object):
                return "DelistBlockError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "DelistBlockError: The specified resource was not found: \(object)"
            }
        }
    }

    /// Removes an email address from the blocked list
    /// - POST /mail/blocks/delete
    /// - Removes an email address from the various block lists. 
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - parameter body: (body)  
    /// - returns: AnyPublisher<GenericResponse, Error> 
    open func delistBlock(body: String) -> AnyPublisher<GenericResponse, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/blocks/delete"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(body)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<GenericResponse, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return DelistBlockError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return DelistBlockError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return DelistBlockError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(GenericResponse.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetMailBlocksError: Error, CustomStringConvertible {
        // Unauthorized
        case code401Error(ErrorMessage)
        // Unauthorized
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code401Error(let object):
                return "GetMailBlocksError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "GetMailBlocksError: Unauthorized: \(object)"
            }
        }
    }

    /// displays a list of blocked email addresses
    /// - GET /mail/blocks
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - returns: AnyPublisher<MailBlocks, Error> 
    open func getMailBlocks() -> AnyPublisher<MailBlocks, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/blocks"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<MailBlocks, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return GetMailBlocksError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return GetMailBlocksError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(MailBlocks.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetRulesError: Error, CustomStringConvertible {
        // Unauthorized
        case code401Error(ErrorMessage)
        // Unauthorized
        case code404Error(ErrorMessage)

        public var description: String {
            switch self {
            case .code401Error(let object):
                return "GetRulesError: Unauthorized: \(object)"
            case .code404Error(let object):
                return "GetRulesError: Unauthorized: \(object)"
            }
        }
    }

    /// Displays a listing of deny email rules.
    /// - GET /mail/rules
    /// - Returns a listing of all the deny block rules you have configured.
    /// - API Key:
    /// - type: apiKey X-API-KEY 
    /// - name: apiKeyAuth
    /// - returns: AnyPublisher<[DenyRuleRecord], Error> 
    open func getRules() -> AnyPublisher<[DenyRuleRecord], Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let localVarPath = "/mail/rules"
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<[DenyRuleRecord], Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return GetRulesError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorMessage.self, from: transportError.data)
                            return GetRulesError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode([DenyRuleRecord].self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

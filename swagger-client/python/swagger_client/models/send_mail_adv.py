# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@interserver.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendMailAdv(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'body': 'str',
        '_from': 'EmailAddressName',
        'to': 'list[EmailAddressName]',
        'replyto': 'list[EmailAddressName]',
        'cc': 'list[EmailAddressName]',
        'bcc': 'list[EmailAddressName]',
        'attachments': 'list[MailAttachment]',
        'id': 'int'
    }

    attribute_map = {
        'subject': 'subject',
        'body': 'body',
        '_from': 'from',
        'to': 'to',
        'replyto': 'replyto',
        'cc': 'cc',
        'bcc': 'bcc',
        'attachments': 'attachments',
        'id': 'id'
    }

    def __init__(self, subject=None, body=None, _from=None, to=None, replyto=None, cc=None, bcc=None, attachments=None, id=None):  # noqa: E501
        """SendMailAdv - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._body = None
        self.__from = None
        self._to = None
        self._replyto = None
        self._cc = None
        self._bcc = None
        self._attachments = None
        self._id = None
        self.discriminator = None
        self.subject = subject
        self.body = body
        self._from = _from
        self.to = to
        if replyto is not None:
            self.replyto = replyto
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        if attachments is not None:
            self.attachments = attachments
        if id is not None:
            self.id = id

    @property
    def subject(self):
        """Gets the subject of this SendMailAdv.  # noqa: E501

        The subject or title of the email  # noqa: E501

        :return: The subject of this SendMailAdv.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendMailAdv.

        The subject or title of the email  # noqa: E501

        :param subject: The subject of this SendMailAdv.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this SendMailAdv.  # noqa: E501

        The main email contents.  # noqa: E501

        :return: The body of this SendMailAdv.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SendMailAdv.

        The main email contents.  # noqa: E501

        :param body: The body of this SendMailAdv.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def _from(self):
        """Gets the _from of this SendMailAdv.  # noqa: E501


        :return: The _from of this SendMailAdv.  # noqa: E501
        :rtype: EmailAddressName
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendMailAdv.


        :param _from: The _from of this SendMailAdv.  # noqa: E501
        :type: EmailAddressName
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this SendMailAdv.  # noqa: E501

        A list of destionation email addresses to send this to  # noqa: E501

        :return: The to of this SendMailAdv.  # noqa: E501
        :rtype: list[EmailAddressName]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendMailAdv.

        A list of destionation email addresses to send this to  # noqa: E501

        :param to: The to of this SendMailAdv.  # noqa: E501
        :type: list[EmailAddressName]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def replyto(self):
        """Gets the replyto of this SendMailAdv.  # noqa: E501

        (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.  # noqa: E501

        :return: The replyto of this SendMailAdv.  # noqa: E501
        :rtype: list[EmailAddressName]
        """
        return self._replyto

    @replyto.setter
    def replyto(self, replyto):
        """Sets the replyto of this SendMailAdv.

        (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.  # noqa: E501

        :param replyto: The replyto of this SendMailAdv.  # noqa: E501
        :type: list[EmailAddressName]
        """

        self._replyto = replyto

    @property
    def cc(self):
        """Gets the cc of this SendMailAdv.  # noqa: E501

        (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.  # noqa: E501

        :return: The cc of this SendMailAdv.  # noqa: E501
        :rtype: list[EmailAddressName]
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this SendMailAdv.

        (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.  # noqa: E501

        :param cc: The cc of this SendMailAdv.  # noqa: E501
        :type: list[EmailAddressName]
        """

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this SendMailAdv.  # noqa: E501

        (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.  # noqa: E501

        :return: The bcc of this SendMailAdv.  # noqa: E501
        :rtype: list[EmailAddressName]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this SendMailAdv.

        (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.  # noqa: E501

        :param bcc: The bcc of this SendMailAdv.  # noqa: E501
        :type: list[EmailAddressName]
        """

        self._bcc = bcc

    @property
    def attachments(self):
        """Gets the attachments of this SendMailAdv.  # noqa: E501

        (optional) File attachments to include in the email.  The file contents must be base64 encoded!  # noqa: E501

        :return: The attachments of this SendMailAdv.  # noqa: E501
        :rtype: list[MailAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SendMailAdv.

        (optional) File attachments to include in the email.  The file contents must be base64 encoded!  # noqa: E501

        :param attachments: The attachments of this SendMailAdv.  # noqa: E501
        :type: list[MailAttachment]
        """

        self._attachments = attachments

    @property
    def id(self):
        """Gets the id of this SendMailAdv.  # noqa: E501

        (optional)  ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :return: The id of this SendMailAdv.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SendMailAdv.

        (optional)  ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :param id: The id of this SendMailAdv.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendMailAdv, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendMailAdv):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

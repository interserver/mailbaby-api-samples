/* tslint:disable */
/* eslint-disable */
/**
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status_text?: string;
}
/**
 * A File attachment for an email
 * @export
 * @interface MailAttachment
 */
export interface MailAttachment {
    /**
     * Contents of the attached file
     * @type {any}
     * @memberof MailAttachment
     */
    data: any;
    /**
     * Optional filename to specify for the attachment.
     * @type {string}
     * @memberof MailAttachment
     */
    filename?: string;
}
/**
 * An Email Contact
 * @export
 * @interface MailContact
 */
export interface MailContact {
    /**
     * The email address
     * @type {string}
     * @memberof MailContact
     */
    email: string;
    /**
     * Optional contact name
     * @type {string}
     * @memberof MailContact
     */
    name?: string;
}
/**
 * Mail Order Details
 * @export
 * @interface MailLog
 */
export interface MailLog {
    /**
     * 
     * @type {number}
     * @memberof MailLog
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface MailOrder
 */
export interface MailOrder {
    /**
     * 
     * @type {number}
     * @memberof MailOrder
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof MailOrder
     */
    comment?: string;
}
/**
 * Details for an Email
 * @export
 * @interface SendMail
 */
export interface SendMail {
    /**
     * The ID of the Mail order within our system to use as the Mail Account.
     * @type {number}
     * @memberof SendMail
     */
    id: number;
    /**
     * 
     * @type {MailContact}
     * @memberof SendMail
     */
    from: MailContact;
    /**
     * The Contact whom is the primary recipient of this email.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    to: Array<MailContact>;
    /**
     * The subject or title of the email
     * @type {string}
     * @memberof SendMail
     */
    subject: string;
    /**
     * The main email contents.
     * @type {string}
     * @memberof SendMail
     */
    body: string;
    /**
     * Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    replyto?: Array<MailContact>;
    /**
     * Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    cc?: Array<MailContact>;
    /**
     * Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
     * @type {Array<MailContact>}
     * @memberof SendMail
     */
    bcc?: Array<MailContact>;
    /**
     * Optional file attachments to include in the email
     * @type {Array<MailAttachment>}
     * @memberof SendMail
     */
    attachments?: Array<MailAttachment>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailById: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMailById', 'id', id)
            const localVarPath = `/mail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication apiLoginAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-LOGIN", configuration)

            // authentication apiPasswordAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-PASS", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication apiLoginAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-LOGIN", configuration)

            // authentication apiPasswordAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-PASS", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [mailOrder] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder: async (mailOrder?: MailOrder, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication apiLoginAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-LOGIN", configuration)

            // authentication apiPasswordAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-PASS", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {number} id User ID
         * @param {SendMail} sendMail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdvMailById: async (id: number, sendMail: SendMail, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendAdvMailById', 'id', id)
            // verify required parameter 'sendMail' is not null or undefined
            assertParamExists('sendAdvMailById', 'sendMail', sendMail)
            const localVarPath = `/mail/{id}/advsend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication apiLoginAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-LOGIN", configuration)

            // authentication apiPasswordAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-PASS", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {number} id User ID
         * @param {string} [subject] 
         * @param {string} [body] 
         * @param {string} [to] 
         * @param {string} [toName] 
         * @param {string} [from] 
         * @param {string} [fromName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailById: async (id: number, subject?: string, body?: string, to?: string, toName?: string, from?: string, fromName?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sendMailById', 'id', id)
            const localVarPath = `/mail/{id}/send`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication apiLoginAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-LOGIN", configuration)

            // authentication apiPasswordAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-PASS", configuration)

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (body !== undefined) {
                localVarQueryParameter['body'] = body;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (toName !== undefined) {
                localVarQueryParameter['toName'] = toName;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (fromName !== undefined) {
                localVarQueryParameter['fromName'] = fromName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mail/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication apiLoginAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-LOGIN", configuration)

            // authentication apiPasswordAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-PASS", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} id User ID
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLogById: async (id: number, searchString?: string, skip?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('viewMailLogById', 'id', id)
            const localVarPath = `/mail/{id}/log`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-KEY", configuration)

            // authentication apiLoginAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-LOGIN", configuration)

            // authentication apiPasswordAuth required
            await setApiKeyToObject(localVarHeaderParameter, "X-API-PASS", configuration)

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMailById(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMailById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMailOrders(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MailOrder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMailOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingServer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingServer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [mailOrder] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placeMailOrder(mailOrder?: MailOrder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.placeMailOrder(mailOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {number} id User ID
         * @param {SendMail} sendMail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendAdvMailById(id: number, sendMail: SendMail, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendAdvMailById(id, sendMail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {number} id User ID
         * @param {string} [subject] 
         * @param {string} [body] 
         * @param {string} [to] 
         * @param {string} [toName] 
         * @param {string} [from] 
         * @param {string} [fromName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMailById(id: number, subject?: string, body?: string, to?: string, toName?: string, from?: string, fromName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMailById(id, subject, body, to, toName, from, fromName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateMailOrder(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateMailOrder(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} id User ID
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MailLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMailLogById(id, searchString, skip, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * returns information about a mail order in the system with the given id.
         * @summary Gets mail order information by id
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailById(id: number, options?: any): AxiosPromise<MailOrder> {
            return localVarFp.getMailById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary displays a list of mail service orders
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailOrders(options?: any): AxiosPromise<Array<MailOrder>> {
            return localVarFp.getMailOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Checks if the server is running
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingServer(options?: any): AxiosPromise<void> {
            return localVarFp.pingServer(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds an item to the system
         * @summary places a mail order
         * @param {MailOrder} [mailOrder] Inventory item to add
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeMailOrder(mailOrder?: MailOrder, options?: any): AxiosPromise<void> {
            return localVarFp.placeMailOrder(mailOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
         * @summary Sends an Email with Advanced Options
         * @param {number} id User ID
         * @param {SendMail} sendMail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendAdvMailById(id: number, sendMail: SendMail, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.sendAdvMailById(id, sendMail, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends An email through one of your mail orders.
         * @summary Sends an Email
         * @param {number} id User ID
         * @param {string} [subject] 
         * @param {string} [body] 
         * @param {string} [to] 
         * @param {string} [toName] 
         * @param {string} [from] 
         * @param {string} [fromName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailById(id: number, subject?: string, body?: string, to?: string, toName?: string, from?: string, fromName?: string, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.sendMailById(id, subject, body, to, toName, from, fromName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary validatess order details before placing an order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateMailOrder(options?: any): AxiosPromise<void> {
            return localVarFp.validateMailOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * By passing in the appropriate options, you can search for available inventory in the system 
         * @summary displays the mail log
         * @param {number} id User ID
         * @param {string} [searchString] pass an optional search string for looking up inventory
         * @param {number} [skip] number of records to skip for pagination
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<MailLog>> {
            return localVarFp.viewMailLogById(id, searchString, skip, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * returns information about a mail order in the system with the given id.
     * @summary Gets mail order information by id
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMailById(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getMailById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary displays a list of mail service orders
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMailOrders(options?: any) {
        return DefaultApiFp(this.configuration).getMailOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Checks if the server is running
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pingServer(options?: any) {
        return DefaultApiFp(this.configuration).pingServer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds an item to the system
     * @summary places a mail order
     * @param {MailOrder} [mailOrder] Inventory item to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public placeMailOrder(mailOrder?: MailOrder, options?: any) {
        return DefaultApiFp(this.configuration).placeMailOrder(mailOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @summary Sends an Email with Advanced Options
     * @param {number} id User ID
     * @param {SendMail} sendMail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendAdvMailById(id: number, sendMail: SendMail, options?: any) {
        return DefaultApiFp(this.configuration).sendAdvMailById(id, sendMail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends An email through one of your mail orders.
     * @summary Sends an Email
     * @param {number} id User ID
     * @param {string} [subject] 
     * @param {string} [body] 
     * @param {string} [to] 
     * @param {string} [toName] 
     * @param {string} [from] 
     * @param {string} [fromName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendMailById(id: number, subject?: string, body?: string, to?: string, toName?: string, from?: string, fromName?: string, options?: any) {
        return DefaultApiFp(this.configuration).sendMailById(id, subject, body, to, toName, from, fromName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary validatess order details before placing an order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public validateMailOrder(options?: any) {
        return DefaultApiFp(this.configuration).validateMailOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @summary displays the mail log
     * @param {number} id User ID
     * @param {string} [searchString] pass an optional search string for looking up inventory
     * @param {number} [skip] number of records to skip for pagination
     * @param {number} [limit] maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewMailLogById(id: number, searchString?: string, skip?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).viewMailLogById(id, searchString, skip, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



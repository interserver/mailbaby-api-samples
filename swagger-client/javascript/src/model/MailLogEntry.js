/*
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.37-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The MailLogEntry model module.
 * @module model/MailLogEntry
 * @version 1.0.1
 */
export class MailLogEntry {
  /**
   * Constructs a new <code>MailLogEntry</code>.
   * An email record
   * @alias module:model/MailLogEntry
   * @class
   * @param id {Number} internal db id
   * @param id {String} mail id
   * @param from {String} from address
   * @param to {String} to address
   * @param subject {String} email subject
   * @param messageId {String} message id
   * @param created {String} creation date
   * @param time {Number} creation timestamp
   * @param user {String} user account
   * @param transtype {String} transaction type
   * @param transhost {String} transaction host
   * @param originhost {String} origin host
   * @param origin {String} origin ip
   * @param _interface {String} interface name
   * @param _date {String} date processed
   * @param sendingZone {String} sending zone
   * @param bodySize {Number} email body size in bytes
   * @param sourceMd5 {String} md5 sum of the email
   * @param seq {Number} delivery sequency
   * @param domain {String} to address domain
   * @param recipient {String} email receiver address
   * @param locked {Number} locked status
   * @param lockTime {Number} lock timestamp
   * @param assigned {String} assigned server
   * @param queued {String} queued timestamp
   * @param lock {String} lock id
   * @param logger {String} logger
   * @param mxPort {Number} mx port number
   * @param connectionKey {String} connection key
   * @param mxHostname {String} mx hostname
   * @param sentBodyHash {String} body hash
   * @param sentBodySize {Number} sent body size in bytes
   * @param md5Match {Number} md5 checksum matching result
   */
  constructor(id, id, from, to, subject, messageId, created, time, user, transtype, transhost, originhost, origin, _interface, _date, sendingZone, bodySize, sourceMd5, seq, domain, recipient, locked, lockTime, assigned, queued, lock, logger, mxPort, connectionKey, mxHostname, sentBodyHash, sentBodySize, md5Match) {
    this.id = id;
    this.id = id;
    this.from = from;
    this.to = to;
    this.subject = subject;
    this.messageId = messageId;
    this.created = created;
    this.time = time;
    this.user = user;
    this.transtype = transtype;
    this.transhost = transhost;
    this.originhost = originhost;
    this.origin = origin;
    this._interface = _interface;
    this._date = _date;
    this.sendingZone = sendingZone;
    this.bodySize = bodySize;
    this.sourceMd5 = sourceMd5;
    this.seq = seq;
    this.domain = domain;
    this.recipient = recipient;
    this.locked = locked;
    this.lockTime = lockTime;
    this.assigned = assigned;
    this.queued = queued;
    this.lock = lock;
    this.logger = logger;
    this.mxPort = mxPort;
    this.connectionKey = connectionKey;
    this.mxHostname = mxHostname;
    this.sentBodyHash = sentBodyHash;
    this.sentBodySize = sentBodySize;
    this.md5Match = md5Match;
  }

  /**
   * Constructs a <code>MailLogEntry</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MailLogEntry} obj Optional instance to populate.
   * @return {module:model/MailLogEntry} The populated <code>MailLogEntry</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MailLogEntry();
      if (data.hasOwnProperty('_id'))
        obj.id = ApiClient.convertToType(data['_id'], 'Number');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('from'))
        obj.from = ApiClient.convertToType(data['from'], 'String');
      if (data.hasOwnProperty('to'))
        obj.to = ApiClient.convertToType(data['to'], 'String');
      if (data.hasOwnProperty('subject'))
        obj.subject = ApiClient.convertToType(data['subject'], 'String');
      if (data.hasOwnProperty('messageId'))
        obj.messageId = ApiClient.convertToType(data['messageId'], 'String');
      if (data.hasOwnProperty('created'))
        obj.created = ApiClient.convertToType(data['created'], 'String');
      if (data.hasOwnProperty('time'))
        obj.time = ApiClient.convertToType(data['time'], 'Number');
      if (data.hasOwnProperty('user'))
        obj.user = ApiClient.convertToType(data['user'], 'String');
      if (data.hasOwnProperty('transtype'))
        obj.transtype = ApiClient.convertToType(data['transtype'], 'String');
      if (data.hasOwnProperty('transhost'))
        obj.transhost = ApiClient.convertToType(data['transhost'], 'String');
      if (data.hasOwnProperty('originhost'))
        obj.originhost = ApiClient.convertToType(data['originhost'], 'String');
      if (data.hasOwnProperty('origin'))
        obj.origin = ApiClient.convertToType(data['origin'], 'String');
      if (data.hasOwnProperty('interface'))
        obj._interface = ApiClient.convertToType(data['interface'], 'String');
      if (data.hasOwnProperty('date'))
        obj._date = ApiClient.convertToType(data['date'], 'String');
      if (data.hasOwnProperty('sendingZone'))
        obj.sendingZone = ApiClient.convertToType(data['sendingZone'], 'String');
      if (data.hasOwnProperty('bodySize'))
        obj.bodySize = ApiClient.convertToType(data['bodySize'], 'Number');
      if (data.hasOwnProperty('sourceMd5'))
        obj.sourceMd5 = ApiClient.convertToType(data['sourceMd5'], 'String');
      if (data.hasOwnProperty('seq'))
        obj.seq = ApiClient.convertToType(data['seq'], 'Number');
      if (data.hasOwnProperty('domain'))
        obj.domain = ApiClient.convertToType(data['domain'], 'String');
      if (data.hasOwnProperty('recipient'))
        obj.recipient = ApiClient.convertToType(data['recipient'], 'String');
      if (data.hasOwnProperty('locked'))
        obj.locked = ApiClient.convertToType(data['locked'], 'Number');
      if (data.hasOwnProperty('lockTime'))
        obj.lockTime = ApiClient.convertToType(data['lockTime'], 'Number');
      if (data.hasOwnProperty('assigned'))
        obj.assigned = ApiClient.convertToType(data['assigned'], 'String');
      if (data.hasOwnProperty('queued'))
        obj.queued = ApiClient.convertToType(data['queued'], 'String');
      if (data.hasOwnProperty('_lock'))
        obj.lock = ApiClient.convertToType(data['_lock'], 'String');
      if (data.hasOwnProperty('logger'))
        obj.logger = ApiClient.convertToType(data['logger'], 'String');
      if (data.hasOwnProperty('mxPort'))
        obj.mxPort = ApiClient.convertToType(data['mxPort'], 'Number');
      if (data.hasOwnProperty('connectionKey'))
        obj.connectionKey = ApiClient.convertToType(data['connectionKey'], 'String');
      if (data.hasOwnProperty('mxHostname'))
        obj.mxHostname = ApiClient.convertToType(data['mxHostname'], 'String');
      if (data.hasOwnProperty('sentBodyHash'))
        obj.sentBodyHash = ApiClient.convertToType(data['sentBodyHash'], 'String');
      if (data.hasOwnProperty('sentBodySize'))
        obj.sentBodySize = ApiClient.convertToType(data['sentBodySize'], 'Number');
      if (data.hasOwnProperty('md5Match'))
        obj.md5Match = ApiClient.convertToType(data['md5Match'], 'Number');
    }
    return obj;
  }
}

/**
 * internal db id
 * @member {Number} id
 */
MailLogEntry.prototype.id = undefined;

/**
 * mail id
 * @member {String} id
 */
MailLogEntry.prototype.id = undefined;

/**
 * from address
 * @member {String} from
 */
MailLogEntry.prototype.from = undefined;

/**
 * to address
 * @member {String} to
 */
MailLogEntry.prototype.to = undefined;

/**
 * email subject
 * @member {String} subject
 */
MailLogEntry.prototype.subject = undefined;

/**
 * message id
 * @member {String} messageId
 */
MailLogEntry.prototype.messageId = undefined;

/**
 * creation date
 * @member {String} created
 */
MailLogEntry.prototype.created = undefined;

/**
 * creation timestamp
 * @member {Number} time
 */
MailLogEntry.prototype.time = undefined;

/**
 * user account
 * @member {String} user
 */
MailLogEntry.prototype.user = undefined;

/**
 * transaction type
 * @member {String} transtype
 */
MailLogEntry.prototype.transtype = undefined;

/**
 * transaction host
 * @member {String} transhost
 */
MailLogEntry.prototype.transhost = undefined;

/**
 * origin host
 * @member {String} originhost
 */
MailLogEntry.prototype.originhost = undefined;

/**
 * origin ip
 * @member {String} origin
 */
MailLogEntry.prototype.origin = undefined;

/**
 * interface name
 * @member {String} _interface
 */
MailLogEntry.prototype._interface = undefined;

/**
 * date processed
 * @member {String} _date
 */
MailLogEntry.prototype._date = undefined;

/**
 * sending zone
 * @member {String} sendingZone
 */
MailLogEntry.prototype.sendingZone = undefined;

/**
 * email body size in bytes
 * @member {Number} bodySize
 */
MailLogEntry.prototype.bodySize = undefined;

/**
 * md5 sum of the email
 * @member {String} sourceMd5
 */
MailLogEntry.prototype.sourceMd5 = undefined;

/**
 * delivery sequency
 * @member {Number} seq
 */
MailLogEntry.prototype.seq = undefined;

/**
 * to address domain
 * @member {String} domain
 */
MailLogEntry.prototype.domain = undefined;

/**
 * email receiver address
 * @member {String} recipient
 */
MailLogEntry.prototype.recipient = undefined;

/**
 * locked status
 * @member {Number} locked
 */
MailLogEntry.prototype.locked = undefined;

/**
 * lock timestamp
 * @member {Number} lockTime
 */
MailLogEntry.prototype.lockTime = undefined;

/**
 * assigned server
 * @member {String} assigned
 */
MailLogEntry.prototype.assigned = undefined;

/**
 * queued timestamp
 * @member {String} queued
 */
MailLogEntry.prototype.queued = undefined;

/**
 * lock id
 * @member {String} lock
 */
MailLogEntry.prototype.lock = undefined;

/**
 * logger
 * @member {String} logger
 */
MailLogEntry.prototype.logger = undefined;

/**
 * mx port number
 * @member {Number} mxPort
 */
MailLogEntry.prototype.mxPort = undefined;

/**
 * connection key
 * @member {String} connectionKey
 */
MailLogEntry.prototype.connectionKey = undefined;

/**
 * mx hostname
 * @member {String} mxHostname
 */
MailLogEntry.prototype.mxHostname = undefined;

/**
 * body hash
 * @member {String} sentBodyHash
 */
MailLogEntry.prototype.sentBodyHash = undefined;

/**
 * sent body size in bytes
 * @member {Number} sentBodySize
 */
MailLogEntry.prototype.sentBodySize = undefined;

/**
 * md5 checksum matching result
 * @member {Number} md5Match
 */
MailLogEntry.prototype.md5Match = undefined;


/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** Details for an Email
  * @param subject The subject or title of the email
  * @param body The main email contents.
  * @param from 
  * @param to 
  * @param replyto 
  * @param cc 
  * @param bcc 
  * @param attachments (optional) File attachments to include in the email.  The file contents must be base64 encoded!
  * @param id (optional)  ID of the Mail order within our system to use as the Mail Account.
  */
case class SendMailAdv(
    subject: String,
    body: String,
    from: EmailAddressTypes,
    to: EmailAddressesTypes,
    replyto: Option[EmailAddressesTypes] = None,
    cc: Option[EmailAddressesTypes] = None,
    bcc: Option[EmailAddressesTypes] = None,
    attachments: Option[Seq[MailAttachment]] = None,
    id: Option[Long] = None
)
  
object SendMailAdv {
  given encoderSendMailAdv: Encoder[SendMailAdv] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("subject" -> t.subject.asJson),
        Some("body" -> t.body.asJson),
        Some("from" -> t.from.asJson),
        Some("to" -> t.to.asJson),
        t.replyto.map(v => "replyto" -> v.asJson),
        t.cc.map(v => "cc" -> v.asJson),
        t.bcc.map(v => "bcc" -> v.asJson),
        t.attachments.map(v => "attachments" -> v.asJson),
        t.id.map(v => "id" -> v.asJson)
      ).flatten
    }
  }
  given decoderSendMailAdv: Decoder[SendMailAdv] = Decoder.instance { c =>
    for {
      subject <- c.downField("subject").as[String]
      body <- c.downField("body").as[String]
      from <- c.downField("from").as[EmailAddressTypes]
      to <- c.downField("to").as[EmailAddressesTypes]
      replyto <- c.downField("replyto").as[Option[EmailAddressesTypes]]
      cc <- c.downField("cc").as[Option[EmailAddressesTypes]]
      bcc <- c.downField("bcc").as[Option[EmailAddressesTypes]]
      attachments <- c.downField("attachments").as[Option[Seq[MailAttachment]]]
      id <- c.downField("id").as[Option[Long]]
    } yield SendMailAdv(
      subject = subject,
      body = body,
      from = from,
      to = to,
      replyto = replyto,
      cc = cc,
      bcc = bcc,
      attachments = attachments,
      id = id
    )
  }
}


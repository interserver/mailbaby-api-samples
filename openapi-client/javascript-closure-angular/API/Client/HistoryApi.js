/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.HistoryApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 * Version: 1.1.0
* Generator version: 7.17.0-SNAPSHOT
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license GNU GPLv3
 * https://www.gnu.org/licenses/gpl.txt
 */

goog.provide('API.Client.HistoryApi');

goog.require('API.Client.ErrorMessage');
goog.require('API.Client.MailLog');
goog.require('API.Client.MailStatsType');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.HistoryApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('HistoryApiBasePath') ?
                   /** @type {!string} */ ($injector.get('HistoryApiBasePath')) :
                   'https://api.mailbaby.net';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('HistoryApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('HistoryApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.HistoryApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Account usage statistics.
 * Returns information about the usage on your mail accounts.
 * @param {!string=} opt_time The timeframe for the statistics.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MailStatsType>}
 */
API.Client.HistoryApi.prototype.getStats = function(opt_time, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/stats';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_time !== undefined) {
    queryParameters['time'] = opt_time;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * displays the mail log
 * Get a listing of the emails sent through this system 
 * @param {!number=} opt_id The ID of your mail order this will be sent through.
 * @param {!string=} opt_origin originating ip address sending mail
 * @param {!string=} opt_mx mx record mail was sent to
 * @param {!string=} opt_from from email address
 * @param {!string=} opt_to to/destination email address
 * @param {!string=} opt_subject subject containing this string
 * @param {!string=} opt_mailid mail id
 * @param {!number=} opt_skip number of records to skip for pagination
 * @param {!number=} opt_limit maximum number of records to return
 * @param {!number=} opt_startDate earliest date to get emails in unix timestamp format
 * @param {!number=} opt_endDate earliest date to get emails in unix timestamp format
 * @param {!string=} opt_replyto Reply-To Email Address
 * @param {!string=} opt_headerfrom Header From Email Address
 * @param {!string=} opt_delivered Limiting the emails to wether or not they were delivered.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MailLog>}
 */
API.Client.HistoryApi.prototype.viewMailLog = function(opt_id, opt_origin, opt_mx, opt_from, opt_to, opt_subject, opt_mailid, opt_skip, opt_limit, opt_startDate, opt_endDate, opt_replyto, opt_headerfrom, opt_delivered, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/log';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_id !== undefined) {
    queryParameters['id'] = opt_id;
  }

  if (opt_origin !== undefined) {
    queryParameters['origin'] = opt_origin;
  }

  if (opt_mx !== undefined) {
    queryParameters['mx'] = opt_mx;
  }

  if (opt_from !== undefined) {
    queryParameters['from'] = opt_from;
  }

  if (opt_to !== undefined) {
    queryParameters['to'] = opt_to;
  }

  if (opt_subject !== undefined) {
    queryParameters['subject'] = opt_subject;
  }

  if (opt_mailid !== undefined) {
    queryParameters['mailid'] = opt_mailid;
  }

  if (opt_skip !== undefined) {
    queryParameters['skip'] = opt_skip;
  }

  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_startDate !== undefined) {
    queryParameters['startDate'] = opt_startDate;
  }

  if (opt_endDate !== undefined) {
    queryParameters['endDate'] = opt_endDate;
  }

  if (opt_replyto !== undefined) {
    queryParameters['replyto'] = opt_replyto;
  }

  if (opt_headerfrom !== undefined) {
    queryParameters['headerfrom'] = opt_headerfrom;
  }

  if (opt_delivered !== undefined) {
    queryParameters['delivered'] = opt_delivered;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

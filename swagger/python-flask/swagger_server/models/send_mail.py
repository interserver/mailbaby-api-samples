# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mail_attachment import MailAttachment  # noqa: F401,E501
from swagger_server.models.mail_contact import MailContact  # noqa: F401,E501
from swagger_server import util


class SendMail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, _from: MailContact=None, to: List[MailContact]=None, subject: str=None, body: str=None, replyto: List[MailContact]=None, cc: List[MailContact]=None, bcc: List[MailContact]=None, attachments: List[MailAttachment]=None):  # noqa: E501
        """SendMail - a model defined in Swagger

        :param id: The id of this SendMail.  # noqa: E501
        :type id: int
        :param _from: The _from of this SendMail.  # noqa: E501
        :type _from: MailContact
        :param to: The to of this SendMail.  # noqa: E501
        :type to: List[MailContact]
        :param subject: The subject of this SendMail.  # noqa: E501
        :type subject: str
        :param body: The body of this SendMail.  # noqa: E501
        :type body: str
        :param replyto: The replyto of this SendMail.  # noqa: E501
        :type replyto: List[MailContact]
        :param cc: The cc of this SendMail.  # noqa: E501
        :type cc: List[MailContact]
        :param bcc: The bcc of this SendMail.  # noqa: E501
        :type bcc: List[MailContact]
        :param attachments: The attachments of this SendMail.  # noqa: E501
        :type attachments: List[MailAttachment]
        """
        self.swagger_types = {
            'id': int,
            '_from': MailContact,
            'to': List[MailContact],
            'subject': str,
            'body': str,
            'replyto': List[MailContact],
            'cc': List[MailContact],
            'bcc': List[MailContact],
            'attachments': List[MailAttachment]
        }

        self.attribute_map = {
            'id': 'id',
            '_from': 'from',
            'to': 'to',
            'subject': 'subject',
            'body': 'body',
            'replyto': 'replyto',
            'cc': 'cc',
            'bcc': 'bcc',
            'attachments': 'attachments'
        }
        self._id = id
        self.__from = _from
        self._to = to
        self._subject = subject
        self._body = body
        self._replyto = replyto
        self._cc = cc
        self._bcc = bcc
        self._attachments = attachments

    @classmethod
    def from_dict(cls, dikt) -> 'SendMail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SendMail of this SendMail.  # noqa: E501
        :rtype: SendMail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this SendMail.

        The ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :return: The id of this SendMail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this SendMail.

        The ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :param id: The id of this SendMail.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _from(self) -> MailContact:
        """Gets the _from of this SendMail.


        :return: The _from of this SendMail.
        :rtype: MailContact
        """
        return self.__from

    @_from.setter
    def _from(self, _from: MailContact):
        """Sets the _from of this SendMail.


        :param _from: The _from of this SendMail.
        :type _from: MailContact
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> List[MailContact]:
        """Gets the to of this SendMail.

        The Contact whom is the primary recipient of this email.  # noqa: E501

        :return: The to of this SendMail.
        :rtype: List[MailContact]
        """
        return self._to

    @to.setter
    def to(self, to: List[MailContact]):
        """Sets the to of this SendMail.

        The Contact whom is the primary recipient of this email.  # noqa: E501

        :param to: The to of this SendMail.
        :type to: List[MailContact]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def subject(self) -> str:
        """Gets the subject of this SendMail.

        The subject or title of the email  # noqa: E501

        :return: The subject of this SendMail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this SendMail.

        The subject or title of the email  # noqa: E501

        :param subject: The subject of this SendMail.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self) -> str:
        """Gets the body of this SendMail.

        The main email contents.  # noqa: E501

        :return: The body of this SendMail.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this SendMail.

        The main email contents.  # noqa: E501

        :param body: The body of this SendMail.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def replyto(self) -> List[MailContact]:
        """Gets the replyto of this SendMail.

        Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.  # noqa: E501

        :return: The replyto of this SendMail.
        :rtype: List[MailContact]
        """
        return self._replyto

    @replyto.setter
    def replyto(self, replyto: List[MailContact]):
        """Sets the replyto of this SendMail.

        Optional list of Contacts that specify where replies to the email should be sent instead of the _from_ address.  # noqa: E501

        :param replyto: The replyto of this SendMail.
        :type replyto: List[MailContact]
        """

        self._replyto = replyto

    @property
    def cc(self) -> List[MailContact]:
        """Gets the cc of this SendMail.

        Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.  # noqa: E501

        :return: The cc of this SendMail.
        :rtype: List[MailContact]
        """
        return self._cc

    @cc.setter
    def cc(self, cc: List[MailContact]):
        """Sets the cc of this SendMail.

        Optional list of Contacts that should receive copies of the email.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.  # noqa: E501

        :param cc: The cc of this SendMail.
        :type cc: List[MailContact]
        """

        self._cc = cc

    @property
    def bcc(self) -> List[MailContact]:
        """Gets the bcc of this SendMail.

        Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.  # noqa: E501

        :return: The bcc of this SendMail.
        :rtype: List[MailContact]
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc: List[MailContact]):
        """Sets the bcc of this SendMail.

        Optional list of Contacts that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.  # noqa: E501

        :param bcc: The bcc of this SendMail.
        :type bcc: List[MailContact]
        """

        self._bcc = bcc

    @property
    def attachments(self) -> List[MailAttachment]:
        """Gets the attachments of this SendMail.

        Optional file attachments to include in the email  # noqa: E501

        :return: The attachments of this SendMail.
        :rtype: List[MailAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments: List[MailAttachment]):
        """Sets the attachments of this SendMail.

        Optional file attachments to include in the email  # noqa: E501

        :param attachments: The attachments of this SendMail.
        :type attachments: List[MailAttachment]
        """

        self._attachments = attachments

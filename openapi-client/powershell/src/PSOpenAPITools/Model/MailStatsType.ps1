#
# MailBaby Email Delivery and Management Service API
# **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
# Version: 1.1.0
# Contact: support@interserver.net
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Statistics about the mail usage including volume by IP, To address, and From address; as well as total sent / delivered counts and cost.

.PARAMETER Time
No description available.
.PARAMETER Usage
No description available.
.PARAMETER Currency
No description available.
.PARAMETER CurrencySymbol
No description available.
.PARAMETER Cost
No description available.
.PARAMETER Received
No description available.
.PARAMETER Sent
No description available.
.PARAMETER Volume
No description available.
.OUTPUTS

MailStatsType<PSCustomObject>
#>

function Initialize-MailStatsType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("all", "billing", "month", "7d", "24h", "today", "1h")]
        [String]
        ${Time} = "1h",
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Usage},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Currency},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencySymbol},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Cost},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Received},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sent},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Volume}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MailStatsType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "time" = ${Time}
            "usage" = ${Usage}
            "currency" = ${Currency}
            "currencySymbol" = ${CurrencySymbol}
            "cost" = ${Cost}
            "received" = ${Received}
            "sent" = ${Sent}
            "volume" = ${Volume}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MailStatsType<PSCustomObject>

.DESCRIPTION

Convert from JSON to MailStatsType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MailStatsType<PSCustomObject>
#>
function ConvertFrom-JsonToMailStatsType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MailStatsType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MailStatsType
        $AllProperties = ("time", "usage", "currency", "currencySymbol", "cost", "received", "sent", "volume")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time"))) { #optional property not found
            $Time = $null
        } else {
            $Time = $JsonParameters.PSobject.Properties["time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usage"))) { #optional property not found
            $Usage = $null
        } else {
            $Usage = $JsonParameters.PSobject.Properties["usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currency"))) { #optional property not found
            $Currency = $null
        } else {
            $Currency = $JsonParameters.PSobject.Properties["currency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencySymbol"))) { #optional property not found
            $CurrencySymbol = $null
        } else {
            $CurrencySymbol = $JsonParameters.PSobject.Properties["currencySymbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cost"))) { #optional property not found
            $Cost = $null
        } else {
            $Cost = $JsonParameters.PSobject.Properties["cost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "received"))) { #optional property not found
            $Received = $null
        } else {
            $Received = $JsonParameters.PSobject.Properties["received"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sent"))) { #optional property not found
            $Sent = $null
        } else {
            $Sent = $JsonParameters.PSobject.Properties["sent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume"))) { #optional property not found
            $Volume = $null
        } else {
            $Volume = $JsonParameters.PSobject.Properties["volume"].value
        }

        $PSO = [PSCustomObject]@{
            "time" = ${Time}
            "usage" = ${Usage}
            "currency" = ${Currency}
            "currencySymbol" = ${CurrencySymbol}
            "cost" = ${Cost}
            "received" = ${Received}
            "sent" = ${Sent}
            "volume" = ${Volume}
        }

        return $PSO
    }

}


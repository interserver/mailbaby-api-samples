/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BlockingApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 * Version: 1.1.0
* Generator version: 7.17.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license GNU GPLv3
 * https://www.gnu.org/licenses/gpl.txt
 */

goog.provide('API.Client.BlockingApi');

goog.require('API.Client.DenyRuleRecord');
goog.require('API.Client.ErrorMessage');
goog.require('API.Client.GenericResponse');
goog.require('API.Client.MailBlocks');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BlockingApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BlockingApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BlockingApiBasePath')) :
                   'https://api.mailbaby.net';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BlockingApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BlockingApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BlockingApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Creates a new email deny rule.
 * Adds a new email deny rule into the system to block new emails that match the given criteria
 * @param {!string} type The type of deny rule.
 * @param {!string} data The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
 * @param {!string=} opt_user Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GenericResponse>}
 */
API.Client.BlockingApi.prototype.addRule = function(type, data, opt_user, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/rules';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'type' is set
  if (!type) {
    throw new Error('Missing required parameter type when calling addRule');
  }
  // verify required parameter 'data' is set
  if (!data) {
    throw new Error('Missing required parameter data when calling addRule');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['user'] = opt_user;

  formParams['type'] = type;

  formParams['data'] = data;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Removes an deny mail rule.
 * Removes one of the configured deny mail rules from the system.
 * @param {!number} ruleId The ID of the Rules entry.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GenericResponse>}
 */
API.Client.BlockingApi.prototype.deleteRule = function(ruleId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/rules/{ruleId}'
      .replace('{' + 'ruleId' + '}', String(ruleId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'ruleId' is set
  if (!ruleId) {
    throw new Error('Missing required parameter ruleId when calling deleteRule');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Removes an email address from the blocked list
 * Removes an email address from the various block lists. 
 * @param {!string} body 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GenericResponse>}
 */
API.Client.BlockingApi.prototype.delistBlock = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/blocks/delete';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling delistBlock');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * displays a list of blocked email addresses
 * 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MailBlocks>}
 */
API.Client.BlockingApi.prototype.getMailBlocks = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/blocks';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Displays a listing of deny email rules.
 * Returns a listing of all the deny block rules you have configured.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.DenyRuleRecord>>}
 */
API.Client.BlockingApi.prototype.getRules = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/mail/rules';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

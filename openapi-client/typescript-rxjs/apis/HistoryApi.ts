// tslint:disable
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ErrorMessage,
    GetStats200ResponseInner,
    MailLog,
} from '../models';

export interface ViewMailLogRequest {
    id?: number;
    origin?: string;
    mx?: string;
    from?: string;
    to?: string;
    subject?: string;
    mailid?: string;
    skip?: number;
    limit?: number;
    startDate?: number;
    endDate?: number;
}

/**
 * no description
 */
export class HistoryApi extends BaseAPI {

    /**
     * Returns information about the usage on your mail accounts.
     * Account usage statistics.
     */
    getStats(): Observable<Array<GetStats200ResponseInner>>
    getStats(opts?: OperationOpts): Observable<AjaxResponse<Array<GetStats200ResponseInner>>>
    getStats(opts?: OperationOpts): Observable<Array<GetStats200ResponseInner> | AjaxResponse<Array<GetStats200ResponseInner>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        return this.request<Array<GetStats200ResponseInner>>({
            url: '/mail/stats',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a listing of the emails sent through this system 
     * displays the mail log
     */
    viewMailLog({ id, origin, mx, from, to, subject, mailid, skip, limit, startDate, endDate }: ViewMailLogRequest): Observable<MailLog>
    viewMailLog({ id, origin, mx, from, to, subject, mailid, skip, limit, startDate, endDate }: ViewMailLogRequest, opts?: OperationOpts): Observable<AjaxResponse<MailLog>>
    viewMailLog({ id, origin, mx, from, to, subject, mailid, skip, limit, startDate, endDate }: ViewMailLogRequest, opts?: OperationOpts): Observable<MailLog | AjaxResponse<MailLog>> {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-API-KEY': this.configuration.apiKey('X-API-KEY') }), // apiKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }
        if (origin != null) { query['origin'] = origin; }
        if (mx != null) { query['mx'] = mx; }
        if (from != null) { query['from'] = from; }
        if (to != null) { query['to'] = to; }
        if (subject != null) { query['subject'] = subject; }
        if (mailid != null) { query['mailid'] = mailid; }
        if (skip != null) { query['skip'] = skip; }
        if (limit != null) { query['limit'] = limit; }
        if (startDate != null) { query['startDate'] = startDate; }
        if (endDate != null) { query['endDate'] = endDate; }

        return this.request<MailLog>({
            url: '/mail/log',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

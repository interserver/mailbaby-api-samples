/* tslint:disable */
/* eslint-disable */
/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetMailOrders401Response,
  GetStats200ResponseInner,
  MailLog,
} from '../models/index';
import {
    GetMailOrders401ResponseFromJSON,
    GetMailOrders401ResponseToJSON,
    GetStats200ResponseInnerFromJSON,
    GetStats200ResponseInnerToJSON,
    MailLogFromJSON,
    MailLogToJSON,
} from '../models/index';

export interface ViewMailLogRequest {
    id?: number;
    origin?: string;
    mx?: string;
    from?: string;
    to?: string;
    subject?: string;
    mailid?: string;
    skip?: number;
    limit?: number;
    startDate?: number;
    endDate?: number;
}

/**
 * 
 */
export class HistoryApi extends runtime.BaseAPI {

    /**
     * displays a list of blocked email addresses
     */
    async getStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetStats200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetStats200ResponseInnerFromJSON));
    }

    /**
     * displays a list of blocked email addresses
     */
    async getStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetStats200ResponseInner>> {
        const response = await this.getStatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a listing of the emails sent through this system 
     * displays the mail log
     */
    async viewMailLogRaw(requestParameters: ViewMailLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailLog>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.origin !== undefined) {
            queryParameters['origin'] = requestParameters.origin;
        }

        if (requestParameters.mx !== undefined) {
            queryParameters['mx'] = requestParameters.mx;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.subject !== undefined) {
            queryParameters['subject'] = requestParameters.subject;
        }

        if (requestParameters.mailid !== undefined) {
            queryParameters['mailid'] = requestParameters.mailid;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/mail/log`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailLogFromJSON(jsonValue));
    }

    /**
     * Get a listing of the emails sent through this system 
     * displays the mail log
     */
    async viewMailLog(requestParameters: ViewMailLogRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailLog> {
        const response = await this.viewMailLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

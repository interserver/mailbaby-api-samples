/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMailLogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMailLogEntry::OAIMailLogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMailLogEntry::OAIMailLogEntry() {
    this->initializeModel();
}

OAIMailLogEntry::~OAIMailLogEntry() {}

void OAIMailLogEntry::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_transtype_isSet = false;
    m_transtype_isValid = false;

    m_transhost_isSet = false;
    m_transhost_isValid = false;

    m_originhost_isSet = false;
    m_originhost_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_sending_zone_isSet = false;
    m_sending_zone_isValid = false;

    m_body_size_isSet = false;
    m_body_size_isValid = false;

    m_source_md5_isSet = false;
    m_source_md5_isValid = false;

    m_seq_isSet = false;
    m_seq_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_lock_time_isSet = false;
    m_lock_time_isValid = false;

    m_assigned_isSet = false;
    m_assigned_isValid = false;

    m_queued_isSet = false;
    m_queued_isValid = false;

    m__lock_isSet = false;
    m__lock_isValid = false;

    m_logger_isSet = false;
    m_logger_isValid = false;

    m_mx_port_isSet = false;
    m_mx_port_isValid = false;

    m_connection_key_isSet = false;
    m_connection_key_isValid = false;

    m_mx_hostname_isSet = false;
    m_mx_hostname_isValid = false;

    m_sent_body_hash_isSet = false;
    m_sent_body_hash_isValid = false;

    m_sent_body_size_isSet = false;
    m_sent_body_size_isValid = false;

    m_md5_match_isSet = false;
    m_md5_match_isValid = false;
}

void OAIMailLogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMailLogEntry::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(_id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_transtype_isValid = ::OpenAPI::fromJsonValue(transtype, json[QString("transtype")]);
    m_transtype_isSet = !json[QString("transtype")].isNull() && m_transtype_isValid;

    m_transhost_isValid = ::OpenAPI::fromJsonValue(transhost, json[QString("transhost")]);
    m_transhost_isSet = !json[QString("transhost")].isNull() && m_transhost_isValid;

    m_originhost_isValid = ::OpenAPI::fromJsonValue(originhost, json[QString("originhost")]);
    m_originhost_isSet = !json[QString("originhost")].isNull() && m_originhost_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_sending_zone_isValid = ::OpenAPI::fromJsonValue(sending_zone, json[QString("sendingZone")]);
    m_sending_zone_isSet = !json[QString("sendingZone")].isNull() && m_sending_zone_isValid;

    m_body_size_isValid = ::OpenAPI::fromJsonValue(body_size, json[QString("bodySize")]);
    m_body_size_isSet = !json[QString("bodySize")].isNull() && m_body_size_isValid;

    m_source_md5_isValid = ::OpenAPI::fromJsonValue(source_md5, json[QString("sourceMd5")]);
    m_source_md5_isSet = !json[QString("sourceMd5")].isNull() && m_source_md5_isValid;

    m_seq_isValid = ::OpenAPI::fromJsonValue(seq, json[QString("seq")]);
    m_seq_isSet = !json[QString("seq")].isNull() && m_seq_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_lock_time_isValid = ::OpenAPI::fromJsonValue(lock_time, json[QString("lockTime")]);
    m_lock_time_isSet = !json[QString("lockTime")].isNull() && m_lock_time_isValid;

    m_assigned_isValid = ::OpenAPI::fromJsonValue(assigned, json[QString("assigned")]);
    m_assigned_isSet = !json[QString("assigned")].isNull() && m_assigned_isValid;

    m_queued_isValid = ::OpenAPI::fromJsonValue(queued, json[QString("queued")]);
    m_queued_isSet = !json[QString("queued")].isNull() && m_queued_isValid;

    m__lock_isValid = ::OpenAPI::fromJsonValue(_lock, json[QString("_lock")]);
    m__lock_isSet = !json[QString("_lock")].isNull() && m__lock_isValid;

    m_logger_isValid = ::OpenAPI::fromJsonValue(logger, json[QString("logger")]);
    m_logger_isSet = !json[QString("logger")].isNull() && m_logger_isValid;

    m_mx_port_isValid = ::OpenAPI::fromJsonValue(mx_port, json[QString("mxPort")]);
    m_mx_port_isSet = !json[QString("mxPort")].isNull() && m_mx_port_isValid;

    m_connection_key_isValid = ::OpenAPI::fromJsonValue(connection_key, json[QString("connectionKey")]);
    m_connection_key_isSet = !json[QString("connectionKey")].isNull() && m_connection_key_isValid;

    m_mx_hostname_isValid = ::OpenAPI::fromJsonValue(mx_hostname, json[QString("mxHostname")]);
    m_mx_hostname_isSet = !json[QString("mxHostname")].isNull() && m_mx_hostname_isValid;

    m_sent_body_hash_isValid = ::OpenAPI::fromJsonValue(sent_body_hash, json[QString("sentBodyHash")]);
    m_sent_body_hash_isSet = !json[QString("sentBodyHash")].isNull() && m_sent_body_hash_isValid;

    m_sent_body_size_isValid = ::OpenAPI::fromJsonValue(sent_body_size, json[QString("sentBodySize")]);
    m_sent_body_size_isSet = !json[QString("sentBodySize")].isNull() && m_sent_body_size_isValid;

    m_md5_match_isValid = ::OpenAPI::fromJsonValue(md5_match, json[QString("md5Match")]);
    m_md5_match_isSet = !json[QString("md5Match")].isNull() && m_md5_match_isValid;
}

QString OAIMailLogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMailLogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(from));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(to));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(subject));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(message_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(created));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(time));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(user));
    }
    if (m_transtype_isSet) {
        obj.insert(QString("transtype"), ::OpenAPI::toJsonValue(transtype));
    }
    if (m_transhost_isSet) {
        obj.insert(QString("transhost"), ::OpenAPI::toJsonValue(transhost));
    }
    if (m_originhost_isSet) {
        obj.insert(QString("originhost"), ::OpenAPI::toJsonValue(originhost));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(origin));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(interface));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(date));
    }
    if (m_sending_zone_isSet) {
        obj.insert(QString("sendingZone"), ::OpenAPI::toJsonValue(sending_zone));
    }
    if (m_body_size_isSet) {
        obj.insert(QString("bodySize"), ::OpenAPI::toJsonValue(body_size));
    }
    if (m_source_md5_isSet) {
        obj.insert(QString("sourceMd5"), ::OpenAPI::toJsonValue(source_md5));
    }
    if (m_seq_isSet) {
        obj.insert(QString("seq"), ::OpenAPI::toJsonValue(seq));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(domain));
    }
    if (m_recipient_isSet) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(recipient));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(locked));
    }
    if (m_lock_time_isSet) {
        obj.insert(QString("lockTime"), ::OpenAPI::toJsonValue(lock_time));
    }
    if (m_assigned_isSet) {
        obj.insert(QString("assigned"), ::OpenAPI::toJsonValue(assigned));
    }
    if (m_queued_isSet) {
        obj.insert(QString("queued"), ::OpenAPI::toJsonValue(queued));
    }
    if (m__lock_isSet) {
        obj.insert(QString("_lock"), ::OpenAPI::toJsonValue(_lock));
    }
    if (m_logger_isSet) {
        obj.insert(QString("logger"), ::OpenAPI::toJsonValue(logger));
    }
    if (m_mx_port_isSet) {
        obj.insert(QString("mxPort"), ::OpenAPI::toJsonValue(mx_port));
    }
    if (m_connection_key_isSet) {
        obj.insert(QString("connectionKey"), ::OpenAPI::toJsonValue(connection_key));
    }
    if (m_mx_hostname_isSet) {
        obj.insert(QString("mxHostname"), ::OpenAPI::toJsonValue(mx_hostname));
    }
    if (m_sent_body_hash_isSet) {
        obj.insert(QString("sentBodyHash"), ::OpenAPI::toJsonValue(sent_body_hash));
    }
    if (m_sent_body_size_isSet) {
        obj.insert(QString("sentBodySize"), ::OpenAPI::toJsonValue(sent_body_size));
    }
    if (m_md5_match_isSet) {
        obj.insert(QString("md5Match"), ::OpenAPI::toJsonValue(md5_match));
    }
    return obj;
}

qint32 OAIMailLogEntry::getId() const {
    return _id;
}
void OAIMailLogEntry::setId(const qint32 &_id) {
    this->_id = _id;
    this->m__id_isSet = true;
}

bool OAIMailLogEntry::is__id_Set() const{
    return m__id_isSet;
}

bool OAIMailLogEntry::is__id_Valid() const{
    return m__id_isValid;
}

QString OAIMailLogEntry::getId() const {
    return id;
}
void OAIMailLogEntry::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIMailLogEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMailLogEntry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMailLogEntry::getFrom() const {
    return from;
}
void OAIMailLogEntry::setFrom(const QString &from) {
    this->from = from;
    this->m_from_isSet = true;
}

bool OAIMailLogEntry::is_from_Set() const{
    return m_from_isSet;
}

bool OAIMailLogEntry::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIMailLogEntry::getTo() const {
    return to;
}
void OAIMailLogEntry::setTo(const QString &to) {
    this->to = to;
    this->m_to_isSet = true;
}

bool OAIMailLogEntry::is_to_Set() const{
    return m_to_isSet;
}

bool OAIMailLogEntry::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIMailLogEntry::getSubject() const {
    return subject;
}
void OAIMailLogEntry::setSubject(const QString &subject) {
    this->subject = subject;
    this->m_subject_isSet = true;
}

bool OAIMailLogEntry::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIMailLogEntry::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIMailLogEntry::getMessageId() const {
    return message_id;
}
void OAIMailLogEntry::setMessageId(const QString &message_id) {
    this->message_id = message_id;
    this->m_message_id_isSet = true;
}

bool OAIMailLogEntry::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIMailLogEntry::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIMailLogEntry::getCreated() const {
    return created;
}
void OAIMailLogEntry::setCreated(const QString &created) {
    this->created = created;
    this->m_created_isSet = true;
}

bool OAIMailLogEntry::is_created_Set() const{
    return m_created_isSet;
}

bool OAIMailLogEntry::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIMailLogEntry::getTime() const {
    return time;
}
void OAIMailLogEntry::setTime(const qint32 &time) {
    this->time = time;
    this->m_time_isSet = true;
}

bool OAIMailLogEntry::is_time_Set() const{
    return m_time_isSet;
}

bool OAIMailLogEntry::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIMailLogEntry::getUser() const {
    return user;
}
void OAIMailLogEntry::setUser(const QString &user) {
    this->user = user;
    this->m_user_isSet = true;
}

bool OAIMailLogEntry::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMailLogEntry::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIMailLogEntry::getTranstype() const {
    return transtype;
}
void OAIMailLogEntry::setTranstype(const QString &transtype) {
    this->transtype = transtype;
    this->m_transtype_isSet = true;
}

bool OAIMailLogEntry::is_transtype_Set() const{
    return m_transtype_isSet;
}

bool OAIMailLogEntry::is_transtype_Valid() const{
    return m_transtype_isValid;
}

QString OAIMailLogEntry::getTranshost() const {
    return transhost;
}
void OAIMailLogEntry::setTranshost(const QString &transhost) {
    this->transhost = transhost;
    this->m_transhost_isSet = true;
}

bool OAIMailLogEntry::is_transhost_Set() const{
    return m_transhost_isSet;
}

bool OAIMailLogEntry::is_transhost_Valid() const{
    return m_transhost_isValid;
}

QString OAIMailLogEntry::getOriginhost() const {
    return originhost;
}
void OAIMailLogEntry::setOriginhost(const QString &originhost) {
    this->originhost = originhost;
    this->m_originhost_isSet = true;
}

bool OAIMailLogEntry::is_originhost_Set() const{
    return m_originhost_isSet;
}

bool OAIMailLogEntry::is_originhost_Valid() const{
    return m_originhost_isValid;
}

QString OAIMailLogEntry::getOrigin() const {
    return origin;
}
void OAIMailLogEntry::setOrigin(const QString &origin) {
    this->origin = origin;
    this->m_origin_isSet = true;
}

bool OAIMailLogEntry::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIMailLogEntry::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIMailLogEntry::getInterface() const {
    return interface;
}
void OAIMailLogEntry::setInterface(const QString &interface) {
    this->interface = interface;
    this->m_interface_isSet = true;
}

bool OAIMailLogEntry::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIMailLogEntry::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIMailLogEntry::getDate() const {
    return date;
}
void OAIMailLogEntry::setDate(const QString &date) {
    this->date = date;
    this->m_date_isSet = true;
}

bool OAIMailLogEntry::is_date_Set() const{
    return m_date_isSet;
}

bool OAIMailLogEntry::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIMailLogEntry::getSendingZone() const {
    return sending_zone;
}
void OAIMailLogEntry::setSendingZone(const QString &sending_zone) {
    this->sending_zone = sending_zone;
    this->m_sending_zone_isSet = true;
}

bool OAIMailLogEntry::is_sending_zone_Set() const{
    return m_sending_zone_isSet;
}

bool OAIMailLogEntry::is_sending_zone_Valid() const{
    return m_sending_zone_isValid;
}

qint32 OAIMailLogEntry::getBodySize() const {
    return body_size;
}
void OAIMailLogEntry::setBodySize(const qint32 &body_size) {
    this->body_size = body_size;
    this->m_body_size_isSet = true;
}

bool OAIMailLogEntry::is_body_size_Set() const{
    return m_body_size_isSet;
}

bool OAIMailLogEntry::is_body_size_Valid() const{
    return m_body_size_isValid;
}

QString OAIMailLogEntry::getSourceMd5() const {
    return source_md5;
}
void OAIMailLogEntry::setSourceMd5(const QString &source_md5) {
    this->source_md5 = source_md5;
    this->m_source_md5_isSet = true;
}

bool OAIMailLogEntry::is_source_md5_Set() const{
    return m_source_md5_isSet;
}

bool OAIMailLogEntry::is_source_md5_Valid() const{
    return m_source_md5_isValid;
}

qint32 OAIMailLogEntry::getSeq() const {
    return seq;
}
void OAIMailLogEntry::setSeq(const qint32 &seq) {
    this->seq = seq;
    this->m_seq_isSet = true;
}

bool OAIMailLogEntry::is_seq_Set() const{
    return m_seq_isSet;
}

bool OAIMailLogEntry::is_seq_Valid() const{
    return m_seq_isValid;
}

QString OAIMailLogEntry::getDomain() const {
    return domain;
}
void OAIMailLogEntry::setDomain(const QString &domain) {
    this->domain = domain;
    this->m_domain_isSet = true;
}

bool OAIMailLogEntry::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIMailLogEntry::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIMailLogEntry::getRecipient() const {
    return recipient;
}
void OAIMailLogEntry::setRecipient(const QString &recipient) {
    this->recipient = recipient;
    this->m_recipient_isSet = true;
}

bool OAIMailLogEntry::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAIMailLogEntry::is_recipient_Valid() const{
    return m_recipient_isValid;
}

qint32 OAIMailLogEntry::getLocked() const {
    return locked;
}
void OAIMailLogEntry::setLocked(const qint32 &locked) {
    this->locked = locked;
    this->m_locked_isSet = true;
}

bool OAIMailLogEntry::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIMailLogEntry::is_locked_Valid() const{
    return m_locked_isValid;
}

qint32 OAIMailLogEntry::getLockTime() const {
    return lock_time;
}
void OAIMailLogEntry::setLockTime(const qint32 &lock_time) {
    this->lock_time = lock_time;
    this->m_lock_time_isSet = true;
}

bool OAIMailLogEntry::is_lock_time_Set() const{
    return m_lock_time_isSet;
}

bool OAIMailLogEntry::is_lock_time_Valid() const{
    return m_lock_time_isValid;
}

QString OAIMailLogEntry::getAssigned() const {
    return assigned;
}
void OAIMailLogEntry::setAssigned(const QString &assigned) {
    this->assigned = assigned;
    this->m_assigned_isSet = true;
}

bool OAIMailLogEntry::is_assigned_Set() const{
    return m_assigned_isSet;
}

bool OAIMailLogEntry::is_assigned_Valid() const{
    return m_assigned_isValid;
}

QString OAIMailLogEntry::getQueued() const {
    return queued;
}
void OAIMailLogEntry::setQueued(const QString &queued) {
    this->queued = queued;
    this->m_queued_isSet = true;
}

bool OAIMailLogEntry::is_queued_Set() const{
    return m_queued_isSet;
}

bool OAIMailLogEntry::is_queued_Valid() const{
    return m_queued_isValid;
}

QString OAIMailLogEntry::getLock() const {
    return _lock;
}
void OAIMailLogEntry::setLock(const QString &_lock) {
    this->_lock = _lock;
    this->m__lock_isSet = true;
}

bool OAIMailLogEntry::is__lock_Set() const{
    return m__lock_isSet;
}

bool OAIMailLogEntry::is__lock_Valid() const{
    return m__lock_isValid;
}

QString OAIMailLogEntry::getLogger() const {
    return logger;
}
void OAIMailLogEntry::setLogger(const QString &logger) {
    this->logger = logger;
    this->m_logger_isSet = true;
}

bool OAIMailLogEntry::is_logger_Set() const{
    return m_logger_isSet;
}

bool OAIMailLogEntry::is_logger_Valid() const{
    return m_logger_isValid;
}

qint32 OAIMailLogEntry::getMxPort() const {
    return mx_port;
}
void OAIMailLogEntry::setMxPort(const qint32 &mx_port) {
    this->mx_port = mx_port;
    this->m_mx_port_isSet = true;
}

bool OAIMailLogEntry::is_mx_port_Set() const{
    return m_mx_port_isSet;
}

bool OAIMailLogEntry::is_mx_port_Valid() const{
    return m_mx_port_isValid;
}

QString OAIMailLogEntry::getConnectionKey() const {
    return connection_key;
}
void OAIMailLogEntry::setConnectionKey(const QString &connection_key) {
    this->connection_key = connection_key;
    this->m_connection_key_isSet = true;
}

bool OAIMailLogEntry::is_connection_key_Set() const{
    return m_connection_key_isSet;
}

bool OAIMailLogEntry::is_connection_key_Valid() const{
    return m_connection_key_isValid;
}

QString OAIMailLogEntry::getMxHostname() const {
    return mx_hostname;
}
void OAIMailLogEntry::setMxHostname(const QString &mx_hostname) {
    this->mx_hostname = mx_hostname;
    this->m_mx_hostname_isSet = true;
}

bool OAIMailLogEntry::is_mx_hostname_Set() const{
    return m_mx_hostname_isSet;
}

bool OAIMailLogEntry::is_mx_hostname_Valid() const{
    return m_mx_hostname_isValid;
}

QString OAIMailLogEntry::getSentBodyHash() const {
    return sent_body_hash;
}
void OAIMailLogEntry::setSentBodyHash(const QString &sent_body_hash) {
    this->sent_body_hash = sent_body_hash;
    this->m_sent_body_hash_isSet = true;
}

bool OAIMailLogEntry::is_sent_body_hash_Set() const{
    return m_sent_body_hash_isSet;
}

bool OAIMailLogEntry::is_sent_body_hash_Valid() const{
    return m_sent_body_hash_isValid;
}

qint32 OAIMailLogEntry::getSentBodySize() const {
    return sent_body_size;
}
void OAIMailLogEntry::setSentBodySize(const qint32 &sent_body_size) {
    this->sent_body_size = sent_body_size;
    this->m_sent_body_size_isSet = true;
}

bool OAIMailLogEntry::is_sent_body_size_Set() const{
    return m_sent_body_size_isSet;
}

bool OAIMailLogEntry::is_sent_body_size_Valid() const{
    return m_sent_body_size_isValid;
}

qint32 OAIMailLogEntry::getMd5Match() const {
    return md5_match;
}
void OAIMailLogEntry::setMd5Match(const qint32 &md5_match) {
    this->md5_match = md5_match;
    this->m_md5_match_isSet = true;
}

bool OAIMailLogEntry::is_md5_match_Set() const{
    return m_md5_match_isSet;
}

bool OAIMailLogEntry::is_md5_match_Valid() const{
    return m_md5_match_isValid;
}

bool OAIMailLogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transhost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originhost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sending_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seq_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__lock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mx_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mx_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_body_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_body_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_match_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMailLogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__id_isValid && m_id_isValid && m_from_isValid && m_to_isValid && m_subject_isValid && m_message_id_isValid && m_created_isValid && m_time_isValid && m_user_isValid && m_transtype_isValid && m_transhost_isValid && m_originhost_isValid && m_origin_isValid && m_interface_isValid && m_date_isValid && m_sending_zone_isValid && m_body_size_isValid && m_source_md5_isValid && m_seq_isValid && m_domain_isValid && m_recipient_isValid && m_locked_isValid && m_lock_time_isValid && m_assigned_isValid && m_queued_isValid && m__lock_isValid && m_logger_isValid && m_mx_port_isValid && m_connection_key_isValid && m_mx_hostname_isValid && m_sent_body_hash_isValid && m_sent_body_size_isValid && m_md5_match_isValid && true;
}

} // namespace OpenAPI

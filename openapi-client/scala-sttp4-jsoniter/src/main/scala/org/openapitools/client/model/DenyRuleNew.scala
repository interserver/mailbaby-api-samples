/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.model

import com.github.plokhotnyuk.jsoniter_scala.macros.named

  /**
   * DenyRuleNew
   * The data for a email deny rule record.
   */
case class DenyRuleNew(
  /* The type of deny rule. */
  @named("type") `type`: DenyRuleNewEnums.Type,
  /* The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com. */
  @named("data") data: String,
  /* Mail account username that will be tied to this rule.  If not specified the first active mail order will be used. */
  @named("user") user: Option[String] = scala.None
)

object DenyRuleNewEnums:
  enum Type:
    case `domain`
    case `email`
    case `startswith`
    case `destination`

  object Type:
    import com.github.plokhotnyuk.jsoniter_scala.macros.*
    import com.github.plokhotnyuk.jsoniter_scala.core.*
    given typeCodec: JsonValueCodec[Type] = JsonCodecMaker.make {
      CodecMakerConfig
        .withAdtLeafClassNameMapper { x =>
          JsonCodecMaker.simpleClassName(x) match
            case "domain" => "domain"
            case "email" => "email"
            case "startswith" => "startswith"
            case "destination" => "destination"
        }
        .withDiscriminatorFieldName(scala.None)
    }
end DenyRuleNewEnums

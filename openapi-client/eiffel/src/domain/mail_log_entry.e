note
 description:"[
		MailBaby Email Delivery and Management Service API
 		**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  		The version of the OpenAPI document: 1.1.0
 	    Contact: support@interserver.net

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class MAIL_LOG_ENTRY




feature --Access

    var_id: INTEGER_32
      -- internal db id
    id: detachable STRING_32
      -- mail id
    var_from: detachable STRING_32
      -- from address
    to: detachable STRING_32
      -- to address
    subject: detachable STRING_32
      -- email subject
    message_id: detachable STRING_32
      -- message id
    created: detachable STRING_32
      -- creation date
    time: INTEGER_32
      -- creation timestamp
    user: detachable STRING_32
      -- user account
    transtype: detachable STRING_32
      -- transaction type
    origin: detachable STRING_32
      -- origin ip
    interface: detachable STRING_32
      -- interface name
    sending_zone: detachable STRING_32
      -- sending zone
    body_size: INTEGER_32
      -- email body size in bytes
    seq: INTEGER_32
      -- index of email in the to adderess list
    recipient: detachable STRING_32
      -- to address this email is being sent to
    domain: detachable STRING_32
      -- to address domain
    locked: INTEGER_32
      -- locked status
    lock_time: detachable STRING_32
      -- lock timestamp
    assigned: detachable STRING_32
      -- assigned server
    queued: detachable STRING_32
      -- queued timestamp
    mx_hostname: detachable STRING_32
      -- mx hostname
    response: detachable STRING_32
      -- mail delivery response

feature -- Change Element

    set_var_id (a_name: like var_id)
        -- Set 'var_id' with 'a_name'.
      do
        var_id := a_name
      ensure
        var_id_set: var_id = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_var_from (a_name: like var_from)
        -- Set 'var_from' with 'a_name'.
      do
        var_from := a_name
      ensure
        var_from_set: var_from = a_name
      end

    set_to (a_name: like to)
        -- Set 'to' with 'a_name'.
      do
        to := a_name
      ensure
        to_set: to = a_name
      end

    set_subject (a_name: like subject)
        -- Set 'subject' with 'a_name'.
      do
        subject := a_name
      ensure
        subject_set: subject = a_name
      end

    set_message_id (a_name: like message_id)
        -- Set 'message_id' with 'a_name'.
      do
        message_id := a_name
      ensure
        message_id_set: message_id = a_name
      end

    set_created (a_name: like created)
        -- Set 'created' with 'a_name'.
      do
        created := a_name
      ensure
        created_set: created = a_name
      end

    set_time (a_name: like time)
        -- Set 'time' with 'a_name'.
      do
        time := a_name
      ensure
        time_set: time = a_name
      end

    set_user (a_name: like user)
        -- Set 'user' with 'a_name'.
      do
        user := a_name
      ensure
        user_set: user = a_name
      end

    set_transtype (a_name: like transtype)
        -- Set 'transtype' with 'a_name'.
      do
        transtype := a_name
      ensure
        transtype_set: transtype = a_name
      end

    set_origin (a_name: like origin)
        -- Set 'origin' with 'a_name'.
      do
        origin := a_name
      ensure
        origin_set: origin = a_name
      end

    set_interface (a_name: like interface)
        -- Set 'interface' with 'a_name'.
      do
        interface := a_name
      ensure
        interface_set: interface = a_name
      end

    set_sending_zone (a_name: like sending_zone)
        -- Set 'sending_zone' with 'a_name'.
      do
        sending_zone := a_name
      ensure
        sending_zone_set: sending_zone = a_name
      end

    set_body_size (a_name: like body_size)
        -- Set 'body_size' with 'a_name'.
      do
        body_size := a_name
      ensure
        body_size_set: body_size = a_name
      end

    set_seq (a_name: like seq)
        -- Set 'seq' with 'a_name'.
      do
        seq := a_name
      ensure
        seq_set: seq = a_name
      end

    set_recipient (a_name: like recipient)
        -- Set 'recipient' with 'a_name'.
      do
        recipient := a_name
      ensure
        recipient_set: recipient = a_name
      end

    set_domain (a_name: like domain)
        -- Set 'domain' with 'a_name'.
      do
        domain := a_name
      ensure
        domain_set: domain = a_name
      end

    set_locked (a_name: like locked)
        -- Set 'locked' with 'a_name'.
      do
        locked := a_name
      ensure
        locked_set: locked = a_name
      end

    set_lock_time (a_name: like lock_time)
        -- Set 'lock_time' with 'a_name'.
      do
        lock_time := a_name
      ensure
        lock_time_set: lock_time = a_name
      end

    set_assigned (a_name: like assigned)
        -- Set 'assigned' with 'a_name'.
      do
        assigned := a_name
      ensure
        assigned_set: assigned = a_name
      end

    set_queued (a_name: like queued)
        -- Set 'queued' with 'a_name'.
      do
        queued := a_name
      ensure
        queued_set: queued = a_name
      end

    set_mx_hostname (a_name: like mx_hostname)
        -- Set 'mx_hostname' with 'a_name'.
      do
        mx_hostname := a_name
      ensure
        mx_hostname_set: mx_hostname = a_name
      end

    set_response (a_name: like response)
        -- Set 'response' with 'a_name'.
      do
        response := a_name
      ensure
        response_set: response = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MAIL_LOG_ENTRY%N")
        if attached var_id as l_var_id then
          Result.append ("%Nvar_id:")
          Result.append (l_var_id.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached var_from as l_var_from then
          Result.append ("%Nvar_from:")
          Result.append (l_var_from.out)
          Result.append ("%N")
        end
        if attached to as l_to then
          Result.append ("%Nto:")
          Result.append (l_to.out)
          Result.append ("%N")
        end
        if attached subject as l_subject then
          Result.append ("%Nsubject:")
          Result.append (l_subject.out)
          Result.append ("%N")
        end
        if attached message_id as l_message_id then
          Result.append ("%Nmessage_id:")
          Result.append (l_message_id.out)
          Result.append ("%N")
        end
        if attached created as l_created then
          Result.append ("%Ncreated:")
          Result.append (l_created.out)
          Result.append ("%N")
        end
        if attached time as l_time then
          Result.append ("%Ntime:")
          Result.append (l_time.out)
          Result.append ("%N")
        end
        if attached user as l_user then
          Result.append ("%Nuser:")
          Result.append (l_user.out)
          Result.append ("%N")
        end
        if attached transtype as l_transtype then
          Result.append ("%Ntranstype:")
          Result.append (l_transtype.out)
          Result.append ("%N")
        end
        if attached origin as l_origin then
          Result.append ("%Norigin:")
          Result.append (l_origin.out)
          Result.append ("%N")
        end
        if attached interface as l_interface then
          Result.append ("%Ninterface:")
          Result.append (l_interface.out)
          Result.append ("%N")
        end
        if attached sending_zone as l_sending_zone then
          Result.append ("%Nsending_zone:")
          Result.append (l_sending_zone.out)
          Result.append ("%N")
        end
        if attached body_size as l_body_size then
          Result.append ("%Nbody_size:")
          Result.append (l_body_size.out)
          Result.append ("%N")
        end
        if attached seq as l_seq then
          Result.append ("%Nseq:")
          Result.append (l_seq.out)
          Result.append ("%N")
        end
        if attached recipient as l_recipient then
          Result.append ("%Nrecipient:")
          Result.append (l_recipient.out)
          Result.append ("%N")
        end
        if attached domain as l_domain then
          Result.append ("%Ndomain:")
          Result.append (l_domain.out)
          Result.append ("%N")
        end
        if attached locked as l_locked then
          Result.append ("%Nlocked:")
          Result.append (l_locked.out)
          Result.append ("%N")
        end
        if attached lock_time as l_lock_time then
          Result.append ("%Nlock_time:")
          Result.append (l_lock_time.out)
          Result.append ("%N")
        end
        if attached assigned as l_assigned then
          Result.append ("%Nassigned:")
          Result.append (l_assigned.out)
          Result.append ("%N")
        end
        if attached queued as l_queued then
          Result.append ("%Nqueued:")
          Result.append (l_queued.out)
          Result.append ("%N")
        end
        if attached mx_hostname as l_mx_hostname then
          Result.append ("%Nmx_hostname:")
          Result.append (l_mx_hostname.out)
          Result.append ("%N")
        end
        if attached response as l_response then
          Result.append ("%Nresponse:")
          Result.append (l_response.out)
          Result.append ("%N")
        end
      end
end


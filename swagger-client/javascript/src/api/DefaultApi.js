/*
 * Mail Baby API
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.26-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GenericResponse} from '../model/GenericResponse';
import {InlineResponse401} from '../model/InlineResponse401';
import {MailAttachment} from '../model/MailAttachment';
import {MailContact} from '../model/MailContact';
import {MailLog} from '../model/MailLog';
import {MailOrder} from '../model/MailOrder';
import {MailOrders} from '../model/MailOrders';
import {SendMail} from '../model/SendMail';
import {SendMailAdv} from '../model/SendMailAdv';
import {SendMailAdvFrom} from '../model/SendMailAdvFrom';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getMailOrders operation.
     * @callback moduleapi/DefaultApi~getMailOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MailOrders{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays a list of mail service orders
     * @param {module:api/DefaultApi~getMailOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMailOrders(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = MailOrders;

      return this.apiClient.callApi(
        '/mail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pingServer operation.
     * @callback moduleapi/DefaultApi~pingServerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if the server is running
     * @param {module:api/DefaultApi~pingServerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pingServer(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the placeMailOrder operation.
     * @callback moduleapi/DefaultApi~placeMailOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * places a mail order
     * Adds an item to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/MailOrder} opts.body Inventory item to add
     * @param {module:api/DefaultApi~placeMailOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    placeMailOrder(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/mail/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendAdvMail operation.
     * @callback moduleapi/DefaultApi~sendAdvMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param {module:model/SendMailAdv} body 
     * @param {String} subject 
     * @param {String} body 
     * @param {Array.<module:model/SendMailAdvFrom>} from 
     * @param {Array.<module:model/MailContact>} to 
     * @param {Number} id 
     * @param {Array.<module:model/MailContact>} replyto 
     * @param {Array.<module:model/MailContact>} cc 
     * @param {Array.<module:model/MailContact>} bcc 
     * @param {Array.<module:model/MailAttachment>} attachments 
     * @param {module:api/DefaultApi~sendAdvMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendAdvMail(body, subject, body, from, to, id, replyto, cc, bcc, attachments, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendAdvMail");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling sendAdvMail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendAdvMail");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sendAdvMail");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendAdvMail");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendAdvMail");
      }
      // verify the required parameter 'replyto' is set
      if (replyto === undefined || replyto === null) {
        throw new Error("Missing the required parameter 'replyto' when calling sendAdvMail");
      }
      // verify the required parameter 'cc' is set
      if (cc === undefined || cc === null) {
        throw new Error("Missing the required parameter 'cc' when calling sendAdvMail");
      }
      // verify the required parameter 'bcc' is set
      if (bcc === undefined || bcc === null) {
        throw new Error("Missing the required parameter 'bcc' when calling sendAdvMail");
      }
      // verify the required parameter 'attachments' is set
      if (attachments === undefined || attachments === null) {
        throw new Error("Missing the required parameter 'attachments' when calling sendAdvMail");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'subject': subject,'body': body,'from': this.apiClient.buildCollectionParam(from, 'multi'),'to': this.apiClient.buildCollectionParam(to, 'multi'),'id': id,'replyto': this.apiClient.buildCollectionParam(replyto, 'multi'),'cc': this.apiClient.buildCollectionParam(cc, 'multi'),'bcc': this.apiClient.buildCollectionParam(bcc, 'multi'),'attachments': this.apiClient.buildCollectionParam(attachments, 'multi')
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;

      return this.apiClient.callApi(
        '/mail/advsend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendMail operation.
     * @callback moduleapi/DefaultApi~sendMailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an Email
     * Sends An email through one of your mail orders.
     * @param {String} to 
     * @param {String} from 
     * @param {String} subject 
     * @param {String} body 
     * @param {module:model/SendMail} body 
     * @param {module:api/DefaultApi~sendMailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendMail(to, from, subject, body, body, callback) {
      
      let postBody = body;
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling sendMail");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling sendMail");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling sendMail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendMail");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendMail");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'to': to,'from': from,'subject': subject,'body': body
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = ['application/x-www-form-urlencoded', 'application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;

      return this.apiClient.callApi(
        '/mail/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the validateMailOrder operation.
     * @callback moduleapi/DefaultApi~validateMailOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validatess order details before placing an order
     * @param {module:api/DefaultApi~validateMailOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validateMailOrder(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/mail/order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the viewMailLog operation.
     * @callback moduleapi/DefaultApi~viewMailLogCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MailLog>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id The ID of your mail order this will be sent through.
     * @param {String} opts.searchString pass an optional search string for looking up inventory
     * @param {Number} opts.skip number of records to skip for pagination
     * @param {Number} opts.limit maximum number of records to return
     * @param {module:api/DefaultApi~viewMailLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    viewMailLog(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'searchString': opts['searchString'],'skip': opts['skip'],'limit': opts['limit']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['apiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MailLog];

      return this.apiClient.callApi(
        '/mail/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
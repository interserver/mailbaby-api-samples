/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIDenyRuleNew.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIDenyRuleNew::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIDenyRuleNew::TypeEnum::Domain:
		return TEXT("domain");
	case OpenAPIDenyRuleNew::TypeEnum::Email:
		return TEXT("email");
	case OpenAPIDenyRuleNew::TypeEnum::Startswith:
		return TEXT("startswith");
	case OpenAPIDenyRuleNew::TypeEnum::Destination:
		return TEXT("destination");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIDenyRuleNew::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIDenyRuleNew::EnumToString(const OpenAPIDenyRuleNew::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIDenyRuleNew::TypeEnum& Value)
{
	static TMap<FString, OpenAPIDenyRuleNew::TypeEnum> StringToEnum = { 
		{ TEXT("domain"), OpenAPIDenyRuleNew::TypeEnum::Domain },
		{ TEXT("email"), OpenAPIDenyRuleNew::TypeEnum::Email },
		{ TEXT("startswith"), OpenAPIDenyRuleNew::TypeEnum::Startswith },
		{ TEXT("destination"), OpenAPIDenyRuleNew::TypeEnum::Destination }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIDenyRuleNew::EnumFromString(const FString& EnumAsString, OpenAPIDenyRuleNew::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIDenyRuleNew::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIDenyRuleNew::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIDenyRuleNew::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteIdentifierPrefix(TEXT("data")); WriteJsonValue(Writer, Data);
	if (User.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("user")); WriteJsonValue(Writer, User.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIDenyRuleNew::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("data"), Data);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("user"), User);

	return ParseSuccess;
}

}

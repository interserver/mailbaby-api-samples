/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISendingApi_H
#define OAI_OAISendingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmailAddressName.h"
#include "OAIGenericResponse.h"
#include "OAIGetMailOrders_401_response.h"
#include "OAIMailAttachment.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISendingApi : public QObject {
    Q_OBJECT

public:
    OAISendingApi(const int timeOut = 0);
    ~OAISendingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subject QString [required]
    * @param[in]  body QString [required]
    * @param[in]  from OAIEmailAddressName [required]
    * @param[in]  to QList<OAIEmailAddressName> [required]
    * @param[in]  replyto QList<OAIEmailAddressName> [optional]
    * @param[in]  cc QList<OAIEmailAddressName> [optional]
    * @param[in]  bcc QList<OAIEmailAddressName> [optional]
    * @param[in]  attachments QList<OAIMailAttachment> [optional]
    * @param[in]  id qint64 [optional]
    */
    void sendAdvMail(const QString &subject, const QString &body, const OAIEmailAddressName &from, const QList<OAIEmailAddressName> &to, const ::OpenAPI::OptionalParam<QList<OAIEmailAddressName>> &replyto = ::OpenAPI::OptionalParam<QList<OAIEmailAddressName>>(), const ::OpenAPI::OptionalParam<QList<OAIEmailAddressName>> &cc = ::OpenAPI::OptionalParam<QList<OAIEmailAddressName>>(), const ::OpenAPI::OptionalParam<QList<OAIEmailAddressName>> &bcc = ::OpenAPI::OptionalParam<QList<OAIEmailAddressName>>(), const ::OpenAPI::OptionalParam<QList<OAIMailAttachment>> &attachments = ::OpenAPI::OptionalParam<QList<OAIMailAttachment>>(), const ::OpenAPI::OptionalParam<qint64> &id = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  to QString [required]
    * @param[in]  from QString [required]
    * @param[in]  subject QString [required]
    * @param[in]  body QString [required]
    */
    void sendMail(const QString &to, const QString &from, const QString &subject, const QString &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sendAdvMailCallback(OAIHttpRequestWorker *worker);
    void sendMailCallback(OAIHttpRequestWorker *worker);

signals:

    void sendAdvMailSignal(OAIGenericResponse summary);
    void sendMailSignal(OAIGenericResponse summary);

    void sendAdvMailSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void sendMailSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);

    void sendAdvMailSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMailSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);

    void sendAdvMailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif

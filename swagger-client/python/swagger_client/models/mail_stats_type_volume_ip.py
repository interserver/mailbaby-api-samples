# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.   # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: support@interserver.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MailStatsTypeVolumeIp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_1_1_1_1': 'int',
        '_2_2_2_2': 'int',
        '_3_3_3_3': 'int',
        '_4_4_4_4': 'int'
    }

    attribute_map = {
        '_1_1_1_1': '1.1.1.1',
        '_2_2_2_2': '2.2.2.2',
        '_3_3_3_3': '3.3.3.3',
        '_4_4_4_4': '4.4.4.4'
    }

    def __init__(self, _1_1_1_1=None, _2_2_2_2=None, _3_3_3_3=None, _4_4_4_4=None):  # noqa: E501
        """MailStatsTypeVolumeIp - a model defined in Swagger"""  # noqa: E501
        self.__1_1_1_1 = None
        self.__2_2_2_2 = None
        self.__3_3_3_3 = None
        self.__4_4_4_4 = None
        self.discriminator = None
        if _1_1_1_1 is not None:
            self._1_1_1_1 = _1_1_1_1
        if _2_2_2_2 is not None:
            self._2_2_2_2 = _2_2_2_2
        if _3_3_3_3 is not None:
            self._3_3_3_3 = _3_3_3_3
        if _4_4_4_4 is not None:
            self._4_4_4_4 = _4_4_4_4

    @property
    def _1_1_1_1(self):
        """Gets the _1_1_1_1 of this MailStatsTypeVolumeIp.  # noqa: E501


        :return: The _1_1_1_1 of this MailStatsTypeVolumeIp.  # noqa: E501
        :rtype: int
        """
        return self.__1_1_1_1

    @_1_1_1_1.setter
    def _1_1_1_1(self, _1_1_1_1):
        """Sets the _1_1_1_1 of this MailStatsTypeVolumeIp.


        :param _1_1_1_1: The _1_1_1_1 of this MailStatsTypeVolumeIp.  # noqa: E501
        :type: int
        """

        self.__1_1_1_1 = _1_1_1_1

    @property
    def _2_2_2_2(self):
        """Gets the _2_2_2_2 of this MailStatsTypeVolumeIp.  # noqa: E501


        :return: The _2_2_2_2 of this MailStatsTypeVolumeIp.  # noqa: E501
        :rtype: int
        """
        return self.__2_2_2_2

    @_2_2_2_2.setter
    def _2_2_2_2(self, _2_2_2_2):
        """Sets the _2_2_2_2 of this MailStatsTypeVolumeIp.


        :param _2_2_2_2: The _2_2_2_2 of this MailStatsTypeVolumeIp.  # noqa: E501
        :type: int
        """

        self.__2_2_2_2 = _2_2_2_2

    @property
    def _3_3_3_3(self):
        """Gets the _3_3_3_3 of this MailStatsTypeVolumeIp.  # noqa: E501


        :return: The _3_3_3_3 of this MailStatsTypeVolumeIp.  # noqa: E501
        :rtype: int
        """
        return self.__3_3_3_3

    @_3_3_3_3.setter
    def _3_3_3_3(self, _3_3_3_3):
        """Sets the _3_3_3_3 of this MailStatsTypeVolumeIp.


        :param _3_3_3_3: The _3_3_3_3 of this MailStatsTypeVolumeIp.  # noqa: E501
        :type: int
        """

        self.__3_3_3_3 = _3_3_3_3

    @property
    def _4_4_4_4(self):
        """Gets the _4_4_4_4 of this MailStatsTypeVolumeIp.  # noqa: E501


        :return: The _4_4_4_4 of this MailStatsTypeVolumeIp.  # noqa: E501
        :rtype: int
        """
        return self.__4_4_4_4

    @_4_4_4_4.setter
    def _4_4_4_4(self, _4_4_4_4):
        """Sets the _4_4_4_4 of this MailStatsTypeVolumeIp.


        :param _4_4_4_4: The _4_4_4_4 of this MailStatsTypeVolumeIp.  # noqa: E501
        :type: int
        """

        self.__4_4_4_4 = _4_4_4_4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MailStatsTypeVolumeIp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MailStatsTypeVolumeIp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

/** MailBaby Email Delivery and Management Service API
  * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: support@interserver.net
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** Mail log records
  * @param total total number of mail log entries
  * @param skip number of emails skipped in listing
  * @param limit number of emails to return
  * @param emails 
  */
case class MailLog(
    total: Int,
    skip: Int,
    limit: Int,
    emails: Seq[MailLogEntry]
)
  
object MailLog {
  given encoderMailLog: Encoder[MailLog] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("total" -> t.total.asJson),
        Some("skip" -> t.skip.asJson),
        Some("limit" -> t.limit.asJson),
        Some("emails" -> t.emails.asJson)
      ).flatten
    }
  }
  given decoderMailLog: Decoder[MailLog] = Decoder.instance { c =>
    for {
      total <- c.downField("total").as[Int]
      skip <- c.downField("skip").as[Int]
      limit <- c.downField("limit").as[Int]
      emails <- c.downField("emails").as[Seq[MailLogEntry]]
    } yield MailLog(
      total = total,
      skip = skip,
      limit = limit,
      emails = emails
    )
  }
}


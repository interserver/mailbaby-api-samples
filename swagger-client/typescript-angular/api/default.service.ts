/**
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * OpenAPI spec version: 1.0.1
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { GenericResponse } from '../model/genericResponse';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse401 } from '../model/inlineResponse401';
import { MailLog } from '../model/mailLog';
import { SendMail } from '../model/sendMail';
import { SendMailAdv } from '../model/sendMailAdv';
import { SendMailAdvAttachments } from '../model/sendMailAdvAttachments';
import { SendMailAdvBcc } from '../model/sendMailAdvBcc';
import { SendMailAdvCc } from '../model/sendMailAdvCc';
import { SendMailAdvFrom } from '../model/sendMailAdvFrom';
import { SendMailAdvReplyto } from '../model/sendMailAdvReplyto';
import { SendMailAdvTo } from '../model/sendMailAdvTo';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://api.mailbaby.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * displays a list of mail service orders
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMailOrders(observe?: 'body', reportProgress?: boolean): Observable<Array<InlineResponse200>>;
    public getMailOrders(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InlineResponse200>>>;
    public getMailOrders(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InlineResponse200>>>;
    public getMailOrders(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<InlineResponse200>>('get',`${this.basePath}/mail`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Checks if the server is running
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingServer(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingServer(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingServer(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingServer(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendAdvMail(body: SendMailAdv, observe?: 'body', reportProgress?: boolean): Observable<GenericResponse>;
    public sendAdvMail(body: SendMailAdv, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponse>>;
    public sendAdvMail(body: SendMailAdv, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponse>>;
    public sendAdvMail(body: SendMailAdv, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sendAdvMail.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GenericResponse>('post',`${this.basePath}/mail/advsend`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param subject 
     * @param body 
     * @param from 
     * @param to 
     * @param replyto 
     * @param cc 
     * @param bcc 
     * @param attachments 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendAdvMailForm(subject: string, body: string, from: SendMailAdvFrom, to: Array<SendMailAdvTo>, replyto: Array<SendMailAdvReplyto>, cc: Array<SendMailAdvCc>, bcc: Array<SendMailAdvBcc>, attachments: Array<SendMailAdvAttachments>, id: number, observe?: 'body', reportProgress?: boolean): Observable<GenericResponse>;
    public sendAdvMailForm(subject: string, body: string, from: SendMailAdvFrom, to: Array<SendMailAdvTo>, replyto: Array<SendMailAdvReplyto>, cc: Array<SendMailAdvCc>, bcc: Array<SendMailAdvBcc>, attachments: Array<SendMailAdvAttachments>, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponse>>;
    public sendAdvMailForm(subject: string, body: string, from: SendMailAdvFrom, to: Array<SendMailAdvTo>, replyto: Array<SendMailAdvReplyto>, cc: Array<SendMailAdvCc>, bcc: Array<SendMailAdvBcc>, attachments: Array<SendMailAdvAttachments>, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponse>>;
    public sendAdvMailForm(subject: string, body: string, from: SendMailAdvFrom, to: Array<SendMailAdvTo>, replyto: Array<SendMailAdvReplyto>, cc: Array<SendMailAdvCc>, bcc: Array<SendMailAdvBcc>, attachments: Array<SendMailAdvAttachments>, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sendAdvMail.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sendAdvMail.');
        }

        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling sendAdvMail.');
        }

        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling sendAdvMail.');
        }

        if (replyto === null || replyto === undefined) {
            throw new Error('Required parameter replyto was null or undefined when calling sendAdvMail.');
        }

        if (cc === null || cc === undefined) {
            throw new Error('Required parameter cc was null or undefined when calling sendAdvMail.');
        }

        if (bcc === null || bcc === undefined) {
            throw new Error('Required parameter bcc was null or undefined when calling sendAdvMail.');
        }

        if (attachments === null || attachments === undefined) {
            throw new Error('Required parameter attachments was null or undefined when calling sendAdvMail.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling sendAdvMail.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (subject !== undefined) {
            formParams = formParams.append('subject', <any>subject) as any || formParams;
        }
        if (body !== undefined) {
            formParams = formParams.append('body', <any>body) as any || formParams;
        }
        if (from !== undefined) {
            formParams = formParams.append('from', <any>from) as any || formParams;
        }
        if (to) {
            to.forEach((element) => {
                formParams = formParams.append('to', <any>element) as any || formParams;
            })
        }
        if (replyto) {
            replyto.forEach((element) => {
                formParams = formParams.append('replyto', <any>element) as any || formParams;
            })
        }
        if (cc) {
            cc.forEach((element) => {
                formParams = formParams.append('cc', <any>element) as any || formParams;
            })
        }
        if (bcc) {
            bcc.forEach((element) => {
                formParams = formParams.append('bcc', <any>element) as any || formParams;
            })
        }
        if (attachments) {
            attachments.forEach((element) => {
                formParams = formParams.append('attachments', <any>element) as any || formParams;
            })
        }
        if (id !== undefined) {
            formParams = formParams.append('id', <any>id) as any || formParams;
        }

        return this.httpClient.request<GenericResponse>('post',`${this.basePath}/mail/advsend`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sends an Email
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * @param to 
     * @param from 
     * @param subject 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendMailForm(to: string, from: string, subject: string, body: string, observe?: 'body', reportProgress?: boolean): Observable<GenericResponse>;
    public sendMailForm(to: string, from: string, subject: string, body: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponse>>;
    public sendMailForm(to: string, from: string, subject: string, body: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponse>>;
    public sendMailForm(to: string, from: string, subject: string, body: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling sendMail.');
        }

        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling sendMail.');
        }

        if (subject === null || subject === undefined) {
            throw new Error('Required parameter subject was null or undefined when calling sendMail.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sendMail.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (to !== undefined) {
            formParams = formParams.append('to', <any>to) as any || formParams;
        }
        if (from !== undefined) {
            formParams = formParams.append('from', <any>from) as any || formParams;
        }
        if (subject !== undefined) {
            formParams = formParams.append('subject', <any>subject) as any || formParams;
        }
        if (body !== undefined) {
            formParams = formParams.append('body', <any>body) as any || formParams;
        }

        return this.httpClient.request<GenericResponse>('post',`${this.basePath}/mail/send`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sends an Email
     * Sends an email through one of your mail orders.  *Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead. 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendMail(body: SendMail, observe?: 'body', reportProgress?: boolean): Observable<GenericResponse>;
    public sendMail(body: SendMail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GenericResponse>>;
    public sendMail(body: SendMail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GenericResponse>>;
    public sendMail(body: SendMail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sendMail.');
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded',
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GenericResponse>('post',`${this.basePath}/mail/send`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for available inventory in the system 
     * @param id The ID of your mail order this will be sent through.
     * @param search pass an optional search string for looking up inventory
     * @param skip number of records to skip for pagination
     * @param limit maximum number of records to return
     * @param startDate earliest date to get emails in unix timestamp format
     * @param endDate earliest date to get emails in unix timestamp format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, observe?: 'body', reportProgress?: boolean): Observable<MailLog>;
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MailLog>>;
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MailLog>>;
    public viewMailLog(id?: number, search?: string, skip?: number, limit?: number, startDate?: number, endDate?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["X-API-KEY"]) {
            headers = headers.set('X-API-KEY', this.configuration.apiKeys["X-API-KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MailLog>('get',`${this.basePath}/mail/log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

/**
 * MailBaby Email Delivery and Management Service API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DenyRuleNew from './DenyRuleNew';

/**
 * The DenyRuleRecord model module.
 * @module model/DenyRuleRecord
 * @version 1.1.0
 */
class DenyRuleRecord {
    /**
     * Constructs a new <code>DenyRuleRecord</code>.
     * The data for a email deny rule record.
     * @alias module:model/DenyRuleRecord
     * @implements module:model/DenyRuleNew
     * @param type {module:model/DenyRuleRecord.TypeEnum} The type of deny rule.
     * @param data {String} The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
     * @param id {String} The deny rule Id number.
     * @param created {Date} the date the rule was created.
     */
    constructor(type, data, id, created) { 
        DenyRuleNew.initialize(this, type, data);
        DenyRuleRecord.initialize(this, type, data, id, created);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, data, id, created) { 
        obj['type'] = type;
        obj['data'] = data;
        obj['id'] = id;
        obj['created'] = created;
    }

    /**
     * Constructs a <code>DenyRuleRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DenyRuleRecord} obj Optional instance to populate.
     * @return {module:model/DenyRuleRecord} The populated <code>DenyRuleRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DenyRuleRecord();
            DenyRuleNew.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DenyRuleRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DenyRuleRecord</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DenyRuleRecord.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

DenyRuleRecord.RequiredProperties = ["type", "data", "id", "created"];

/**
 * The type of deny rule.
 * @member {module:model/DenyRuleRecord.TypeEnum} type
 */
DenyRuleRecord.prototype['type'] = undefined;

/**
 * The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
 * @member {String} data
 */
DenyRuleRecord.prototype['data'] = undefined;

/**
 * The deny rule Id number.
 * @member {String} id
 */
DenyRuleRecord.prototype['id'] = undefined;

/**
 * the date the rule was created.
 * @member {Date} created
 */
DenyRuleRecord.prototype['created'] = undefined;

/**
 * Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
 * @member {String} user
 */
DenyRuleRecord.prototype['user'] = undefined;


// Implement DenyRuleNew interface:
/**
 * The type of deny rule.
 * @member {module:model/DenyRuleNew.TypeEnum} type
 */
DenyRuleNew.prototype['type'] = undefined;
/**
 * The content of the rule.  If a domain type rule then an example would be google.com. For a begins with type an example would be msgid-.  For the email typer an example would be user@server.com.
 * @member {String} data
 */
DenyRuleNew.prototype['data'] = undefined;
/**
 * Mail account username that will be tied to this rule.  If not specified the first active mail order will be used.
 * @member {String} user
 */
DenyRuleNew.prototype['user'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DenyRuleRecord['TypeEnum'] = {

    /**
     * value: "domain"
     * @const
     */
    "domain": "domain",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "startswith"
     * @const
     */
    "startswith": "startswith",

    /**
     * value: "destination"
     * @const
     */
    "destination": "destination"
};



export default DenyRuleRecord;


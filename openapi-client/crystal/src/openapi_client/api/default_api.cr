# #Mail Baby API
#
##This is an API defintion for accesssing the Mail.Baby mail service.
#
#The version of the OpenAPI document: 1.0.0
#Contact: detain@interserver.net
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1-SNAPSHOT
#

require "uri"

module 
  class DefaultApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # displays a list of mail service orders
    # @return [Array(MailOrder)]
    def get_mail_orders(id : Int64?)
      data, _status_code, _headers = get_mail_orders_with_http_info(id)
      data
    end

    # displays a list of mail service orders
    # @return [Array<(Array(MailOrder), Integer, Hash)>] Array(MailOrder) data, response status code and response headers
    def get_mail_orders_with_http_info(id : Int64?)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.get_mail_orders ..."}
      end
      # resource path
      local_var_path = "/mail"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"id"] = id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/xml", "text/plain"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(MailOrder)"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.get_mail_orders",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#get_mail_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(MailOrder).from_json(data), status_code, headers
    end

    # Checks if the server is running
    # @return [nil]
    def ping_server()
      ping_server_with_http_info()
      nil
    end

    # Checks if the server is running
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def ping_server_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.ping_server ..."}
      end
      # resource path
      local_var_path = "/ping"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.ping_server",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#ping_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # places a mail order
    # Adds an item to the system
    # @return [nil]
    def place_mail_order(mail_order : MailOrder?)
      place_mail_order_with_http_info(mail_order)
      nil
    end

    # places a mail order
    # Adds an item to the system
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def place_mail_order_with_http_info(mail_order : MailOrder?)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.place_mail_order ..."}
      end
      # resource path
      local_var_path = "/mail/order"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = mail_order.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.place_mail_order",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#place_mail_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Sends an Email with Advanced Options
    # Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    # @param send_mail [SendMail] 
    # @return [GenericResponse]
    def send_adv_mail_by_id(send_mail : SendMail)
      data, _status_code, _headers = send_adv_mail_by_id_with_http_info(send_mail)
      data
    end

    # Sends an Email with Advanced Options
    # Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
    # @param send_mail [SendMail] 
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def send_adv_mail_by_id_with_http_info(send_mail : SendMail)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.send_adv_mail_by_id ..."}
      end
      # verify the required parameter "send_mail" is set
      if @api_client.config.client_side_validation && send_mail.nil?
        raise ArgumentError.new("Missing the required parameter 'send_mail' when calling DefaultApi.send_adv_mail_by_id")
      end
      # resource path
      local_var_path = "/mail/advsend"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_mail.to_json

      # return_type
      return_type = "GenericResponse"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.send_adv_mail_by_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#send_adv_mail_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenericResponse.from_json(data), status_code, headers
    end

    # Sends an Email
    # Sends An email through one of your mail orders.
    # @param subject [String] The Subject of the email
    # @param body [String] The contents of the email
    # @param from [String] The email address of who this email will be sent from.
    # @param to [String] The email address of who this email will be sent to.
    # @return [GenericResponse]
    def send_mail_by_id(subject : String, body : String, from : String, to : String, id : Int32?, to_name : String?, from_name : String?)
      data, _status_code, _headers = send_mail_by_id_with_http_info(subject, body, from, to, id, to_name, from_name)
      data
    end

    # Sends an Email
    # Sends An email through one of your mail orders.
    # @param subject [String] The Subject of the email
    # @param body [String] The contents of the email
    # @param from [String] The email address of who this email will be sent from.
    # @param to [String] The email address of who this email will be sent to.
    # @return [Array<(GenericResponse, Integer, Hash)>] GenericResponse data, response status code and response headers
    def send_mail_by_id_with_http_info(subject : String, body : String, from : String, to : String, id : Int32?, to_name : String?, from_name : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.send_mail_by_id ..."}
      end
      # verify the required parameter "subject" is set
      if @api_client.config.client_side_validation && subject.nil?
        raise ArgumentError.new("Missing the required parameter 'subject' when calling DefaultApi.send_mail_by_id")
      end
      # verify the required parameter "body" is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError.new("Missing the required parameter 'body' when calling DefaultApi.send_mail_by_id")
      end
      # verify the required parameter "from" is set
      if @api_client.config.client_side_validation && from.nil?
        raise ArgumentError.new("Missing the required parameter 'from' when calling DefaultApi.send_mail_by_id")
      end
      # verify the required parameter "to" is set
      if @api_client.config.client_side_validation && to.nil?
        raise ArgumentError.new("Missing the required parameter 'to' when calling DefaultApi.send_mail_by_id")
      end
      # resource path
      local_var_path = "/mail/send"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(Symbol, String).new
      form_params[:"subject"] = subject
      form_params[:"body"] = body
      form_params[:"from"] = from
      form_params[:"to"] = to
      form_params[:"id"] = id
      form_params[:"toName"] = to_name
      form_params[:"fromName"] = from_name

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GenericResponse"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DefaultApi.send_mail_by_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#send_mail_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenericResponse.from_json(data), status_code, headers
    end

    # validatess order details before placing an order
    # @return [nil]
    def validate_mail_order()
      validate_mail_order_with_http_info()
      nil
    end

    # validatess order details before placing an order
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def validate_mail_order_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.validate_mail_order ..."}
      end
      # resource path
      local_var_path = "/mail/order"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.validate_mail_order",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#validate_mail_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # displays the mail log
    # By passing in the appropriate options, you can search for available inventory in the system 
    # @return [Array(MailLog)]
    def view_mail_log_by_id(id : Int64?, search_string : String?, skip : Int32?, limit : Int32?)
      data, _status_code, _headers = view_mail_log_by_id_with_http_info(id, search_string, skip, limit)
      data
    end

    # displays the mail log
    # By passing in the appropriate options, you can search for available inventory in the system 
    # @return [Array<(Array(MailLog), Integer, Hash)>] Array(MailLog) data, response status code and response headers
    def view_mail_log_by_id_with_http_info(id : Int64?, search_string : String?, skip : Int32?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: DefaultApi.view_mail_log_by_id ..."}
      end
      if @api_client.config.client_side_validation && !skip.nil? && skip < 0
        raise ArgumentError.new("invalid value for \"skip\" when calling DefaultApi.view_mail_log_by_id, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 50
        raise ArgumentError.new("invalid value for \"limit\" when calling DefaultApi.view_mail_log_by_id, must be smaller than or equal to 50.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit < 0
        raise ArgumentError.new("invalid value for \"limit\" when calling DefaultApi.view_mail_log_by_id, must be greater than or equal to 0.")
      end

      # resource path
      local_var_path = "/mail/log"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"id"] = id
      query_params[:"searchString"] = search_string
      query_params[:"skip"] = skip
      query_params[:"limit"] = limit

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(MailLog)"

      # auth_names
      auth_names = ["apiKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DefaultApi.view_mail_log_by_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DefaultApi#view_mail_log_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(MailLog).from_json(data), status_code, headers
    end
  end
end

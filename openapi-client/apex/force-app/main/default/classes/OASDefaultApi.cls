/*
 * MailBaby Email Delivery API
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**\n\n\n# üìå Overview\n\nThis is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).\n\n\n# üîê Authentication\n\nIn order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  \n\nWe support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page.\n
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interserver.net
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASDefaultApi {
    OASClient client;

    public OASDefaultApi(OASClient client) {
        this.client = client;
    }

    public OASDefaultApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * displays a list of mail service orders
     * 
     * @return List<OASGetMailOrders200ResponseInner>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASGetMailOrders200ResponseInner> getMailOrders() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASGetMailOrders200ResponseInner>) client.invoke(
            'GET', '/mail', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'apiKeyAuth' },
            List<OASGetMailOrders200ResponseInner>.class
        );
    }
    /**
     * Checks if the server is running
     * 
     * @throws OAS.ApiException if fails to make API call
     */
    public void pingServer() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'GET', '/ping', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String>(),
            null
        );
    }
    /**
     * Sends an Email with Advanced Options
     * Sends An email through one of your mail orders allowing additional options such as file attachments, cc, bcc, etc.
     * @param oaSSendMailAdv  (required)
     * @return OASGenericResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGenericResponse sendAdvMail(Map<String, Object> params) {
        client.assertNotNull(params.get('oaSSendMailAdv'), 'oaSSendMailAdv');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGenericResponse) client.invoke(
            'POST', '/mail/advsend',
            (OASSendMailAdv) params.get('oaSSendMailAdv'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json', 'application/x-www-form-urlencoded' },
            new List<String> { 'apiKeyAuth' },
            OASGenericResponse.class
        );
    }
    /**
     * Sends an Email
     * Sends an email through one of your mail orders.\n\n*Note*: If you want to send to multiple recipients or use file attachments use the advsend (Advanced Send) call instead.\n
     * @param to The Contact whom is the primary recipient of this email. (required)
     * @param r_from The contact whom is the this email is from. (required)
     * @param subject The subject or title of the email (required)
     * @param body The main email contents. (required)
     * @return OASGenericResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGenericResponse sendMail(Map<String, Object> params) {
        client.assertNotNull(params.get('to'), 'to');
        client.assertNotNull(params.get('r_from'), 'r_from');
        client.assertNotNull(params.get('subject'), 'subject');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('to', (String) params.get('to')));
        form.addAll(client.makeParam('from', (String) params.get('r_from')));
        form.addAll(client.makeParam('subject', (String) params.get('subject')));
        form.addAll(client.makeParam('body', (String) params.get('body')));

        return (OASGenericResponse) client.invoke(
            'POST', '/mail/send', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded', 'application/json' },
            new List<String> { 'apiKeyAuth' },
            OASGenericResponse.class
        );
    }
    /**
     * displays the mail log
     * By passing in the appropriate options, you can search for\navailable inventory in the system\n
     * @param id The ID of your mail order this will be sent through. (optional)
     * @param search pass an optional search string for looking up inventory (optional)
     * @param skip number of records to skip for pagination (optional, default to 0)
     * @param r_limit maximum number of records to return (optional, default to 100)
     * @return OASMailLog
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMailLog viewMailLog(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('id', (Long) params.get('id')));
        query.addAll(client.makeParam('search', (String) params.get('search')));
        query.addAll(client.makeParam('skip', (Integer) params.get('skip')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMailLog) client.invoke(
            'GET', '/mail/log', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'apiKeyAuth' },
            OASMailLog.class
        );
    }
}

# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

    The version of the OpenAPI document: 1.1.0
    Contact: support@interserver.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from openapi_client.models.mail_block_click_house import MailBlockClickHouse
from openapi_client.models.mail_block_rspamd import MailBlockRspamd
from typing import Optional, Set
from typing_extensions import Self

class MailBlocks(BaseModel):
    """
    The listing of blocked emails.
    """ # noqa: E501
    local: List[MailBlockClickHouse]
    mbtrap: List[MailBlockClickHouse]
    subject: List[MailBlockRspamd]
    __properties: ClassVar[List[str]] = ["local", "mbtrap", "subject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MailBlocks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in local (list)
        _items = []
        if self.local:
            for _item_local in self.local:
                if _item_local:
                    _items.append(_item_local.to_dict())
            _dict['local'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mbtrap (list)
        _items = []
        if self.mbtrap:
            for _item_mbtrap in self.mbtrap:
                if _item_mbtrap:
                    _items.append(_item_mbtrap.to_dict())
            _dict['mbtrap'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subject (list)
        _items = []
        if self.subject:
            for _item_subject in self.subject:
                if _item_subject:
                    _items.append(_item_subject.to_dict())
            _dict['subject'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MailBlocks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "local": [MailBlockClickHouse.from_dict(_item) for _item in obj["local"]] if obj.get("local") is not None else None,
            "mbtrap": [MailBlockClickHouse.from_dict(_item) for _item in obj["mbtrap"]] if obj.get("mbtrap") is not None else None,
            "subject": [MailBlockRspamd.from_dict(_item) for _item in obj["subject"]] if obj.get("subject") is not None else None
        })
        return _obj



# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.email_address_types import EmailAddressTypes  # noqa: F401,E501
from swagger_server.models.email_addresses_types import EmailAddressesTypes  # noqa: F401,E501
from swagger_server.models.mail_attachment import MailAttachment  # noqa: F401,E501
from swagger_server import util


class SendMailAdv(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, subject: str=None, body: str=None, _from: EmailAddressTypes=None, to: EmailAddressesTypes=None, replyto: EmailAddressesTypes=None, cc: EmailAddressesTypes=None, bcc: EmailAddressesTypes=None, attachments: List[MailAttachment]=None, id: int=None):  # noqa: E501
        """SendMailAdv - a model defined in Swagger

        :param subject: The subject of this SendMailAdv.  # noqa: E501
        :type subject: str
        :param body: The body of this SendMailAdv.  # noqa: E501
        :type body: str
        :param _from: The _from of this SendMailAdv.  # noqa: E501
        :type _from: EmailAddressTypes
        :param to: The to of this SendMailAdv.  # noqa: E501
        :type to: EmailAddressesTypes
        :param replyto: The replyto of this SendMailAdv.  # noqa: E501
        :type replyto: EmailAddressesTypes
        :param cc: The cc of this SendMailAdv.  # noqa: E501
        :type cc: EmailAddressesTypes
        :param bcc: The bcc of this SendMailAdv.  # noqa: E501
        :type bcc: EmailAddressesTypes
        :param attachments: The attachments of this SendMailAdv.  # noqa: E501
        :type attachments: List[MailAttachment]
        :param id: The id of this SendMailAdv.  # noqa: E501
        :type id: int
        """
        self.swagger_types = {
            'subject': str,
            'body': str,
            '_from': EmailAddressTypes,
            'to': EmailAddressesTypes,
            'replyto': EmailAddressesTypes,
            'cc': EmailAddressesTypes,
            'bcc': EmailAddressesTypes,
            'attachments': List[MailAttachment],
            'id': int
        }

        self.attribute_map = {
            'subject': 'subject',
            'body': 'body',
            '_from': 'from',
            'to': 'to',
            'replyto': 'replyto',
            'cc': 'cc',
            'bcc': 'bcc',
            'attachments': 'attachments',
            'id': 'id'
        }
        self._subject = subject
        self._body = body
        self.__from = _from
        self._to = to
        self._replyto = replyto
        self._cc = cc
        self._bcc = bcc
        self._attachments = attachments
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'SendMailAdv':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SendMailAdv of this SendMailAdv.  # noqa: E501
        :rtype: SendMailAdv
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self) -> str:
        """Gets the subject of this SendMailAdv.

        The subject or title of the email  # noqa: E501

        :return: The subject of this SendMailAdv.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this SendMailAdv.

        The subject or title of the email  # noqa: E501

        :param subject: The subject of this SendMailAdv.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body(self) -> str:
        """Gets the body of this SendMailAdv.

        The main email contents.  # noqa: E501

        :return: The body of this SendMailAdv.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this SendMailAdv.

        The main email contents.  # noqa: E501

        :param body: The body of this SendMailAdv.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def _from(self) -> EmailAddressTypes:
        """Gets the _from of this SendMailAdv.


        :return: The _from of this SendMailAdv.
        :rtype: EmailAddressTypes
        """
        return self.__from

    @_from.setter
    def _from(self, _from: EmailAddressTypes):
        """Sets the _from of this SendMailAdv.


        :param _from: The _from of this SendMailAdv.
        :type _from: EmailAddressTypes
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> EmailAddressesTypes:
        """Gets the to of this SendMailAdv.


        :return: The to of this SendMailAdv.
        :rtype: EmailAddressesTypes
        """
        return self._to

    @to.setter
    def to(self, to: EmailAddressesTypes):
        """Sets the to of this SendMailAdv.


        :param to: The to of this SendMailAdv.
        :type to: EmailAddressesTypes
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def replyto(self) -> EmailAddressesTypes:
        """Gets the replyto of this SendMailAdv.


        :return: The replyto of this SendMailAdv.
        :rtype: EmailAddressesTypes
        """
        return self._replyto

    @replyto.setter
    def replyto(self, replyto: EmailAddressesTypes):
        """Sets the replyto of this SendMailAdv.


        :param replyto: The replyto of this SendMailAdv.
        :type replyto: EmailAddressesTypes
        """

        self._replyto = replyto

    @property
    def cc(self) -> EmailAddressesTypes:
        """Gets the cc of this SendMailAdv.


        :return: The cc of this SendMailAdv.
        :rtype: EmailAddressesTypes
        """
        return self._cc

    @cc.setter
    def cc(self, cc: EmailAddressesTypes):
        """Sets the cc of this SendMailAdv.


        :param cc: The cc of this SendMailAdv.
        :type cc: EmailAddressesTypes
        """

        self._cc = cc

    @property
    def bcc(self) -> EmailAddressesTypes:
        """Gets the bcc of this SendMailAdv.


        :return: The bcc of this SendMailAdv.
        :rtype: EmailAddressesTypes
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc: EmailAddressesTypes):
        """Sets the bcc of this SendMailAdv.


        :param bcc: The bcc of this SendMailAdv.
        :type bcc: EmailAddressesTypes
        """

        self._bcc = bcc

    @property
    def attachments(self) -> List[MailAttachment]:
        """Gets the attachments of this SendMailAdv.

        (optional) File attachments to include in the email.  The file contents must be base64 encoded!  # noqa: E501

        :return: The attachments of this SendMailAdv.
        :rtype: List[MailAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments: List[MailAttachment]):
        """Sets the attachments of this SendMailAdv.

        (optional) File attachments to include in the email.  The file contents must be base64 encoded!  # noqa: E501

        :param attachments: The attachments of this SendMailAdv.
        :type attachments: List[MailAttachment]
        """

        self._attachments = attachments

    @property
    def id(self) -> int:
        """Gets the id of this SendMailAdv.

        (optional)  ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :return: The id of this SendMailAdv.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this SendMailAdv.

        (optional)  ID of the Mail order within our system to use as the Mail Account.  # noqa: E501

        :param id: The id of this SendMailAdv.
        :type id: int
        """

        self._id = id

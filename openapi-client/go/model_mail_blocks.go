/*
MailBaby Email Delivery and Management Service API

**Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

API version: 1.1.0
Contact: support@interserver.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MailBlocks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailBlocks{}

// MailBlocks The listing of blocked emails.
type MailBlocks struct {
	Local []MailBlockClickHouse `json:"local"`
	Mbtrap []MailBlockClickHouse `json:"mbtrap"`
	Subject []MailBlockRspamd `json:"subject"`
}

type _MailBlocks MailBlocks

// NewMailBlocks instantiates a new MailBlocks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailBlocks(local []MailBlockClickHouse, mbtrap []MailBlockClickHouse, subject []MailBlockRspamd) *MailBlocks {
	this := MailBlocks{}
	this.Local = local
	this.Mbtrap = mbtrap
	this.Subject = subject
	return &this
}

// NewMailBlocksWithDefaults instantiates a new MailBlocks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailBlocksWithDefaults() *MailBlocks {
	this := MailBlocks{}
	return &this
}

// GetLocal returns the Local field value
func (o *MailBlocks) GetLocal() []MailBlockClickHouse {
	if o == nil {
		var ret []MailBlockClickHouse
		return ret
	}

	return o.Local
}

// GetLocalOk returns a tuple with the Local field value
// and a boolean to check if the value has been set.
func (o *MailBlocks) GetLocalOk() ([]MailBlockClickHouse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Local, true
}

// SetLocal sets field value
func (o *MailBlocks) SetLocal(v []MailBlockClickHouse) {
	o.Local = v
}

// GetMbtrap returns the Mbtrap field value
func (o *MailBlocks) GetMbtrap() []MailBlockClickHouse {
	if o == nil {
		var ret []MailBlockClickHouse
		return ret
	}

	return o.Mbtrap
}

// GetMbtrapOk returns a tuple with the Mbtrap field value
// and a boolean to check if the value has been set.
func (o *MailBlocks) GetMbtrapOk() ([]MailBlockClickHouse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mbtrap, true
}

// SetMbtrap sets field value
func (o *MailBlocks) SetMbtrap(v []MailBlockClickHouse) {
	o.Mbtrap = v
}

// GetSubject returns the Subject field value
func (o *MailBlocks) GetSubject() []MailBlockRspamd {
	if o == nil {
		var ret []MailBlockRspamd
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *MailBlocks) GetSubjectOk() ([]MailBlockRspamd, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject, true
}

// SetSubject sets field value
func (o *MailBlocks) SetSubject(v []MailBlockRspamd) {
	o.Subject = v
}

func (o MailBlocks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailBlocks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["local"] = o.Local
	toSerialize["mbtrap"] = o.Mbtrap
	toSerialize["subject"] = o.Subject
	return toSerialize, nil
}

func (o *MailBlocks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"local",
		"mbtrap",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMailBlocks := _MailBlocks{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMailBlocks)

	if err != nil {
		return err
	}

	*o = MailBlocks(varMailBlocks)

	return err
}

type NullableMailBlocks struct {
	value *MailBlocks
	isSet bool
}

func (v NullableMailBlocks) Get() *MailBlocks {
	return v.value
}

func (v *NullableMailBlocks) Set(val *MailBlocks) {
	v.value = val
	v.isSet = true
}

func (v NullableMailBlocks) IsSet() bool {
	return v.isSet
}

func (v *NullableMailBlocks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailBlocks(val *MailBlocks) *NullableMailBlocks {
	return &NullableMailBlocks{value: val, isSet: true}
}

func (v NullableMailBlocks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailBlocks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



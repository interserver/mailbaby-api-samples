/*
 * MailBaby Email Delivery API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.  We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details for an Email
    /// </summary>
    [DataContract(Name = "SendMailAdv")]
    public partial class SendMailAdv : IEquatable<SendMailAdv>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMailAdv" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SendMailAdv() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SendMailAdv" /> class.
        /// </summary>
        /// <param name="subject">The subject or title of the email (required).</param>
        /// <param name="body">The main email contents. (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="to">A list of destionation email addresses to send this to (required).</param>
        /// <param name="replyto">(optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address..</param>
        /// <param name="cc">(optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well..</param>
        /// <param name="bcc">(optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list..</param>
        /// <param name="attachments">(optional) File attachments to include in the email.  The file contents must be base64 encoded!.</param>
        /// <param name="id">(optional)  ID of the Mail order within our system to use as the Mail Account..</param>
        public SendMailAdv(string subject = default(string), string body = default(string), SendMailAdvFrom from = default(SendMailAdvFrom), List<SendMailAdvToInner> to = default(List<SendMailAdvToInner>), List<SendMailAdvReplytoInner> replyto = default(List<SendMailAdvReplytoInner>), List<SendMailAdvCcInner> cc = default(List<SendMailAdvCcInner>), List<SendMailAdvBccInner> bcc = default(List<SendMailAdvBccInner>), List<SendMailAdvAttachmentsInner> attachments = default(List<SendMailAdvAttachmentsInner>), long id = default(long))
        {
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for SendMailAdv and cannot be null");
            }
            this.Subject = subject;
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for SendMailAdv and cannot be null");
            }
            this.Body = body;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for SendMailAdv and cannot be null");
            }
            this.From = from;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for SendMailAdv and cannot be null");
            }
            this.To = to;
            this.Replyto = replyto;
            this.Cc = cc;
            this.Bcc = bcc;
            this.Attachments = attachments;
            this.Id = id;
        }

        /// <summary>
        /// The subject or title of the email
        /// </summary>
        /// <value>The subject or title of the email</value>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// The main email contents.
        /// </summary>
        /// <value>The main email contents.</value>
        [DataMember(Name = "body", IsRequired = true, EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        public SendMailAdvFrom From { get; set; }

        /// <summary>
        /// A list of destionation email addresses to send this to
        /// </summary>
        /// <value>A list of destionation email addresses to send this to</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        public List<SendMailAdvToInner> To { get; set; }

        /// <summary>
        /// (optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.
        /// </summary>
        /// <value>(optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.</value>
        [DataMember(Name = "replyto", EmitDefaultValue = false)]
        public List<SendMailAdvReplytoInner> Replyto { get; set; }

        /// <summary>
        /// (optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.
        /// </summary>
        /// <value>(optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.</value>
        [DataMember(Name = "cc", EmitDefaultValue = false)]
        public List<SendMailAdvCcInner> Cc { get; set; }

        /// <summary>
        /// (optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.
        /// </summary>
        /// <value>(optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.</value>
        [DataMember(Name = "bcc", EmitDefaultValue = false)]
        public List<SendMailAdvBccInner> Bcc { get; set; }

        /// <summary>
        /// (optional) File attachments to include in the email.  The file contents must be base64 encoded!
        /// </summary>
        /// <value>(optional) File attachments to include in the email.  The file contents must be base64 encoded!</value>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<SendMailAdvAttachmentsInner> Attachments { get; set; }

        /// <summary>
        /// (optional)  ID of the Mail order within our system to use as the Mail Account.
        /// </summary>
        /// <value>(optional)  ID of the Mail order within our system to use as the Mail Account.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SendMailAdv {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Replyto: ").Append(Replyto).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendMailAdv);
        }

        /// <summary>
        /// Returns true if SendMailAdv instances are equal
        /// </summary>
        /// <param name="input">Instance of SendMailAdv to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendMailAdv input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.Replyto == input.Replyto ||
                    this.Replyto != null &&
                    input.Replyto != null &&
                    this.Replyto.SequenceEqual(input.Replyto)
                ) && 
                (
                    this.Cc == input.Cc ||
                    this.Cc != null &&
                    input.Cc != null &&
                    this.Cc.SequenceEqual(input.Cc)
                ) && 
                (
                    this.Bcc == input.Bcc ||
                    this.Bcc != null &&
                    input.Bcc != null &&
                    this.Bcc.SequenceEqual(input.Bcc)
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Replyto != null)
                {
                    hashCode = (hashCode * 59) + this.Replyto.GetHashCode();
                }
                if (this.Cc != null)
                {
                    hashCode = (hashCode * 59) + this.Cc.GetHashCode();
                }
                if (this.Bcc != null)
                {
                    hashCode = (hashCode * 59) + this.Bcc.GetHashCode();
                }
                if (this.Attachments != null)
                {
                    hashCode = (hashCode * 59) + this.Attachments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

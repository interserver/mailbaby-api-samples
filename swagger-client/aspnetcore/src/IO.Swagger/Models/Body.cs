/*
 * Mail Baby API
 *
 * This is an API defintion for accesssing the Mail.Baby mail service.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: detain@interserver.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Body : IEquatable<Body>
    { 
        /// <summary>
        /// The Subject of the email
        /// </summary>
        /// <value>The Subject of the email</value>
        [Required]
        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// The contents of the email
        /// </summary>
        /// <value>The contents of the email</value>
        [Required]
        [DataMember(Name="body")]
        public string _Body { get; set; }

        /// <summary>
        /// The email address of who this email will be sent from.
        /// </summary>
        /// <value>The email address of who this email will be sent from.</value>
        [Required]
        [DataMember(Name="from")]
        public string From { get; set; }

        /// <summary>
        /// The email address of who this email will be sent to.
        /// </summary>
        /// <value>The email address of who this email will be sent to.</value>
        [Required]
        [DataMember(Name="to")]
        public string To { get; set; }

        /// <summary>
        /// The ID of your mail order this will be sent through.
        /// </summary>
        /// <value>The ID of your mail order this will be sent through.</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name or title of who this email is being sent to.
        /// </summary>
        /// <value>The name or title of who this email is being sent to.</value>
        [DataMember(Name="toName")]
        public string ToName { get; set; }

        /// <summary>
        /// The name or title of who this email is being sent from.
        /// </summary>
        /// <value>The name or title of who this email is being sent from.</value>
        [DataMember(Name="fromName")]
        public string FromName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  _Body: ").Append(_Body).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ToName: ").Append(ToName).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Body)obj);
        }

        /// <summary>
        /// Returns true if Body instances are equal
        /// </summary>
        /// <param name="other">Instance of Body to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    _Body == other._Body ||
                    _Body != null &&
                    _Body.Equals(other._Body)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    From.Equals(other.From)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ToName == other.ToName ||
                    ToName != null &&
                    ToName.Equals(other.ToName)
                ) && 
                (
                    FromName == other.FromName ||
                    FromName != null &&
                    FromName.Equals(other.FromName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (_Body != null)
                    hashCode = hashCode * 59 + _Body.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ToName != null)
                    hashCode = hashCode * 59 + ToName.GetHashCode();
                    if (FromName != null)
                    hashCode = hashCode * 59 + FromName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Body left, Body right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Body left, Body right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

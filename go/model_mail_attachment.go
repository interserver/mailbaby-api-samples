/*
 * Mail Baby API
 *
 * This is an API for accesssing the mail services.
 *
 * API version: 1.0.0
 * Contact: detain@interserver.net
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"os"
)

// MailAttachment A File attachment for an email
type MailAttachment struct {
	// Optional filename to specify for the attachment.
	Filename *string `json:"filename,omitempty"`
	// Contents of the attached file
	Data *os.File `json:"data"`
}

// NewMailAttachment instantiates a new MailAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailAttachment(data *os.File) *MailAttachment {
	this := MailAttachment{}
	this.Data = data
	return &this
}

// NewMailAttachmentWithDefaults instantiates a new MailAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailAttachmentWithDefaults() *MailAttachment {
	this := MailAttachment{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *MailAttachment) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailAttachment) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *MailAttachment) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *MailAttachment) SetFilename(v string) {
	o.Filename = &v
}

// GetData returns the Data field value
func (o *MailAttachment) GetData() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MailAttachment) GetDataOk() (**os.File, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MailAttachment) SetData(v *os.File) {
	o.Data = v
}

func (o MailAttachment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableMailAttachment struct {
	value *MailAttachment
	isSet bool
}

func (v NullableMailAttachment) Get() *MailAttachment {
	return v.value
}

func (v *NullableMailAttachment) Set(val *MailAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableMailAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableMailAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailAttachment(val *MailAttachment) *NullableMailAttachment {
	return &NullableMailAttachment{value: val, isSet: true}
}

func (v NullableMailAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



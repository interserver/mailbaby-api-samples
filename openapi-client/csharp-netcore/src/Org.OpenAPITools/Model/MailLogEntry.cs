/*
 * MailBaby Email Delivery API
 *
 * **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.**   # üìå Overview  This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net).   # üîê Authentication  In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site.    We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@interserver.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// An email record
    /// </summary>
    [DataContract(Name = "MailLogEntry")]
    public partial class MailLogEntry : IEquatable<MailLogEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailLogEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MailLogEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MailLogEntry" /> class.
        /// </summary>
        /// <param name="id">internal db id (required).</param>
        /// <param name="id">mail id (required).</param>
        /// <param name="from">from address (required).</param>
        /// <param name="to">to address (required).</param>
        /// <param name="subject">email subject (required).</param>
        /// <param name="messageId">message id (required).</param>
        /// <param name="created">creation date (required).</param>
        /// <param name="time">creation timestamp (required).</param>
        /// <param name="user">user account (required).</param>
        /// <param name="transtype">transaction type (required).</param>
        /// <param name="transhost">transaction host (required).</param>
        /// <param name="originhost">origin host (required).</param>
        /// <param name="origin">origin ip (required).</param>
        /// <param name="_interface">interface name (required).</param>
        /// <param name="date">date processed (required).</param>
        /// <param name="sendingZone">sending zone (required).</param>
        /// <param name="bodySize">email body size in bytes (required).</param>
        /// <param name="sourceMd5">md5 sum of the email (required).</param>
        /// <param name="seq">delivery sequency (required).</param>
        /// <param name="domain">to address domain (required).</param>
        /// <param name="recipient">email receiver address (required).</param>
        /// <param name="locked">locked status (required).</param>
        /// <param name="lockTime">lock timestamp (required).</param>
        /// <param name="assigned">assigned server (required).</param>
        /// <param name="queued">queued timestamp (required).</param>
        /// <param name="_lock">lock id (required).</param>
        /// <param name="logger">logger (required).</param>
        /// <param name="mxPort">mx port number (required).</param>
        /// <param name="connectionKey">connection key (required).</param>
        /// <param name="mxHostname">mx hostname (required).</param>
        /// <param name="sentBodyHash">body hash (required).</param>
        /// <param name="sentBodySize">sent body size in bytes (required).</param>
        /// <param name="md5Match">md5 checksum matching result (required).</param>
        public MailLogEntry(int id = default(int), string id = default(string), string from = default(string), string to = default(string), string subject = default(string), string messageId = default(string), string created = default(string), int time = default(int), string user = default(string), string transtype = default(string), string transhost = default(string), string originhost = default(string), string origin = default(string), string _interface = default(string), string date = default(string), string sendingZone = default(string), int bodySize = default(int), string sourceMd5 = default(string), int seq = default(int), string domain = default(string), string recipient = default(string), int locked = default(int), int lockTime = default(int), string assigned = default(string), string queued = default(string), string _lock = default(string), string logger = default(string), int mxPort = default(int), string connectionKey = default(string), string mxHostname = default(string), string sentBodyHash = default(string), int sentBodySize = default(int), int md5Match = default(int))
        {
            this.Id = id;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for MailLogEntry and cannot be null");
            }
            this.Id = id;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for MailLogEntry and cannot be null");
            }
            this.From = from;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for MailLogEntry and cannot be null");
            }
            this.To = to;
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for MailLogEntry and cannot be null");
            }
            this.Subject = subject;
            // to ensure "messageId" is required (not null)
            if (messageId == null)
            {
                throw new ArgumentNullException("messageId is a required property for MailLogEntry and cannot be null");
            }
            this.MessageId = messageId;
            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new ArgumentNullException("created is a required property for MailLogEntry and cannot be null");
            }
            this.Created = created;
            this.Time = time;
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new ArgumentNullException("user is a required property for MailLogEntry and cannot be null");
            }
            this.User = user;
            // to ensure "transtype" is required (not null)
            if (transtype == null)
            {
                throw new ArgumentNullException("transtype is a required property for MailLogEntry and cannot be null");
            }
            this.Transtype = transtype;
            // to ensure "transhost" is required (not null)
            if (transhost == null)
            {
                throw new ArgumentNullException("transhost is a required property for MailLogEntry and cannot be null");
            }
            this.Transhost = transhost;
            // to ensure "originhost" is required (not null)
            if (originhost == null)
            {
                throw new ArgumentNullException("originhost is a required property for MailLogEntry and cannot be null");
            }
            this.Originhost = originhost;
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for MailLogEntry and cannot be null");
            }
            this.Origin = origin;
            // to ensure "_interface" is required (not null)
            if (_interface == null)
            {
                throw new ArgumentNullException("_interface is a required property for MailLogEntry and cannot be null");
            }
            this.Interface = _interface;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for MailLogEntry and cannot be null");
            }
            this.Date = date;
            // to ensure "sendingZone" is required (not null)
            if (sendingZone == null)
            {
                throw new ArgumentNullException("sendingZone is a required property for MailLogEntry and cannot be null");
            }
            this.SendingZone = sendingZone;
            this.BodySize = bodySize;
            // to ensure "sourceMd5" is required (not null)
            if (sourceMd5 == null)
            {
                throw new ArgumentNullException("sourceMd5 is a required property for MailLogEntry and cannot be null");
            }
            this.SourceMd5 = sourceMd5;
            this.Seq = seq;
            // to ensure "domain" is required (not null)
            if (domain == null)
            {
                throw new ArgumentNullException("domain is a required property for MailLogEntry and cannot be null");
            }
            this.Domain = domain;
            // to ensure "recipient" is required (not null)
            if (recipient == null)
            {
                throw new ArgumentNullException("recipient is a required property for MailLogEntry and cannot be null");
            }
            this.Recipient = recipient;
            this.Locked = locked;
            this.LockTime = lockTime;
            // to ensure "assigned" is required (not null)
            if (assigned == null)
            {
                throw new ArgumentNullException("assigned is a required property for MailLogEntry and cannot be null");
            }
            this.Assigned = assigned;
            // to ensure "queued" is required (not null)
            if (queued == null)
            {
                throw new ArgumentNullException("queued is a required property for MailLogEntry and cannot be null");
            }
            this.Queued = queued;
            // to ensure "_lock" is required (not null)
            if (_lock == null)
            {
                throw new ArgumentNullException("_lock is a required property for MailLogEntry and cannot be null");
            }
            this.Lock = _lock;
            // to ensure "logger" is required (not null)
            if (logger == null)
            {
                throw new ArgumentNullException("logger is a required property for MailLogEntry and cannot be null");
            }
            this.Logger = logger;
            this.MxPort = mxPort;
            // to ensure "connectionKey" is required (not null)
            if (connectionKey == null)
            {
                throw new ArgumentNullException("connectionKey is a required property for MailLogEntry and cannot be null");
            }
            this.ConnectionKey = connectionKey;
            // to ensure "mxHostname" is required (not null)
            if (mxHostname == null)
            {
                throw new ArgumentNullException("mxHostname is a required property for MailLogEntry and cannot be null");
            }
            this.MxHostname = mxHostname;
            // to ensure "sentBodyHash" is required (not null)
            if (sentBodyHash == null)
            {
                throw new ArgumentNullException("sentBodyHash is a required property for MailLogEntry and cannot be null");
            }
            this.SentBodyHash = sentBodyHash;
            this.SentBodySize = sentBodySize;
            this.Md5Match = md5Match;
        }

        /// <summary>
        /// internal db id
        /// </summary>
        /// <value>internal db id</value>
        [DataMember(Name = "_id", IsRequired = true, EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// mail id
        /// </summary>
        /// <value>mail id</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// from address
        /// </summary>
        /// <value>from address</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = false)]
        public string From { get; set; }

        /// <summary>
        /// to address
        /// </summary>
        /// <value>to address</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// email subject
        /// </summary>
        /// <value>email subject</value>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// message id
        /// </summary>
        /// <value>message id</value>
        [DataMember(Name = "messageId", IsRequired = true, EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        /// creation date
        /// </summary>
        /// <value>creation date</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public string Created { get; set; }

        /// <summary>
        /// creation timestamp
        /// </summary>
        /// <value>creation timestamp</value>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = false)]
        public int Time { get; set; }

        /// <summary>
        /// user account
        /// </summary>
        /// <value>user account</value>
        [DataMember(Name = "user", IsRequired = true, EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        /// transaction type
        /// </summary>
        /// <value>transaction type</value>
        [DataMember(Name = "transtype", IsRequired = true, EmitDefaultValue = false)]
        public string Transtype { get; set; }

        /// <summary>
        /// transaction host
        /// </summary>
        /// <value>transaction host</value>
        [DataMember(Name = "transhost", IsRequired = true, EmitDefaultValue = false)]
        public string Transhost { get; set; }

        /// <summary>
        /// origin host
        /// </summary>
        /// <value>origin host</value>
        [DataMember(Name = "originhost", IsRequired = true, EmitDefaultValue = false)]
        public string Originhost { get; set; }

        /// <summary>
        /// origin ip
        /// </summary>
        /// <value>origin ip</value>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = false)]
        public string Origin { get; set; }

        /// <summary>
        /// interface name
        /// </summary>
        /// <value>interface name</value>
        [DataMember(Name = "interface", IsRequired = true, EmitDefaultValue = false)]
        public string Interface { get; set; }

        /// <summary>
        /// date processed
        /// </summary>
        /// <value>date processed</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// sending zone
        /// </summary>
        /// <value>sending zone</value>
        [DataMember(Name = "sendingZone", IsRequired = true, EmitDefaultValue = false)]
        public string SendingZone { get; set; }

        /// <summary>
        /// email body size in bytes
        /// </summary>
        /// <value>email body size in bytes</value>
        [DataMember(Name = "bodySize", IsRequired = true, EmitDefaultValue = false)]
        public int BodySize { get; set; }

        /// <summary>
        /// md5 sum of the email
        /// </summary>
        /// <value>md5 sum of the email</value>
        [DataMember(Name = "sourceMd5", IsRequired = true, EmitDefaultValue = false)]
        public string SourceMd5 { get; set; }

        /// <summary>
        /// delivery sequency
        /// </summary>
        /// <value>delivery sequency</value>
        [DataMember(Name = "seq", IsRequired = true, EmitDefaultValue = false)]
        public int Seq { get; set; }

        /// <summary>
        /// to address domain
        /// </summary>
        /// <value>to address domain</value>
        [DataMember(Name = "domain", IsRequired = true, EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// email receiver address
        /// </summary>
        /// <value>email receiver address</value>
        [DataMember(Name = "recipient", IsRequired = true, EmitDefaultValue = false)]
        public string Recipient { get; set; }

        /// <summary>
        /// locked status
        /// </summary>
        /// <value>locked status</value>
        [DataMember(Name = "locked", IsRequired = true, EmitDefaultValue = false)]
        public int Locked { get; set; }

        /// <summary>
        /// lock timestamp
        /// </summary>
        /// <value>lock timestamp</value>
        [DataMember(Name = "lockTime", IsRequired = true, EmitDefaultValue = false)]
        public int LockTime { get; set; }

        /// <summary>
        /// assigned server
        /// </summary>
        /// <value>assigned server</value>
        [DataMember(Name = "assigned", IsRequired = true, EmitDefaultValue = false)]
        public string Assigned { get; set; }

        /// <summary>
        /// queued timestamp
        /// </summary>
        /// <value>queued timestamp</value>
        [DataMember(Name = "queued", IsRequired = true, EmitDefaultValue = false)]
        public string Queued { get; set; }

        /// <summary>
        /// lock id
        /// </summary>
        /// <value>lock id</value>
        [DataMember(Name = "_lock", IsRequired = true, EmitDefaultValue = false)]
        public string Lock { get; set; }

        /// <summary>
        /// logger
        /// </summary>
        /// <value>logger</value>
        [DataMember(Name = "logger", IsRequired = true, EmitDefaultValue = false)]
        public string Logger { get; set; }

        /// <summary>
        /// mx port number
        /// </summary>
        /// <value>mx port number</value>
        [DataMember(Name = "mxPort", IsRequired = true, EmitDefaultValue = false)]
        public int MxPort { get; set; }

        /// <summary>
        /// connection key
        /// </summary>
        /// <value>connection key</value>
        [DataMember(Name = "connectionKey", IsRequired = true, EmitDefaultValue = false)]
        public string ConnectionKey { get; set; }

        /// <summary>
        /// mx hostname
        /// </summary>
        /// <value>mx hostname</value>
        [DataMember(Name = "mxHostname", IsRequired = true, EmitDefaultValue = false)]
        public string MxHostname { get; set; }

        /// <summary>
        /// body hash
        /// </summary>
        /// <value>body hash</value>
        [DataMember(Name = "sentBodyHash", IsRequired = true, EmitDefaultValue = false)]
        public string SentBodyHash { get; set; }

        /// <summary>
        /// sent body size in bytes
        /// </summary>
        /// <value>sent body size in bytes</value>
        [DataMember(Name = "sentBodySize", IsRequired = true, EmitDefaultValue = false)]
        public int SentBodySize { get; set; }

        /// <summary>
        /// md5 checksum matching result
        /// </summary>
        /// <value>md5 checksum matching result</value>
        [DataMember(Name = "md5Match", IsRequired = true, EmitDefaultValue = false)]
        public int Md5Match { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MailLogEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Transtype: ").Append(Transtype).Append("\n");
            sb.Append("  Transhost: ").Append(Transhost).Append("\n");
            sb.Append("  Originhost: ").Append(Originhost).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Interface: ").Append(Interface).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SendingZone: ").Append(SendingZone).Append("\n");
            sb.Append("  BodySize: ").Append(BodySize).Append("\n");
            sb.Append("  SourceMd5: ").Append(SourceMd5).Append("\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  LockTime: ").Append(LockTime).Append("\n");
            sb.Append("  Assigned: ").Append(Assigned).Append("\n");
            sb.Append("  Queued: ").Append(Queued).Append("\n");
            sb.Append("  Lock: ").Append(Lock).Append("\n");
            sb.Append("  Logger: ").Append(Logger).Append("\n");
            sb.Append("  MxPort: ").Append(MxPort).Append("\n");
            sb.Append("  ConnectionKey: ").Append(ConnectionKey).Append("\n");
            sb.Append("  MxHostname: ").Append(MxHostname).Append("\n");
            sb.Append("  SentBodyHash: ").Append(SentBodyHash).Append("\n");
            sb.Append("  SentBodySize: ").Append(SentBodySize).Append("\n");
            sb.Append("  Md5Match: ").Append(Md5Match).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MailLogEntry);
        }

        /// <summary>
        /// Returns true if MailLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of MailLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailLogEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Transtype == input.Transtype ||
                    (this.Transtype != null &&
                    this.Transtype.Equals(input.Transtype))
                ) && 
                (
                    this.Transhost == input.Transhost ||
                    (this.Transhost != null &&
                    this.Transhost.Equals(input.Transhost))
                ) && 
                (
                    this.Originhost == input.Originhost ||
                    (this.Originhost != null &&
                    this.Originhost.Equals(input.Originhost))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Interface == input.Interface ||
                    (this.Interface != null &&
                    this.Interface.Equals(input.Interface))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SendingZone == input.SendingZone ||
                    (this.SendingZone != null &&
                    this.SendingZone.Equals(input.SendingZone))
                ) && 
                (
                    this.BodySize == input.BodySize ||
                    this.BodySize.Equals(input.BodySize)
                ) && 
                (
                    this.SourceMd5 == input.SourceMd5 ||
                    (this.SourceMd5 != null &&
                    this.SourceMd5.Equals(input.SourceMd5))
                ) && 
                (
                    this.Seq == input.Seq ||
                    this.Seq.Equals(input.Seq)
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Locked == input.Locked ||
                    this.Locked.Equals(input.Locked)
                ) && 
                (
                    this.LockTime == input.LockTime ||
                    this.LockTime.Equals(input.LockTime)
                ) && 
                (
                    this.Assigned == input.Assigned ||
                    (this.Assigned != null &&
                    this.Assigned.Equals(input.Assigned))
                ) && 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.Lock == input.Lock ||
                    (this.Lock != null &&
                    this.Lock.Equals(input.Lock))
                ) && 
                (
                    this.Logger == input.Logger ||
                    (this.Logger != null &&
                    this.Logger.Equals(input.Logger))
                ) && 
                (
                    this.MxPort == input.MxPort ||
                    this.MxPort.Equals(input.MxPort)
                ) && 
                (
                    this.ConnectionKey == input.ConnectionKey ||
                    (this.ConnectionKey != null &&
                    this.ConnectionKey.Equals(input.ConnectionKey))
                ) && 
                (
                    this.MxHostname == input.MxHostname ||
                    (this.MxHostname != null &&
                    this.MxHostname.Equals(input.MxHostname))
                ) && 
                (
                    this.SentBodyHash == input.SentBodyHash ||
                    (this.SentBodyHash != null &&
                    this.SentBodyHash.Equals(input.SentBodyHash))
                ) && 
                (
                    this.SentBodySize == input.SentBodySize ||
                    this.SentBodySize.Equals(input.SentBodySize)
                ) && 
                (
                    this.Md5Match == input.Md5Match ||
                    this.Md5Match.Equals(input.Md5Match)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.MessageId != null)
                {
                    hashCode = (hashCode * 59) + this.MessageId.GetHashCode();
                }
                if (this.Created != null)
                {
                    hashCode = (hashCode * 59) + this.Created.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                if (this.User != null)
                {
                    hashCode = (hashCode * 59) + this.User.GetHashCode();
                }
                if (this.Transtype != null)
                {
                    hashCode = (hashCode * 59) + this.Transtype.GetHashCode();
                }
                if (this.Transhost != null)
                {
                    hashCode = (hashCode * 59) + this.Transhost.GetHashCode();
                }
                if (this.Originhost != null)
                {
                    hashCode = (hashCode * 59) + this.Originhost.GetHashCode();
                }
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.Interface != null)
                {
                    hashCode = (hashCode * 59) + this.Interface.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.SendingZone != null)
                {
                    hashCode = (hashCode * 59) + this.SendingZone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BodySize.GetHashCode();
                if (this.SourceMd5 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceMd5.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Seq.GetHashCode();
                if (this.Domain != null)
                {
                    hashCode = (hashCode * 59) + this.Domain.GetHashCode();
                }
                if (this.Recipient != null)
                {
                    hashCode = (hashCode * 59) + this.Recipient.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Locked.GetHashCode();
                hashCode = (hashCode * 59) + this.LockTime.GetHashCode();
                if (this.Assigned != null)
                {
                    hashCode = (hashCode * 59) + this.Assigned.GetHashCode();
                }
                if (this.Queued != null)
                {
                    hashCode = (hashCode * 59) + this.Queued.GetHashCode();
                }
                if (this.Lock != null)
                {
                    hashCode = (hashCode * 59) + this.Lock.GetHashCode();
                }
                if (this.Logger != null)
                {
                    hashCode = (hashCode * 59) + this.Logger.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MxPort.GetHashCode();
                if (this.ConnectionKey != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionKey.GetHashCode();
                }
                if (this.MxHostname != null)
                {
                    hashCode = (hashCode * 59) + this.MxHostname.GetHashCode();
                }
                if (this.SentBodyHash != null)
                {
                    hashCode = (hashCode * 59) + this.SentBodyHash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SentBodySize.GetHashCode();
                hashCode = (hashCode * 59) + this.Md5Match.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

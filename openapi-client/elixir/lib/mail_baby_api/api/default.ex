# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule MailBabyAPI.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias MailBabyAPI.Connection
  import MailBabyAPI.RequestBuilder


  @doc """
  Gets mail order information by id
  returns information about a mail order in the system with the given id.

  ## Parameters

  - connection (MailBabyAPI.Connection): Connection to server
  - id (integer()): User ID
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, MailBabyAPI.Model.MailOrder.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_mail_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, MailBabyAPI.Model.MailOrder.t} | {:error, Tesla.Env.t}
  def get_mail_by_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mail/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MailBabyAPI.Model.MailOrder{}}
    ])
  end

  @doc """
  displays a list of mail service orders

  ## Parameters

  - connection (MailBabyAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%MailOrder{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_mail_orders(Tesla.Env.client, keyword()) :: {:ok, list(MailBabyAPI.Model.MailOrder.t)} | {:ok, MailBabyAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def get_mail_orders(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mail")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%MailBabyAPI.Model.MailOrder{}]},
      { 401, %MailBabyAPI.Model.Error{}}
    ])
  end

  @doc """
  Checks if the server is running

  ## Parameters

  - connection (MailBabyAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec ping_server(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def ping_server(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/ping")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { :default, false}
    ])
  end

  @doc """
  places a mail order
  Adds an item to the system

  ## Parameters

  - connection (MailBabyAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (MailOrder): Inventory item to add
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec place_mail_order(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MailBabyAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def place_mail_order(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/mail/order")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false},
      { 409, false},
      { 401, %MailBabyAPI.Model.Error{}}
    ])
  end

  @doc """
  Sends an Email
  Sends An email through one of your mail orders.

  ## Parameters

  - connection (MailBabyAPI.Connection): Connection to server
  - id (integer()): User ID
  - opts (KeywordList): [optional] Optional parameters
    - :subject (String.t): 
    - :body (String.t): 
    - :to (String.t): 
    - :from (String.t): 
  ## Returns

  {:ok, MailBabyAPI.Model.GenericResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec send_mail_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, MailBabyAPI.Model.GenericResponse.t} | {:ok, MailBabyAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def send_mail_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"subject" => :query,
      :"body" => :query,
      :"to" => :query,
      :"from" => :query
    }
    %{}
    |> method(:post)
    |> url("/mail/#{id}/send")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %MailBabyAPI.Model.GenericResponse{}},
      { 400, false},
      { 401, %MailBabyAPI.Model.Error{}},
      { 404, %MailBabyAPI.Model.Error{}}
    ])
  end

  @doc """
  validatess order details before placing an order

  ## Parameters

  - connection (MailBabyAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec validate_mail_order(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MailBabyAPI.Model.Error.t} | {:error, Tesla.Env.t}
  def validate_mail_order(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/mail/order")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, %MailBabyAPI.Model.Error{}}
    ])
  end

  @doc """
  displays the mail log
  By passing in the appropriate options, you can search for available inventory in the system 

  ## Parameters

  - connection (MailBabyAPI.Connection): Connection to server
  - id (integer()): User ID
  - opts (KeywordList): [optional] Optional parameters
    - :search_string (String.t): pass an optional search string for looking up inventory
    - :skip (integer()): number of records to skip for pagination
    - :limit (integer()): maximum number of records to return
  ## Returns

  {:ok, [%MailLog{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec view_mail_log_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, list(MailBabyAPI.Model.MailLog.t)} | {:ok, nil} | {:error, Tesla.Env.t}
  def view_mail_log_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :"searchString" => :query,
      :"skip" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/mail/#{id}/log")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%MailBabyAPI.Model.MailLog{}]},
      { 400, false}
    ])
  end
end

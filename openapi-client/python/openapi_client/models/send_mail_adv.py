# coding: utf-8

"""
    MailBaby Email Delivery and Management Service API

    **Send emails fast and with confidence through our easy to use [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API interface.** # Overview This is the API interface to the [Mail Baby](https//mail.baby/) Mail services provided by [InterServer](https://www.interserver.net). To use this service you must have an account with us at [my.interserver.net](https://my.interserver.net). # Authentication In order to use most of the API calls you must pass credentials from the [my.interserver.net](https://my.interserver.net/) site. We support several different authentication methods but the preferred method is to use the **API Key** which you can get from the [Account Security](https://my.interserver.net/account_security) page. 

    The version of the OpenAPI document: 1.1.0
    Contact: support@interserver.net
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.email_address_name import EmailAddressName
from openapi_client.models.mail_attachment import MailAttachment

class SendMailAdv(BaseModel):
    """
    Details for an Email
    """
    subject: StrictStr = Field(..., description="The subject or title of the email")
    body: StrictStr = Field(..., description="The main email contents.")
    var_from: EmailAddressName = Field(..., alias="from")
    to: conlist(EmailAddressName) = Field(..., description="A list of destionation email addresses to send this to")
    replyto: Optional[conlist(EmailAddressName)] = Field(None, description="(optional) A list of email addresses that specify where replies to the email should be sent instead of the _from_ address.")
    cc: Optional[conlist(EmailAddressName)] = Field(None, description="(optional) A list of email addresses to carbon copy this message to.  They are listed on the email and anyone getting the email can see this full list of Contacts who received the email as well.")
    bcc: Optional[conlist(EmailAddressName)] = Field(None, description="(optional) list of email addresses that should receive copies of the email.  They are hidden on the email and anyone gettitng the email would not see the other people getting the email in this list.")
    attachments: Optional[conlist(MailAttachment)] = Field(None, description="(optional) File attachments to include in the email.  The file contents must be base64 encoded!")
    id: Optional[StrictInt] = Field(None, description="(optional)  ID of the Mail order within our system to use as the Mail Account.")
    __properties = ["subject", "body", "from", "to", "replyto", "cc", "bcc", "attachments", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SendMailAdv:
        """Create an instance of SendMailAdv from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in to (list)
        _items = []
        if self.to:
            for _item in self.to:
                if _item:
                    _items.append(_item.to_dict())
            _dict['to'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in replyto (list)
        _items = []
        if self.replyto:
            for _item in self.replyto:
                if _item:
                    _items.append(_item.to_dict())
            _dict['replyto'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cc (list)
        _items = []
        if self.cc:
            for _item in self.cc:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bcc (list)
        _items = []
        if self.bcc:
            for _item in self.bcc:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bcc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SendMailAdv:
        """Create an instance of SendMailAdv from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SendMailAdv.parse_obj(obj)

        _obj = SendMailAdv.parse_obj({
            "subject": obj.get("subject"),
            "body": obj.get("body"),
            "var_from": EmailAddressName.from_dict(obj.get("from")) if obj.get("from") is not None else None,
            "to": [EmailAddressName.from_dict(_item) for _item in obj.get("to")] if obj.get("to") is not None else None,
            "replyto": [EmailAddressName.from_dict(_item) for _item in obj.get("replyto")] if obj.get("replyto") is not None else None,
            "cc": [EmailAddressName.from_dict(_item) for _item in obj.get("cc")] if obj.get("cc") is not None else None,
            "bcc": [EmailAddressName.from_dict(_item) for _item in obj.get("bcc")] if obj.get("bcc") is not None else None,
            "attachments": [MailAttachment.from_dict(_item) for _item in obj.get("attachments")] if obj.get("attachments") is not None else None,
            "id": obj.get("id")
        })
        return _obj


